<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GrapeCity.ActiveReports.Chart</name>
    </assembly>
    <members>
        <member name="T:AssemblyNames">
            <summary>
            Contains strong assembly names and such
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Annotations.Annotation">
            <summary>
            Base class for all the annotation classes
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.Annotation.AnnotationClass">
            <summary>
            Name of this annotation type
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection">
            <summary>
            Collection of the annotation objects
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Change">
            <summary>
            Occurs when collection contents is changed
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.#ctor">
            <summary>
            Initializes new instance of the AnnotationsCollection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.#ctor(GrapeCity.ActiveReports.Chart.Annotations.Annotation[])">
            <summary>
            Initializes new instance of the AnnotationsCollection class
            </summary>
            <param name="annArray">Array of <see cref="T:GrapeCity.ActiveReports.Chart.Annotations.Annotation"/> to initialize new instance with</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance. This property cannot be overridden.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Item(System.Int32)">
            <summary>
            Gets or sets item by given index
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Item(System.String)">
            <summary>
            Gets item by given name
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Add(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
            <summary>
            Adds annotation object to the collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.AddRange(GrapeCity.ActiveReports.Chart.Annotations.Annotation[])">
            <summary>
            Adds a set of objects to the current collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Contains(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.Annotations.Annotation"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Annotations.Annotation"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.CopyTo(GrapeCity.ActiveReports.Chart.Annotations.Annotation[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.IndexOf(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Annotations.Annotation"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Remove(GrapeCity.ActiveReports.Chart.Annotations.Annotation)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Annotations.Annotation"/> to remove from the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.ToArray">
            <summary>
            TBW
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes objects at the index specified
            </summary>
            <param name="index">A zero-based index of object to delete</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationsCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine">
            <summary>
            Line annotation object, may connect to other annotations
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.StartPoint">
            <summary>
            Get or sets start point of line.
            Is not used if start of line is connected to another annotation
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.EndPoint">
            <summary>
            Gets or sets end point of line.
            Is not used if end of line is connected to another annotation.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.Line">
            <summary>
            Get or sets line info used to draw this annotation.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.StartConnection">
            <summary>
            Gets or sets <code>AnnotationTextBar</code> object to connect start point to.
            </summary>		
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.EndConnection">
            <summary>
            Gets or sets <code>AnnotationTextBar</code> object to connect end point to.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.StartConnectionIndex">
            <summary>
            Gets or sets index of anchor point of destination annotation to connect start point to.
            </summary>		
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.EndConnectionIndex">
            <summary>
            Gets or sets index of anchor point of destination annotation to connect end point to.
            </summary>		
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.Name">
            <summary>
            Gets or sets the Name of annotation line.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.#ctor">
            <summary>
            Initializes a new instance of the AnnotationLine class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.AnnotationClass">
            <summary>
            Gets annotation type name.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationLine.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType">
            <summary>
            Specifies how an annotation's bar anchors to annotation's position.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.TopLeft">
            <summary>
            The bar is anchored by its top left corner.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Top">
            <summary>
            The bar is anchored by its top side.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.TopRight">
            <summary>
            The bar is anchored by its top right corner.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Left">
            <summary>
            The bar is anchored by its left side.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Center">
            <summary>
            The bar is anchored by its center.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Right">
            <summary>
            The bar is anchored by its top right side.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.BottomLeft">
            <summary>
            The bar is anchored by its bottom left corner.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.Bottom">
            <summary>
            The bar is anchored by its bottom side.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Annotations.AnchorPlacementType.BottomRight">
            <summary>
            The bar is anchored by its bottom right corner.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar">
            <summary>
            Text bar annotation object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.AnchorPlacement">
            <summary>
            Gets or sets position of anchor point to stick to layer surface.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Backdrop">
            <summary>
            Gets or sets background used to fill interior of the text bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Line">
            <summary>
            Get or sets line info used to stroke text bar
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.AnchorPoint">
            <summary>
            Gets or sets anchor point in coordinate system of the corresponding layer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Width">
            <summary>
            Gets or sets the width of the bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Height">
            <summary>
            Gets or sets the height of the bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.RotationAngle">
            <summary>
            Gets or sets rotation angle (in degrees) of bar around anchor point.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Font">
            <summary>
            Gets or sets font used to display text on bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Text">
            <summary>
            Gets or sets text string to display on bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.#ctor">
            <summary>
            Initializes new instance of <code>AnnotationTextBar</code> object with all properties set to its defaults.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Annotations.AnnotationTextBar.AnnotationClass">
            <summary>
            Gets annotation type name.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ChartTypeConfig">
            <summary>
            Holds data about particular chart type
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.IsXY">
            <summary>
            Gets a value indicating whether this instance is not categorical.
            </summary>
            <value><c>true</c> if this instance is xy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.IsCategorical">
            <summary>
            Gets a value indicating whether this instance is categorical.
            </summary>
            <value><c>true</c> if this instance is categorical; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.RequiredSeriesCount">
            <summary>
            Gets the required series count.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.PropertiesTypes">
            <summary>
            Gets the properties types.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.CoreStyleType">
            <summary>
            Gets the type of the core style.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.CoreRendererType">
            <summary>
            Gets the type of the core renderer.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartTypeConfig.ApplyColorPaletteOnDataPoint">
            <summary>
            Gets a value indicating whether color palette should be applied to data point.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ChartConfigData">
            <summary>
            Summary description for ChartConfigData.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartConfigData.pn(GrapeCity.ActiveReports.Chart.CustomPropertyType)">
            <summary>
            returns custom property name by its id
            </summary>
            <param name="pt">property type</param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.BorderSizes">
            <summary>
            Describes sizes of border around rectangular area.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BorderSizes.#ctor">
            <summary>
            Initializes new instance of the BorderSizes class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BorderSizes.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of the BorderSizes class
            </summary>
            <param name="left">Left border margin</param>
            <param name="right">Right border margin</param>
            <param name="top">Top border margin</param>
            <param name="bottom">Bottom border margin</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Left">
            <summary>
            Gets or sets margin between inner and outer edges on the left side of a border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Right">
            <summary>
            Gets or sets margin between inner and outer edges on the right side of a border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Top">
            <summary>
            Gets or sets margin between inner and outer edges on the top side of a border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.BorderSizes.Bottom">
            <summary>
            Gets or sets margin between inner and outer edges on the bottom side of a border
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.CustomDrawEventArgs">
            <summary>
            Class CustomDrawEventArgs. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomDrawEventArgs.#ctor">
            <summary>
            Initializes a new instance of the CustomDrawEventArgs class.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.CustomDrawEventHandler">
            <summary>
            Specifies custom drawing event
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ICustomDrawer">
            <summary>
            ICustomDrawer interface
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.ICustomDrawer.PreDraw">
            <summary>
            Occurs before any drawings on this object by graph core.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.ICustomDrawer.PostDraw">
            <summary>
            Occurs after all drawings on this object by graph core is finished.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ICustomBorderDrawer">
            <summary>
            Specifies custom border drawing interface
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ICustomBorderDrawer.MeasureBorder">
            <summary>
            Returns border margins
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ICustomBorderDrawer.DrawBorder(System.Drawing.RectangleF,System.Object)">
            <summary>
            Draws border
            </summary>
            <param name="drawSpace">Rectangle to draw border within</param>
            <param name="drawer">Drawing device interface</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.CustomPropertyType">
            <summary>
            Custom property types. For internal use only.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.IChartMemberNameProvider">
            <summary>
            Provides name for chart member name provider.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.IChartMemberNameProvider.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
            <param name="i">The index of the field to find. </param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.BindingUtil">
            <summary>
            Utility class. For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BindingUtil.CheckDataSource(System.Object)">
            <summary>
            Check data source.
            </summary>
            <param name="dataSource">data source to check.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BindingUtil.CalculateSeriesData(GrapeCity.ActiveReports.Chart.Series,System.Object,System.String,System.Object,System.String)">
            <summary>
            Generates data values for given series 
            </summary>
            <param name="series">Series should be placed into SeriesCollection in order to make references to other series</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BindingUtil.GetDataMembers(System.Object,System.Boolean)">
            <summary>
            Gets the data members.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.CalcEngine">
            <summary>
            Interface part of calculation engines
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CalcEngine.Prepare">
            <summary>
            Prepares engine to use <code>Evaluate</code> method. Should be called once before
            first call to <code>Evaluate</code>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CalcEngine.Unprepare">
            <summary>
            Resets engine and releases some resources.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CalcEngine.AddFormula">
            <summary>
            Adds new formula to engine
            </summary>
            <returns>formula identifier</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CalcEngine.RemoveFormula(System.Int32)">
            <summary>
             Removes formula from engine.
            </summary>
            <param name="formulaId">formula identifier</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CalcEngine.Evaluate(System.Int32,System.Object[],System.Object@)">
            <summary>
            Evaluates formula using given arguments and returns result.
            </summary>
            <param name="formulaId">formula identifier</param>
            <param name="args">formula arguments</param>
            <param name="result">evaluation result</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CalcEngine.SetFormulaExpression(System.Int32,System.String)">
            <summary>
            Modifies formula expression
            </summary>
            <param name="formulaId">formula identifier</param>
            <param name="expression">new expression</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine">
            <summary>
            Formula evaluation engine, hosts multiple expressions
            RS: CR 22705 - Switch to CodeDom technology, since VSA is not good
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine.createEngine">
            <summary>
            RS: CR 22705 - Creates code compiler and sets assembly references
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine.recompile">
            <summary>
            Prepares source code, compiles and retrieves method types for formulas
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine.Engine">
            <summary>
            Gets or sets Engine property. Engine property specifies what CodeDom engine will be used to
            evaluate formula expressions. Set this property to Custom for your favourite CodeDom engine.
            Resets engine properties if <code>Custom</code> engine specifies.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine.SetCustomEngineProps(System.Type,System.String,System.String)">
            <summary>
            Sets custom engine <code>Type</code> and code templates.
            You must use following tags in the module template:
            $moduleName$, $functions$
            You must use following tags in the function template:
            $function$, $expression$
            </summary>
            <param name="engineType"><code>System.Type</code> of the custom CodeDom engine</param>
            <param name="customModuleTemplate">Module template</param>
            <param name="customFunctionTemplate">Function template</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine.Prepare">
            <summary>
            Prepares engine to use <code>Evaluate</code> method. Should be called once before
            first call to <code>Evaluate</code>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine.Unprepare">
            <summary>
            Resets engine and releases some resources.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CodeDomCalcEngine.AddFormula">
            <summary>
            See <code>CalcEngine</code> class for details.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataProvider.Count">
            <summary>
            Gets the number of data values
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataProvider.Item(System.Int32)">
            <summary>
            if index is more then maximum allowed value provider should try not to throw exception, but return default (0) value.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ReferenceDataProvider">
            <summary>
            it is just marker, reference data providers are calculated last in the series
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SeriesSelfReferenceXDataProvider.Count">
            <summary>
            CR#23200, By default count assigned to 1 
            Exception occurs in design time if _partiallyCalculatedPointData is null
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.XmlDataProvider">
            <summary>
            Provides access to XML data.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.XmlDataProvider.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the XMLDataProvider class.
            </summary>
            <param name="dataSource">Data source object.</param>
            <param name="columnName">The name of the column where the row of data is read.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.XmlDataProvider.Count">
            <summary>
            Gets the number of data values
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.XmlDataProvider.Item(System.Int32)">
            <summary>
            if index is more then maximum allowed value provider should try not to throw exception, but return default (0) value.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AdoDataProvider.PrepareDataSource(System.Object)">
            <summary>
            Converts any datasource to either DataView or IEnumerable
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Parser.Token">
            <summary>
            Summary description for Token.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.UIOptions">
            <summary>
            Specifies user interface settings for SharpGraph control
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.None">
            <summary>
            No UI
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.ContextCustomize">
            <summary>
            Adds "Customize" menu under items context menu
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.UseCustomTooltips">
            <summary>
            Use controls drawn tooltips instead on System.Windows.Forms.Tooltip
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UIOptions.ForceHitTesting">
            <summary>
            Switch this option on if you wish to use HitTest function, by default control applies
            optimization so only objects that has mouse event handlers (or context menus or tooltips) 
            attached will be visible thru hit testing.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.UICommand">
            <summary>
            Commands for control's DoCmd method
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.New">
            <summary>
            creates new chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.OpenXml">
            <summary>
            performs "open" command
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.SaveXml">
            <summary>
            performs "save as" command
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.PrintPreview">
            <summary>
            displays print preview
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Copy">
            <summary>
            copies chart to clipboard
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Designer">
            <summary>
            displays Chart Designer
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Customize">
            <summary>
            displays Chart Designer, obsolete
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Wizard">
            <summary>
            displays "Chart Wizard"
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.Clear">
            <summary>
            Reverts graph to empty state
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.UICommand.RefreshData">
            <summary>
            Refreshes chart data
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DeviceModes">
            <summary>
            Specifies device drawing mode
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.DeviceModes.None">
            <summary>
            Standard mode, no specific options
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.DeviceModes.BlackWhite">
            <summary>
            Hatch patterns and line dashing are used to designate colors
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Alignment">
            <summary>
            Specifies how text item anchors to its position
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.TopLeft">
            <summary>
            Top left
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.TopRight">
            <summary>
            Top right
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.BottomLeft">
            <summary>
            Bottom left
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Alignment.BottomRight">
            <summary>
            Bottom right
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DockType">
            <summary>
            Specify the docking area
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.DockType.Top">
            <summary>
            Dock to the top
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.DockType.Bottom">
            <summary>
            Dock to the bottom
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.DockType.Left">
            <summary>
            Dock to the left
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.DockType.Right">
            <summary>
            Dock to the right
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.BarType">
            <summary>
            Specifies bar shapes
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.BarType.Bar">
            <summary>
            Bar
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.BarType.Cone">
            <summary>
            Cone
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.BarType.Custom">
            <summary>
            Custom bar type
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.BarType.Cylinder">
            <summary>
            Cylinder
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.BarType.Pyramid">
            <summary>
            Pyramid shape
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.BaseStyle">
            <summary>
            Funnel/Pyramid chart 3D drawing style 
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.BaseStyle.CircularBase">
            <summary>
            (Default) Renders the Funnel chart with a Circular base shape. 
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.BaseStyle.SquareBase">
            <summary>
            Renders the Funnel chart with a Square base shape.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LabelsPlacement">
            <summary>
            Point label placement
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LabelsPlacement.Left">
            <summary>
            Data point labels are drawn to the left of the funnel segment
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LabelsPlacement.Right">
            <summary>
            (Default) Data point labels are drawn to the right of the funnel segment
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.FunnelStyle">
            <summary>
            Funnel chart style
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.FunnelStyle.YIsWidth">
            <summary>
            Data point Y-value controls the radius of the funnel segment.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.FunnelStyle.YIsHeight">
            <summary>
            (Default) Data point Y-value controls the height of the funnel segment
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Exchange.FontConverter">
            <devdoc>
                 FontConverter is a class that can be used to convert
                 fonts from one data type to another.  Access this
                 class through the TypeDescriptor.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <devdoc>
                 Determines if this converter can convert an object in the given source
                 type to the native type of the converter.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <devdoc>
               <para>Gets a value indicating whether this converter can
                  convert an object to the given destination type using the context.</para>
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <devdoc>
                 Converts the given object to the converter's native type.
            </devdoc>        
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <devdoc>
                 Converts the given object to another type.  The most common types to convert
                 are to and from a string object.  The default implementation will make a call
                 to ToString on the object if the object is valid and if the destination
                 type is string.  If this cannot convert to the desitnation type, this will
                 throw a NotSupportedException.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <devdoc>
                 Creates an instance of this type given a set of property values
                 for the object.  This is useful for objects that are immutable, but still
                 want to provide changable properties.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <devdoc>
                 Determines if changing a value on this object should require a call to
                 CreateInstance to create a new value.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.GetGraphicsUnitText(System.Drawing.GraphicsUnit)">
            <devdoc>
                Returns a text description for the font units
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <devdoc>
                 Retrieves the set of properties for this type.  By default, a type has
                 does not return any properties.  An easy implementation of this method
                 can just call TypeDescriptor.GetProperties for the correct data type.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <devdoc>
                 Determines if this object supports properties.  By default, this
                 is false.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.ParseSizeTokens(System.String,System.Char)">
            <devdoc>
                 Takes a string of the format ####.##CC and parses it into two strings.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.ParseGraphicsUnits(System.String)">
            <devdoc>
                Parses the font units from the given text.
            </devdoc>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.UnitName">
            <devdoc>
                Simple private class to associate a font size unit with a text name.
            </devdoc>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontNameConverter">
            <devdoc>
                 FontNameConverter is a type converter that is used to convert
                 a font name to and from various other representations.
            </devdoc>
            <internalonly/>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <devdoc>
                 Determines if this converter can convert an object in the given source
                 type to the native type of the converter.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <devdoc>
                 Converts the given object to the converter's native type.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <devdoc>
                 Retrieves a collection containing a set of standard values
                 for the data type this validator is designed for.  This
                 will return null if the data type does not support a
                 standard set of values.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <devdoc>
                 Determines if the list of standard values returned from
                 GetStandardValues is an exclusive list.  If the list
                 is exclusive, then no other values are valid, such as
                 in an enum data type.  If the list is not exclusive,
                 then there are other valid values besides the list of
                 standard values GetStandardValues provides.
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <devdoc>
                 Determines if this object supports a standard set of values
                 that can be picked from a list.
            </devdoc>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontUnitConverter">
            <devdoc>
                 FontUnitConverter strips out the members of GraphicsUnit that are invalid for fonts.
            </devdoc>
            <internalonly/>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontUnitConverter.#ctor">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.FontConverter.FontUnitConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <internalonly/>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Exchange.Persistence">
            <summary>
            Manages saving and restoring of chart state. For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.Persistence.ToXml(GrapeCity.ActiveReports.Chart.ISharpGraph,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Creates an XML encoding of the SharpGraph object and its current state.
            </summary>
            <param name="sharpChartControl"></param>
            <param name="rootElement"></param>
            <param name="includeData">Specifies whether to store data to XML</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.Persistence.ToXml(GrapeCity.ActiveReports.Chart.ISharpGraph,System.String)">
            <summary>
            Creates an XML encoding of the SharpGraph object and its current state (without data).
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.Persistence.ToXml(GrapeCity.ActiveReports.Chart.ISharpGraph,System.String,System.Boolean)">
            <summary>
            Creates an XML encoding of the SharpGraph object and its current state.
            </summary>
            <param name="sharpChartControl"></param>
            <param name="fileName"></param>
            <param name="includeData"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.Persistence.FromXml(GrapeCity.ActiveReports.Chart.ISharpGraph,System.Xml.XmlElement)">
            <summary>
            Reconstructs a SharpGraph object with a specified state from an XML encoding.
            
            Use "strict" attribute of root element "SharpGraph" in xml files
            to control error handling behaviour. This attribute is false by default. If true xml import process will stop once it finds first error and throw an exception.
            If false it will mutually continue. 
            </summary>
            <param name="sharpChartControl"></param>
            <param name="rootElement">The XML encoding to use to reconstruct the SharpGraph object.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.Persistence.FromXml(GrapeCity.ActiveReports.Chart.ISharpGraph,System.String)">
            <summary>
            Reconstructs a SharpGraph object with a specified state from an XML encoding.
            </summary>
            <param name="sharpChartControl"></param>
            <param name="fileName">The XML file name to use to reconstruct the SharpGraph object.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Exchange.Util.FromXml(System.Object@,System.Xml.XmlNode,System.Type,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext,System.Boolean)">
            <summary>
            Parse from XML.
            </summary>
            <param name="allowNull">Don't read null for collections</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.XYValueChangedEventHandler">
            <summary>
            delegate for handling ValueMebersX and ValueMembersY
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs">
            <summary>
            Holds on to ValueMembersX and ValuemembersY changes
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the changed property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the changed property.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the changed property.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.AxisType">
            <summary>
            Specifies axis type
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.AxisType.Categorical">
            <summary>
            Tha axis is used to place categories
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.AxisType.Numerical">
            <summary>
            Numeric axis
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.AxisType.Logarithmic">
            <summary>
            Logarithmic axis
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.StandardAxis">
            <summary>
            Enum StandardAxis
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisX">
            <summary>
            The axis x
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisX2">
            <summary>
            The axis x2
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisY">
            <summary>
            The axis y
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisY2">
            <summary>
            The axis y2
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StandardAxis.AxisZ">
            <summary>
            The axis z
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ArrowType">
            <summary>
            Enum ArrowType
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ArrowType.None">
            <summary>
            No arrow
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ArrowType.Triangle">
            <summary>
            Triangle arrow
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ArrowType.Lines">
            <summary>
            Lines arrow
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.AxisBase">
            <summary>
            Axes base class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.AxisBase"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.CloneTo(GrapeCity.ActiveReports.Chart.AxisBase)">
            <summary>
            Creates clone of the current object
            </summary>
            <param name="clone"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Xml">
            <summary>
            Design-time support, for internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.CheckPropertiesValidityImpl(GrapeCity.ActiveReports.Chart.ISharpGraph)">
            <summary>
            This method should be overriden if item should check inter-property dependencies.
            By default it does nothing
            Method should throw ArgumentException if it encounters errors
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.TickOffset">
            <summary>
            Offset of the first tick from Axis.Min
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Position">
            <summary>
            Position along adjacent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.SmartLabels">
            <summary>
            Gets or sets a value indicating whether the labels are smart.
            </summary>
            <value><c>true</c> if [smart labels]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Arrow">
            <summary>
            Gets or sets the axis arrow type.
            </summary>
            <value>The arrow.</value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Arrow</exception>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.AxisType">
            <summary>
            Gets or sets axis type, i.e. numerical or categorical
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Min">
            <summary>
            Min value for the axis or starting data point index for categories axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Max">
            <summary>
            Max value for the axis. Last data point index for categories axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Title">
            <summary>
            Text to draw on axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.TitleFont">
            <summary>
            Font to use to draw title
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.MajorTick">
            <summary>
            Major axis tick
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.MinorTick">
            <summary>
            Minor axis tick
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Line">
            <summary>
            Line used to draw axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelFont">
            <summary>
            Font used to draw axis' labels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsGap">
            <summary>
            How many labels to skip (for example 3 means: show label, skip, skip, ...)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelFormat">
            <summary>
            Format used to ouput labels values
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Labels">
            <summary>
            Labels contents, used for categorical axes
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsInside">
            <summary>
            Controls position of labels against axis line
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsAtBottom">
            <summary>
            Gets or sets a value indicating whether the labels should be shown at bottom of the axis.
            </summary>
            <value><c>true</c> if [labels at bottom]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.LabelsVisible">
            <summary>
            If false, axis labels will not be drawn.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Scale">
            <summary>
            Gets or sets scale value used to draw labels. Label values are divided by scale.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.DisplayScale">
            <summary>
            Specifies whether to display scale value on axis's title
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.Visible">
            <summary>
            Specifies whether to draw axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisBase.StaggerLabels">
            <summary>
            Gets or sets a value indicating whether the labels are stagger.
            </summary>
            <value><c>true</c> if [stagger labels]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.ShouldSerializeScroll">
            <summary>
            This method is called by serializer using reflection.
            This is a standard way to dynamically specify DesignerSerializationVisibility
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.AxisBase.FilteredTypeConverter">
            <summary>
            EnumConverter to show only valid axis types.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.FilteredTypeConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.EnumConverter" /> class for the given type.
            </summary>
            <param name="type">A <see cref="T:System.Type" /> that represents the type of enumeration to associate with this enumeration converter.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.FilteredTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a collection of standard values for the data type this validator is designed for.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisBase.FilteredTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Gets a value indicating whether the given object value is valid for this type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object" /> to test.</param>
            <returns>true if the specified value is valid for this object; otherwise, false.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Axis">
            <summary>
            Chart's axis
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Axis.#ctor">
            <summary>
            Creates default (numerical) axis
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Axis.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Axis.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Axis.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Axis.Name">
            <summary>
            Gets or sets the axis name.
            </summary>
            <value>The name.</value>
            <exception cref="T:System.InvalidOperationException">Can't change name for standard axis</exception>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Axis.IsDirty">
            <summary>
            Dirty state.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.CustomAxis">
            <summary>
            Custom axis
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomAxis.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomAxis.#ctor">
            <summary>
            Creates default axis
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomAxis.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomAxis.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.Parent">
            <summary>
            Main axis (i.e. X, Y or Z) on which to draw this custom axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.MinDerived">
            <summary>
            if true, axis automatically calculates it's min value based on position against parent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.MaxDerived">
            <summary>
            if true, axis automatically calculates it's max value based on position against parent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.PlacementLength">
            <summary>
            Legnth of custom axis in terms of parent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.PlacementLocation">
            <summary>
            Position of custom axis' origin in terms of parent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomAxis.IsDirty">
            <summary>
            Dirty state.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.AxesCollection">
            <summary>
            Axes collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.#ctor">
            <summary>
            Controls standard axes by default
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Clone">
            <summary>
            Clones current object
            </summary>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Item(System.Int32)">
            <summary>
            Gets axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GrapeCity.ActiveReports.Chart.AxisBase"/> with the specified axis name.
            </summary>
            <param name="axisName">Name of the axis.</param>
            <returns>AxisBase.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Add(GrapeCity.ActiveReports.Chart.AxisBase)">
            <summary>
            Adds axis to the collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.AddRange(GrapeCity.ActiveReports.Chart.AxisBase[])">
            <summary>
            Adds a set of axes to the current collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.ToArray">
            <summary>
            Gets all axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Contains(GrapeCity.ActiveReports.Chart.AxisBase)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.AxisBase"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.AxisBase"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Remove(GrapeCity.ActiveReports.Chart.AxisBase)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.AxisBase"/> to remove from the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.AxisBase)">
            <summary>
            Inserts an <code>AxisBase</code> to the collection at the specified position
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.IndexOf(GrapeCity.ActiveReports.Chart.AxisBase)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the System.Collections.CollectionBase instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance. This property cannot be overridden.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxesCollection.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the System.Collections.CollectionBase instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the System.Collections.CollectionBase instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the System.Collections.CollectionBase instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxesCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LabelsCollection">
            <summary>
            Labels collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Clone">
            <summary>
            Clones current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.GetLabels">
            <summary>
            Gets a string array of the labels in the collection.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelsCollection.Item(System.Int32)">
            <summary>
            TBW
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Add(System.String)">
            <summary>
            Adds label to the collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.AddRange(System.String[])">
            <summary>
            Adds a set of labels to the current collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Contains(System.String)">
            <summary>
            Determines whether the Collection contains the given element
            </summary>
            <param name="value">The string to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.CopyTo(GrapeCity.ActiveReports.Chart.CustomAxis[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:System.String"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to remove from the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.Clear">
            <summary>
            Removes all labels from collection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelsCollection.Count">
            <summary>
            Gets the number of items in collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.AxisScroll">
            <summary>
            Represents the scroll bar on an axis.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisScroll.#ctor">
            <summary>
            Initializes a new instance of the AxisScroll class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisScroll.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisScroll.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.AxisScroll.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ScrollPosition">
            <summary>
            Scrolling position within parent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ScrollLength">
            <summary>
            Scrolling area length
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ScrollStepSize">
            <summary>
            Step scrolling size. Step scrolling is occured when user clicks scroll buttons.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Visible">
            <summary>
            Specifies whether scroll is available
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Chart.AxisScroll"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.BackColor">
            <summary>
            scrollbar background color
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.ButtonColor">
            <summary>
            buttons face color
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.OutlineColor">
            <summary>
            scrollbar outline color
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Width">
            <summary>
            scrollbar width in pixels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.AxisScroll.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.BackdropItem">
            <summary>
            Represents backdrop that acts as separate item, i.e. may handle mouse events
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor">
            <summary>
            Creates a new instance of the BackdropItem object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object
            </summary>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance of the BackdropItem object
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object.
            </summary>
            <param name="color"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color,System.Byte)">
            <summary>
            Creates a new instance of the BackdropItem object.
            </summary>
            <param name="color"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Color,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object.
            </summary>
            <param name="color"></param>
            <param name="alpha"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new instance of the BackdropItem object of a "gradient" style.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object of a "gradient" style.
            </summary>
            <param name="gradient"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new instance of the BackdropItem object with a "hatch" style.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object of a "hatch" style.
            </summary>
            <param name="pattern"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
            <summary>
            Creates a new instance of the BackdropItem object with a "picture" style.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object with a "picture" style.
            </summary>
            <param name="picture"></param>
            <param name="pictureAlignment"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
            <summary>
            Creates a new instance of the BackdropItem object.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="gradient"></param>
            <param name="pattern"></param>
            <param name="picture"></param>
            <param name="pictureAlignment"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="gradient"></param>
            <param name="pattern"></param>
            <param name="picture"></param>
            <param name="pictureAlignment"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte)">
            <summary>
            Creates a new instance of the BackdropItem object.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="gradient"></param>
            <param name="pattern"></param>
            <param name="picture"></param>
            <param name="pictureAlignment"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Creates a new instance of the BackdropItem object.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="gradient"></param>
            <param name="pattern"></param>
            <param name="picture"></param>
            <param name="pictureAlignment"></param>
            <param name="alpha"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.BackdropItem"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseHover">
            <summary>
            Occurs when the mouse pointer hovers over the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the control and a mouse button is released.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.BackdropItem.MouseWheel">
            <summary>
            Occurs when the mouse wheel moves while the control has focus.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.GrapeCity#ActiveReports#Chart#IMouseEnabled#NeedMouseHandling">
            <summary>
            Indicates whether mouse events should be handled for this control (i.e. control implemets at least one of mouse event handler).
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseMove(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseMove" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseDown(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseEnter(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseEnter" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseHover(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseHover" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseLeave(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseLeave" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseUp(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.OnMouseWheel(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseWheel" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.BackdropItem.ContextMenu">
            <summary>
            Gets or sets the shortcut menu associated with the control.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.BackdropItem.Converter">
            <summary>
            Backdrop type converter
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.BackdropItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Border">
            <summary>
            Represents information required to draw borders
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Border.MIN_SHADOWWEIGHT_VALUE">
            <summary>
            ZDepthRatio property's minimal and maximal values.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor">
            <summary>
            Creates default border
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line)">
            <summary>
            Initializes new instance of border object.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Int32)">
            <summary>
            Initializes new instance of border object with a black shadow.
            </summary>
            <param name="line">Specifies border line info</param>
            <param name="shadowWeight">Specifies shadow weight</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Int32,System.Drawing.Color)">
            <summary>
            Initializes new instance of border object.
            </summary>
            <param name="line">Specifies border line info</param>
            <param name="shadowWeight">Specifies shadow weight</param>
            <param name="shadowColor">Specifies shadow color</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Border.Line">
            <summary>
            Line style to draw border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Border.ShadowWeight">
            <summary>
            Width of shadow outlining border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Border.ShadowColor">
            <summary>
            Color of shadow outlining border
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Border.Converter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>			
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.Equals(System.Object)">
            <summary>
            Compare the Border object to another System.Object and check if the two are equal.
            </summary>
            <param name="obj">System.Object to compare with Border object.</param>
            <returns>Boolean type. Returns True if the Border object is equal to System.Object. Otherwise it is False.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Border.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ChartArea">
            <summary>
            Chart area object
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartArea.MIN_ZDEPTH_VALUE">
            <summary>
            ZDepthRatio property's minimal and maximal values.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Xml">
            <summary>
            Design-time support, for internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.#ctor">
            <summary>
            Initializes new instance of chart area object without axes
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.#ctor(System.Boolean)">
            <summary>
            Initializes new instance of chart area object.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Backdrop">
            <summary>
            Gets or sets backdrop info to draw chart area
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Border">
            <summary>
            Gets or sets chart area's border info
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Padding">
            <summary>
            Gets or sets chart area's padding info
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.ZDepthRatio">
            <summary>
            Gets or sets area depth, specified as z/x ratio.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallXZ">
            <summary>
            Gets or sets XZ wall properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallXY">
            <summary>
            Gets or sets XY wall settings
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallYZ">
            <summary>
            Gets or sets YZ wall properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Projection">
            <summary>
            geometric projection details
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Light">
            <summary>
            Lighting details
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.ViewPoint">
            <summary>
            Determines point from which chart is seen
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.Axes">
            <summary>
            User defined custom axes
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.WallRanges">
            <summary>
            Wall ranges (strip lines)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.SwapAxesDirection">
            <summary>
            Specifies whether to swap X and Y axis direction. Used to get horizontally oriented chart.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartArea.SeriesLine">
            <summary>
            Series line
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartArea.SetInversedAxes(System.Boolean)">
            <summary>
            Forces axis swapping
            </summary>
            <param name="inversed"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ChartAreasCollection">
            <summary>
            Chart areas collection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.#ctor">
            <summary>
            Initializes a new instance of the ChartAreasCollection class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Clone">
            <summary>
            Creates clone of the current object
            </summary>
            <returns></returns>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Change">
            <summary>
            Occurs when collection contents is changed.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Item(System.Int32)">
            <summary>
            Gets or sets area object at the given index
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GrapeCity.ActiveReports.Chart.ChartArea"/> with the specified chart area name.
            </summary>
            <param name="chartAreaName">Name of the chart area.</param>
            <returns>ChartArea.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Add(GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            Adds area object to the current collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.AddRange(GrapeCity.ActiveReports.Chart.ChartArea[])">
            <summary>
            Adds a set of area objects to the current collection
            </summary>
            <param name="areas"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Contains(GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.ChartArea"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.ChartArea"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.CopyTo(GrapeCity.ActiveReports.Chart.ChartArea[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.IndexOf(GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.ChartArea"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Remove(GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.ChartArea"/> to remove from the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ChartAreasCollection.Clear">
            <summary>
            Removes all chart areas from the collection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ChartAreasCollection.ParentControl">
            <summary>
            Gets the SharpGraph control that holds that collection
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ColorPalette">
            <summary>
            Specifies the type of color palette
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.None">
            <summary>
            Graph will not generate any Backdrop values automatically
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Default">
            <summary>
            SharpGraph's default color palette
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Cascade">
            <summary>
            8 color cascades from deep tee to pale orchids
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Springtime">
            <summary>
            Deep green spring colors. Two vivid colors and five pastel colors
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Iceburg">
            <summary>
            It ranges from soft blue to gray in iceberg tones
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Iceberg">
            <summary>
            It ranges from soft blue to gray in iceberg tones
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Confetti">
            <summary>
            A few light pastel colors
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Greens">
            <summary>
            Color range from green refrigerator in the 70's to evergreens
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Berries">
            <summary>
            Color range from blueberry to raspberry
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Autumn">
            <summary>
            Rich brown and gold autumn 
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ColorPalette.Murphy">
            <summary>
            Bitter green, rust color, beige
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter"/> Class. 
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>true if <see cref="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> should be called to find a common set of values the object supports; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked.This parameter or properties of this parameter can be null.</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ColorPaletteTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ColorPaletteHandler">
            <summary>
            Implementations of this class will have knowledge on how to apply color palette to specific 
            chart type
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.CustomProperties">
            <summary>
            Represents collection of series properties (series type specific)
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.CustomProperties"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetPropertiesCount">
            <summary>
            For internal use only!
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.#ctor(GrapeCity.ActiveReports.Chart.KeyValuePair[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.CustomProperties"/> class.
            </summary>
            <param name="initialValues">The initial values.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomProperties.IsDirty">
            <summary>
            This member overrides <code>Item.IsDirty</code>. Always false.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.CountNotNullProperties">
            <summary>
            For internal use only!
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.Contains(System.String)">
            <summary>
            Returns true if properties collection contains the property with the name specified
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.CustomProperties.Item(System.String)">
            <summary>
            Gets property by its name
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>The class name of the object, or null if the class does not have a name.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for this object.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>The name of the object, or null if the object does not have a name.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>An <see cref="T:System.ComponentModel.EventDescriptor" /> that represents the default event for this object, or null if this object does not have events.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the default property for this object, or null if this object does not have properties.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the editor for this object.</param>
            <returns>An <see cref="T:System.Object" /> of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
            <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the filtered events for this component instance.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the events for this component instance.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the filtered properties for this component instance.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties for this component instance.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.</param>
            <returns>An <see cref="T:System.Object" /> that represents the owner of the specified property.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.CustomProperties.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.KeyValuePair">
            <summary>
            Represents a key-value pair.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.KeyValuePair"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.KeyValuePair"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object,GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.KeyValuePair"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.KeyValuePair.#ctor(System.String,System.Object,GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.KeyValuePair"/> class.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.Validator">
            <summary>
            Gets the validator.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.KeyValuePair.IsPointOverridable">
            <summary>
            Gets true if the custom property is applicable to series's points
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator">
            <summary>
            Interface ICustomPropertyValueValidator
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator.Validate(System.Object)">
            <summary>
            Method should throw ArgumentException if value is not valid
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ICustomPropertyValueValidator.GetAnyValidValue">
            <summary>
            Gets any valid value.
            </summary>
            <returns>The instance of <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.NumericRangeValidator">
            <summary>
            Class NumericRangeValidator. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.NumericRangeValidator"/> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="isInclusive">if set to <c>true</c> [is inclusive].</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.NumericRangeValidator"/> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="isInclusive">if set to <c>true</c> [is inclusive].</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.Validate(System.Object)">
            <summary>
            Method should throw ArgumentException if value is not valid
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NumericRangeValidator.GetAnyValidValue">
            <summary>
            Gets any valid value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DataPoint">
            <summary>
            Represents the set of properties for a data point.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.IsDirty">
            <summary>
            This member overrides <code>Item.IsDirty</code>. Always false.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean,GrapeCity.ActiveReports.Chart.CustomProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.Object,GrapeCity.ActiveReports.Chart.DoubleArray,System.Boolean,GrapeCity.ActiveReports.Chart.CustomProperties,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPoint.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Properties">
            <summary>
            Gets or sets the properties fo data point.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.YValues">
            <summary>
            Gets or sets the Y values.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.XValue">
            <summary>
            Gets or sets the X value.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.DisplayInLegend">
            <summary>
            Gets or sets a value indicating whether data point should be reflected in legend.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.LegendText">
            <summary>
            Gets or sets the legend text.
            </summary>
            <value>The legend text.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Backdrop">
            <summary>
            Gets or sets the backdrop.
            </summary>
            <value>The backdrop.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.BorderLine">
            <summary>
            Gets or sets the border line.
            </summary>
            <value>The border line.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Line">
            <summary>
            Gets or sets the line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Marker">
            <summary>
            Gets or sets the marker.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPoint.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DoubleArray">
            <summary>
            Array of double values
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DoubleArray.IsDirty">
            <summary>
            This member overrides <code>Item.IsDirty</code>. Always false.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.Double[])">
            <summary>
            Initializes new instance of the DoubleArray
            </summary>
            <param name="data">Data to initialize array with</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.DateTime[])">
            <summary>
            Initializes new instance of the DoubleArray
            </summary>
            <param name="data">Data to initialize array with</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.Double[],System.Boolean[])">
            <summary>
            Initializes new instance of the DoubleArray
            </summary>
            <param name="data">Data to initialize array with</param>
            <param name="isDateTime">Specifies whether the array value is a DateTime value</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.SetupFromString(System.String,System.IFormatProvider)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes new instance of the DoubleArray. This constructor is used by code serialization.
            </summary>
            <param name="data">Data to initialize array with. Format is numbers in invariant culture separated by semicolons</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.SetupFromXml(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Clone">
            <summary>
            Creates a clone of the current object
            </summary>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DoubleArray.Item(System.Int32)">
            <summary>
            Gets value at the index specified
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.IsDateTime(System.Int32)">
            <summary>
            Gets a value indicating whether the 2D array is a DateTime type array.
            </summary>
            <param name="index">Specify the index of a two-dimensional array.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.SetIsDateTime(System.Int32,System.Boolean)">
            <summary>
            Sets the specified value of the specified index as a DateTime value.
            </summary>
            <param name="index">Specify the index of the value to be set.</param>
            <param name="value">Specify a value.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DoubleArray.Length">
            <summary>
            Gets array length
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DoubleArray.Converter">
            <summary>
            Provides a way to process converting of instances ot <see cref="T:GrapeCity.ActiveReports.Chart.DoubleArray"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>			
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>		
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>					
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.ToString(System.IFormatProvider)">
            <summary>
            Convert the value of the current instance to string representation, depending on the specified culture.
            </summary>
            <param name="culture">Specify the culture to use.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleArray.ToString">
            <summary>
            Converts the value of the current instance to string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DataPointsCollection">
            <summary>
            DataPoints collection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Clone">
            <summary>
            Creates a clone of the current collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.DataPointsCollection.Change">
            <summary>
            Occurs when the collection's content is changed
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.#ctor">
            <summary>
            Initializes a new instance of the DataPointsCollection class.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPointsCollection.Count">
            <summary>
            Gets the number of elements contained in the DataPointsCollection instance.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPointsCollection.Capacity">
            <summary>
            Gets or sets the number of elements that the DataPointsCollection can contain.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DataPointsCollection.Item(System.Int32)">
            <summary>
            Gets or sets collection item by given index
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Add(GrapeCity.ActiveReports.Chart.DataPoint)">
            <summary>
            Adds layer object to the current collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.AddRange(GrapeCity.ActiveReports.Chart.DataPoint[])">
            <summary>
            Adds a set of layers to the current collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Contains(GrapeCity.ActiveReports.Chart.DataPoint)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.CopyTo(GrapeCity.ActiveReports.Chart.DataPoint[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.IndexOf(GrapeCity.ActiveReports.Chart.DataPoint)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.DataPoint)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Remove(GrapeCity.ActiveReports.Chart.DataPoint)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.DataPoint"/> to remove from the collection.</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DataPointsCollection.Converter">
            <summary>
            Provides a way to process converting of instances ot <see cref="T:GrapeCity.ActiveReports.Chart.DataPointsCollection"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>			
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.AddXY(System.Object,System.Double[])">
            <summary>
            Adds a DataPoint with the specified parameters to the DataPointsCollection.
            </summary>
            <param name="xValue">Specifies the X value.</param>
            <param name="yValue">Specifies the Y values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.AddY(System.Double[])">
            <summary>
            Adds a DataPoint with the specified y value to the DataPointsCollection.
            </summary>
            <param name="yValue">Specifies the Y value.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindXY(System.Object,System.String,System.Object,System.String)">
            <summary>
            Binds the X and Y values of the collection's DataPoints to the specified column(s) of the specified data source.
            </summary>
            <param name="xDataSource">Specifies the data source object that provides the X value(s).</param>
            <param name="xField">Specify the name of the column supplying the X value of DataPoints as a string.</param>
            <param name="yDataSource">Specifies the data source object that provides the Y value(s).</param>
            <param name="yFields">Specify a comma-separated column names to supply Y values for DataPoints.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindY(System.Object,System.String)">
            <summary>
            Binds the Y value(s) of the collection's DataPoints to the specified column(s) of the specified data source.  
            </summary>
            <param name="yDataSource">Specifies the data source object that provides the Y value(s).</param>
            <param name="yFields">Specifies the data source field(s) to which to bind DataPoints.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindXY(System.Collections.IEnumerable,System.Collections.IEnumerable[])">
            <summary>
            Binds the X value and Y values of the collection's DataPoints to the first column(s) of the specified data source(s).
            </summary>
            <param name="xValueEnumerable">Specifies the data source that will supply the X values for the DataPoints. The first available column will be used.</param>
            <param name="yEnumerableValues">Specifies the Y value(s) of the DataPoint object added to the collection (one or more comma-separated values).</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindY(System.Collections.IEnumerable[])">
            <summary>
            Binds the Y value(s) of the collection's DataPoints to the first column of the specified data source(s).  
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindXY(System.Object[],System.Double[][])">
            <summary>
            Binds the X value and Y values of the collection's DataPoints to a specified data source.
            </summary>
            <param name="xValues">Specifies the array of X values of the DataPoint object added to the collection.</param>
            <param name="yValues">Specifies the array of Y values of the doubles added to the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DataPointsCollection.DataBindY(System.Double[][])">
            <summary>
            Binds the Y values of the collection's DataPoints to a specified data source.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.FontInfo">
            <summary>
            Summary description for FontInfo.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor(System.Drawing.Color,System.Drawing.Font,System.Single)">
            <summary>
            Initializes new instance of the FontInfo object
            </summary>
            <param name="color">Text color</param>
            <param name="font">System font</param>
            <param name="angle">Text angle in degrees</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor(System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes new instance of the FontInfo object
            </summary>
            <param name="color">Text color</param>
            <param name="font">System font</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor">
            <summary>
            Initializes new (default) instance of the FontInfo object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.FontInfo.Color">
            <summary>
            Specifies the text color
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.FontInfo.Angle">
            <summary>
            Rotation angle, clockwise, degrees
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.FontInfo.Font">
            <summary>
            GDI font
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.Equals(System.Object)">
            <summary>
            Compare the FontInfo object to another System.Object and check if the two are equal.
            </summary>
            <param name="obj">System.Object to compare with FontInfo object.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FontInfo.GetHashCode">
            <summary>
            It functions as a hash function for a particular type. It is suitable for use in data structures such as hash algorithm and hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.GridLayout">
            <summary>
            Represents the setting of the GridLayout object
            For a list of all members of this type, see the GridLayout member
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.IsDirty">
            <summary>
            This member overrides <code>Item.IsDirty</code>. Always false.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.#ctor">
            <summary>
            Initializes a new instance of the GridLayout class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the GridLayout class, specifying the number of rows and the number of columns
            </summary>
            <param name="rows">Specify the number of rows</param>
            <param name="columns">Specify the number of columns</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.Columns">
            <summary>
            Gets or sets the number of columns in GridLayout
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.Rows">
            <summary>
            Gets or sets the number of rows in GridLayout
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GridLayout.Size">
            <summary>
            Gets number of chart area cells
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.IncreaseSize">
            <summary>
            Increases rows or columns whichever is less by 1.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.DecreaseSize">
            <summary>
            Decreases rows or columns whichever is more by 1.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.GridLayout.Converter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.Equals(System.Object)">
            <summary>
            Compare the GridLayout object to another System.Object and check if the two are equal.
            </summary>
            <param name="obj">System.Object to compare with GridLayout object.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GridLayout.GetHashCode">
            <summary>
            Gets hash code.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.IGraphItem">
            <summary>
            For internal use. Base interface for chart's items.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.IGraphItem.IsDirty">
            <summary>
            Dirty state.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.IGraphItem.IsAttachable">
            <summary>
            Current attachable state.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.IGraphItem.AttachParent(GrapeCity.ActiveReports.Chart.IGraphItem)">
            <summary>
            Attache to parent.
            </summary>
            <param name="parent">parent</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.IGraphItem.Parent">
            <summary>
            Gets parent if attached.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Item">
            <summary>
            This class supports hierarchy of items
            that allows to handle isDirty flag and to automatically refresh drawing
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Item.isDirty">
            <summary>
            Specifies whether object should be redrawn
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.Item"/> Class. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Item.IsAttachable">
            <summary>
            Current attachable state.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.Destroy(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="descrease">Decrease layout flag.</param>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.Item.Change">
            <summary>
            This event is fire when this object changes, including changes in any inner properties.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.InternalGetParents">
            <summary>
            Returns internal array
            </summary>
            <returns>array of some objects</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.CheckPropertiesValidity">
            <summary>
            method is called automatically upon attaching parent
            sublcassed items should call this method on critical property change
            if there is no graph as grandparent this method does nothing, otherwise it calls CheckValidityImpl
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.CheckPropertiesValidityImpl(GrapeCity.ActiveReports.Chart.ISharpGraph)">
            <summary>
            this method should be overriden if item should check inter-property dependencies.
            by default it does nothing
            Method should throw ArgumentException if it encounters errors
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Item.IsDirty">
            <summary>
            Dirty state.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.NotifyOnAnyPropertyChange(System.Object)">
            <summary>
            is called when property value changes.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.SetAlreadyConverted">
            <summary>
            Is called by main SharpGraph's core convertor after it have used all info from the object.
            Object has to set it's IsDirty to false on this call.
            Makes sense only for objects that doesn't have getCore... method.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.ToXmlString">
            <summary>
            For internal use only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.GetPropertiesForXmlSerialization(GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            Gets collection of PropertyInfo objects for items that should be serialized to XML
            </summary>
            <param name="context">Serialization context</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Item.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Item.Root">
            <summary>
            Returns root of chart graph
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ItemComponent">
            <summary>
            Base class for area scrolls and legend items.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ItemComponent.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.ItemComponent"/> Class. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.ItemComponent.Name">
            <summary>
            Gets or sets component name.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.ItemComponent.Disposed">
            <summary>
            Occurs when the instance disposed.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ItemComponent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.ItemComponent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext">
            <summary>
            Represents contextual information about a serialization, such as its DirectionType, document and other.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType">
            <summary>
            Direction to serialize - from xml or to xml
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType.ToXml">
            <summary>
            Object's state to the xml.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType.FromXml">
            <summary>
            Xml to the object's state
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.Doc">
            <summary>
            Gets the XmlDocument.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.RegisteredComponents">
            <summary>
            Gets the registered components collection.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.IncludeData">
            <summary>
            Gets the flag determining if points will be included or not.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.StrictImport">
            <summary>
            False by default. If true xml import process will stop once it finds an error and throw an exception.
            If false it will mutually continue. Use "strict" attribute of root element "SharpGraph" in xml files
            to control this behaviour.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.Direction">
            <summary>
            Direction to serialize - from xml or to xml
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.#ctor(GrapeCity.ActiveReports.Chart.ISharpGraph,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType,System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Initializes a new instance of the GraphXmlSerializationContext class.
            </summary>
            <param name="sharpGraph">A SharpGraph control</param>
            <param name="direction">Direction to serialize - from xml or to xml</param>
            <param name="doc">An XmlDocument</param>
            <param name="includeData"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.#ctor(GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext.DirectionType,System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GraphXmlSerializationContext class.
            </summary>
            <param name="direction">Direction to serialize - from xml or to xml</param>
            <param name="doc">An XmlDocument</param>
            <param name="includeData"></param>
            <param name="useComponentReferences"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.IGraphXmlSerializable">
            <summary>
            IChartXmlSerializable interface
            </summary>	
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.IGraphXmlSerializable.ToXml(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            Stores object's state to XML node
            </summary>
            <param name="nodeName">Node name</param>
            <param name="context"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.IGraphXmlSerializable.FromXml(System.Xml.XmlNode,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            Reads object's state from XML node
            </summary>
            <param name="node"></param>
            <param name="context"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.IMouseEnabled">
            <summary>
            IMouseEnabled interface
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseHover">
            <summary>
            Occurs when the mouse pointer hovers over the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the control and a mouse button is released.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.IMouseEnabled.MouseWheel">
            <summary>
            Occurs when the mouse wheel moves while the control has focus.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.IMouseEnabled.ContextMenu">
            <summary>
            Gets or sets the shortcut menu associated with the control.
            </summary>		
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.IMouseEnabled.NeedMouseHandling">
            <summary>
            Indicates whether mouse events should be handled for this control (i.e. control implemets at least one of mouse event handler).
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DrawCustomizableItem">
            <summary>
            Class of items with overridable drawing code
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.DrawCustomizableItem"/> Class. 
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.DrawCustomizableItem"/> Class. 
            </summary>
            <param name="antiAliasMode">Current mode.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.AntiAliasMode">
            <summary>
            Specifies antialiasing mode to draw current object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.AASettingsEqual(GrapeCity.ActiveReports.Chart.DrawCustomizableItem)">
            <summary>
            Check if AntiAliasing mode is same.
            </summary>
            <param name="itemToCompare">Item to compare.</param>
            <returns>True if equals.</returns>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.PreDraw">
            <summary>
            PreDraw event is fired before any drawings on this object by chart core.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.PostDraw">
            <summary>
            PostDraw event is fired after all drawings on this object by chart core is finished.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.ToCoreObject(System.Int32)">
            <summary>
            Don't call, it just for overriding
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableItem.GetCoreObject(System.Int32)">
            <summary>
            Call to get corresponding core object
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.INamedComponent">
            <summary>
            Component with name.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.INamedComponent.Name">
            <summary>
            Gets or sets component name.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent">
            <summary>
            Chart area and legend base class.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.Name">
            <summary>
            Gets or sets component name.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.Disposed">
            <summary>
            Throws if component was disposed.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DrawCustomizableComponent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.MouseEnabledItem">
            <summary>
            Class of the items user may interact with
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.MouseEnabledItem"/> Class. 
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.MouseEnabledItem"/> Class. 
            </summary>
            <param name="antiAliasMode">Current mode.</param>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseHover">
            <summary>
            Occurs when the mouse pointer hovers over the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the control and a mouse button is released.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledItem.MouseWheel">
            <summary>
            Occurs when the mouse wheel moves while the control has focus.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.NeedMouseHandling">
            <summary>
            Check if mouse handling required.
            </summary>
            <returns>True if mouse handling required.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseMove(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseMove" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseDown(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseEnter(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseEnter" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseHover(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseHover" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseLeave(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseLeave" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseUp(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledItem.OnMouseWheel(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseWheel" /> event.
            </summary>
            <param name="e">The <see cref="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.MouseEnabledItem.ContextMenu">
            <summary>
            Gets or sets the shortcut menu associated with the control.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.MouseEnabledComponent">
            <summary>
            Class of the components user may interact with
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.MouseEnabledComponent"/> Class. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.Name">
            <summary>
            Gets or sets component name.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.Disposed">
            <summary>
            Occurs when the instance disposed.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.MouseEnabledComponent.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LabelInfo">
            <summary>
            Label object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.CheckPropertiesValidityImpl(GrapeCity.ActiveReports.Chart.ISharpGraph)">
            <summary>
            This member overrides <code>Item.CheckPropertiesValidityImpl</code>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor">
            <summary>
            Initializes new instance of the LabelInfo class with default settings
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the LabelInfo class with default settings
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.FontInfo,System.String,GrapeCity.ActiveReports.Chart.Alignment)">
            <summary>
            Initializes new instance of the LabelInfo class 
            </summary>
            <param name="border">border info to outline label's bar</param>
            <param name="backdrop">backdrop info to fill label's bar</param>
            <param name="font">font info to draw label text</param>
            <param name="format">format string to draw label</param>
            <param name="alignment">label alignment around the anchor point</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.FontInfo,System.String,GrapeCity.ActiveReports.Chart.Alignment,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the LabelInfo class 
            </summary>
            <param name="border">border info to outline label's bar</param>
            <param name="backdrop">backdrop info to fill label's bar</param>
            <param name="font">font info to draw label text</param>
            <param name="format">format string to draw label</param>
            <param name="alignment">label alignment around the anchor point</param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Border">
            <summary>
            Gets or sets line info to outline label bar
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Backdrop">
            <summary>
            Gets or sets background info to fill label bar
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Font">
            <summary>
            Gets or sets font info to draw labels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Format">
            <summary>
            Gets or sets label format string
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.InternalFormat">
            <summary>
            this value replaces Format and is used for labels data binding
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LabelInfo.Alignment">
            <summary>
            Gets or sets label's position around anchor point
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LabelInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Legend">
            <summary>
            Legend class
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Legend.alignment">
            <summary>
            Floating legend alignment
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Legend.marginX">
            <summary>
            Floating legend vertical margin
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Legend.marginY">
            <summary>
            Floating legend horizontal margin
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Legend.dockAreaSetExplicitly">
            <summary>
            this variable is used to determine if user initialized value of DockArea
            or we should set it to default value
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Legend.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.Xml">
            <summary>
            Design-time support, for internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Legend.#ctor">
            <summary>
            Initializes new instance of the LegendItem object with the default properties set
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Legend.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Legend.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.Backdrop">
            <summary>
            Gets or sets backdrop info to fill legend box
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.Border">
            <summary>
            Gets or sets border info to outline legend box
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.Visible">
            <summary>
            Gets or sets legend visibility
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.Header">
            <summary>
            Gets or sets legend title
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.Footer">
            <summary>
            Gets or sets legend footer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.LabelsFont">
            <summary>
            Gets or sets font to draw labels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.LegendItems">
            <summary>
            Gets custom legend items collection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.Alignment">
            <summary>
            Gets or sets floating legend alignment within chart area
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.MarginX">
            <summary>
            Gets or sets floating legend horizontal margin
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.MarginY">
            <summary>
            Gets or sets floating legend vertical margin
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.CustomBorderDrawer">
            <summary>
            Gets or sets custom-draw object
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.DockArea">
            <summary>
            Gets or sets the chart area to which the legend is docked.
            </summary>
            <value>The dock area.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.DockInsideArea">
            <summary>
            Specifies whether legend will be docked inside containing area
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Legend.GridLayout">
            <summary>
            Gets or sets the grid layout for the Legend.  
            </summary>
            <value>The grid layout.</value>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LegendsCollection">
            <summary>
            Legends collection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.#ctor">
            <summary>
            Initializes a new instance of the LegendsCollection class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Clone">
            <summary>
            Creates a clone of the current collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.LegendsCollection.Change">
            <summary>
            Occurs when the collection's content is changed
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendsCollection.Item(System.Int32)">
            <summary>
            Gets or sets collection item by given index
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendsCollection.Item(System.String)">
            <summary>
            Gets or sets collection item by given name
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Add(GrapeCity.ActiveReports.Chart.Legend)">
            <summary>
            Adds layer object to the current collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.AddRange(GrapeCity.ActiveReports.Chart.Legend[])">
            <summary>
            Adds a set of layers to the current collection
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Contains(GrapeCity.ActiveReports.Chart.Legend)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.Legend"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Legend"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.CopyTo(GrapeCity.ActiveReports.Chart.Legend[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.IndexOf(GrapeCity.ActiveReports.Chart.Legend)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Legend)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Legend"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Remove(GrapeCity.ActiveReports.Chart.Legend)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Legend"/> to remove from the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Clear">
            <summary>
            Removes all legend objects from the collection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendsCollection.ParentControl">
            <summary>
            Gets the SharpGraph control that holds that collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.Equals(System.Object)">
            <summary>
            Compare the LegendsCollection object to another System.Object and check if the two are equal
            </summary>
            <param name="obj">The System.Object to compare with the LegendsCollection object</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendsCollection.GetHashCode">
            <summary>
            It functions as a hash function for a particular type. It is suitable for use in data structures such as hash algorithm and hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.StdLegendMarker">
            <summary>
            Specifies standard legend marker shapes
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.None">
            <summary>
            No shape
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.Bar">
            <summary>
            Filled rectangle
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.StdLegendMarker.Area">
            <summary>
            Filled area
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LegendItem">
            <summary>
            Custom legend item
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.#ctor">
            <summary>
            Initializes new instance of the LegendItem class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItem.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Text">
            <summary>
            Gets or sets text string to display on legend
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Style">
            <summary>
            Gets or sets Marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Line">
            <summary>
            Gets or sets Line style to display on marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Backdrop">
            <summary>
            Backdrop to draw under the legend marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Border">
            <summary>
            Gets or sets border to draw around legend marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItem.Marker">
            <summary>
            Gets or sets series marker info to draw inside legend marker
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LegendItemsCollection">
            <summary>
            Represents the settings for the LegendItemsCollection class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.#ctor(GrapeCity.ActiveReports.Chart.LegendItem[])">
            <summary>
            Initializes new instance of the LegendItemsCollection class
            </summary>
            <param name="itemsArray"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance. This property cannot be overridden.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Item(System.Int32)">
            <summary>
            Get or sets custom legend item by given index
            </summary>
            <param name="index">The index of the item</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Item(System.String)">
            <summary>
            Get or sets custom legend item by given name
            </summary>
            <param name="legendItemName">The name of the item</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Add(GrapeCity.ActiveReports.Chart.LegendItem)">
            <summary>
            Adds new legend item to the current collection
            </summary>
            <param name="item">Legend item to add</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.AddRange(GrapeCity.ActiveReports.Chart.LegendItem[])">
            <summary>
            Adds array of legend items to collection
            </summary>
            <param name="items">legent items</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Contains(GrapeCity.ActiveReports.Chart.LegendItem)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.LegendItem"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.LegendItem"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.CopyTo(GrapeCity.ActiveReports.Chart.LegendItem[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the legend items copied from collection. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.IndexOf(GrapeCity.ActiveReports.Chart.LegendItem)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.LegendItem)">
            <summary>
            Inserts a legend item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted. </param>
            <param name="item">The <see cref="T:GrapeCity.ActiveReports.Chart.LegendItem"/> to insert</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Remove(GrapeCity.ActiveReports.Chart.LegendItem)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The <see cref="T:GrapeCity.ActiveReports.Chart.LegendItem"/> to remove from the collection</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new item into the collection instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="item">The new value of the item at <code>index</code>.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.LegendItemsCollection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LightType">
            <summary>
            Specifies type of the light source
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LightType.Ambient">
            <summary>
            Ambient light source. Is equal to DirectionalLightRatio == 0
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LightType.InfiniteDirectional">
            <summary>
            Infinite directional light source (like the Sun)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LightType.FiniteDirectional">
            <summary>
            Point light source
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Light">
            <summary>
            Represents lighting options and positioning
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Light.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Light.IsDirty">
            <summary>
            This member overrides <code>Item.IsDirty</code>. Always false.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Light.#ctor">
            <summary>
            Initializes new instance of the LightInfo class with a default settings
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Light.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Point3d,GrapeCity.ActiveReports.Chart.LightType,System.Single)">
            <summary>
            Initializes new instance of the LightInfo class
            </summary>
            <param name="source">Light source position</param>
            <param name="type">Light source type</param>
            <param name="directionalRatio">Specifies directional/ambient intencity ratio</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Light.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Light.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Light.Type">
            <summary>
            Gets or sets type of the light source
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Light.Source">
            <summary>
            Gets or sets light source position (direction for infinite source)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Light.DirectionalRatio">
            <summary>
            Gets os sets directional/ambient intencity ratio
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Light.Equals(System.Object)">
            <summary>
            Compare the Light object to another System.Object and check if the two are equal.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Light.GetHashCode">
            <summary>
            It functions as a hash function for a particular type. It is suitable for use in data structures such as hash algorithm and hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.MarkerStyle">
            <summary>
            Specifies marker shapes
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.None">
            <summary>
            No shape
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Point">
            <summary>
            Displays dot shape
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Square">
            <summary>
            Displays rectangle in 2D, cube in 3D
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Circle">
            <summary>
            Displays circle in 2D, sphere in 3D mode
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Triangle">
            <summary>
            Displays triangle in 2D mode, cone in 3D
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.InvTriangle">
            <summary>
            Displays inverted triangle (inverted cone)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Diamond">
            <summary>
            Displays diamond
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Pyramid">
            <summary>
            Displays pyramid shape
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.MarkerStyle.Cross">
            <summary>
            Displays x-like cross shape
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Marker">
            <summary>
            Marker object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor">
            <summary>
            Initializes new instance of the MarkerInfo class with a default settings
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the MarkerInfo class
            </summary>
            <param name="antiAliasMode"></param>
            <param name="antiAliasText"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.Int32,GrapeCity.ActiveReports.Chart.MarkerStyle,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.LabelInfo)">
            <summary>
            Initializes new instance of the MarkerInfo class
            </summary>
            <param name="size">Marker size</param>
            <param name="style">Marker's shape</param>
            <param name="backdrop">backdrop info to fill marker shape</param>
            <param name="line">line info to outline marker shape</param>
            <param name="label">label info to draw on the marker</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.Int32,GrapeCity.ActiveReports.Chart.MarkerStyle,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.LabelInfo,System.Single)">
            <summary>
            Initializes new instance of the MarkerInfo class
            </summary>
            <param name="size">Marker size</param>
            <param name="style">Marker's shape</param>
            <param name="backdrop">backdrop info to fill marker shape</param>
            <param name="line">line info to outline marker shape</param>
            <param name="label">label info to draw on the marker</param>
            <param name="labelDistanceFactor">label distance factor</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.Int32,GrapeCity.ActiveReports.Chart.MarkerStyle,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.LabelInfo,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the MarkerInfo class
            </summary>
            <param name="size">Marker size</param>
            <param name="style">Marker's shape</param>
            <param name="backdrop">backdrop info to fill marker shape</param>
            <param name="line">line info to outline marker shape</param>		
            <param name="label">label info to draw on the marker</param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Marker.Size">
            <summary>
            Gets or sets marker size
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Marker.Style">
            <summary>
            Gets or sets marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Marker.Backdrop">
            <summary>
            Gets or sets background info to fill marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Marker.Line">
            <summary>
            Gets or sets line info to stroke marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Marker.Label">
            <summary>
            Gets or sets label info to draw on marker
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Marker.LabelDistanceFactor">
            <summary>
            Gets or sets label distance factor.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.Equals(System.Object)">
            <summary>
            Compare the Marker object to another System.Object and check if the two are equal.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Marker.GetHashCode">
            <summary>
            It functions as a hash function for a particular type. It is suitable for use in data structures such as hash algorithm and hash table.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.NullableBoolean">
            <summary>
            Boolean type accepted null value.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="value">a boolean value to use as a initial value</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.Compare(GrapeCity.ActiveReports.Chart.NullableBoolean,GrapeCity.ActiveReports.Chart.NullableBoolean)">
            <summary>
            Performs a comparison of two NullableBooleans and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="n1">The first NullableBoolean to compare.</param>
            <param name="n2">The second NullableBoolean to compare.</param>
            <returns>Less than zero if n1 is less than n2; 0 (zero) if n1 and n2 are equal; Greater than zero if n1 is greater than n2.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Implicit(System.Boolean)~GrapeCity.ActiveReports.Chart.NullableBoolean">
            <summary>
            Implicit type conversion operator from <see cref="T:System.Boolean"/> to <see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean"/>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Explicit(GrapeCity.ActiveReports.Chart.NullableBoolean)~System.Boolean">
            <summary>
            Explicit type conversion operator from <see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean"/> to <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Equality(GrapeCity.ActiveReports.Chart.NullableBoolean,GrapeCity.ActiveReports.Chart.NullableBoolean)">
            <summary>
            Oveloading the equality operator.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.op_Inequality(GrapeCity.ActiveReports.Chart.NullableBoolean,GrapeCity.ActiveReports.Chart.NullableBoolean)">
            <summary>
            Overloading the inequality operator.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.Equals(GrapeCity.ActiveReports.Chart.NullableBoolean)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.NullableBoolean.CompareTo(GrapeCity.ActiveReports.Chart.NullableBoolean)">
            <summary>
            Performs a comparison of current instance and  specified instance of <see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean"/> 
            and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="other">The instance of <see cref="T:GrapeCity.ActiveReports.Chart.NullableBoolean"/> to be compared with.</param>
            <returns>Less than zero if current instance is less than other; 0 (zero) if they are equal; Greater than zero if current instance is greater than other.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.NullableBoolean.HasValue">
            <summary>
            Returns the false if there is null value otherwise returns true.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.NullableBoolean.Value">
            <summary>
            Gets the value of <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Padding">
            <summary>
            Padding class
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Padding.Empty">
            <summary>
            Padding Empty Structure
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.#ctor(System.Int32)">
            <summary>
            Padding Constructor
            </summary>
            <param name="all">All</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Padding Constructor
            </summary>
            <param name="left">Left</param>
            <param name="top">Tol</param>
            <param name="right">Right</param>
            <param name="bottom">Bottom</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.All">
            <summary>
            Gets or sets padding
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.Bottom">
            <summary>
            Gets or sets bottom padding
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.Left">
            <summary>
            Gets or sets left padding
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.Right">
            <summary>
            Gets or sets right padding
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.Top">
            <summary>
            Gets or sets top padding
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.Horizontal">
            <summary>
            Gets horizontal padding property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.Vertical">
            <summary>
            Gets versical padding property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Padding.Size">
            <summary>
            Gets size
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.op_Equality(GrapeCity.ActiveReports.Chart.Padding,GrapeCity.ActiveReports.Chart.Padding)">
            <summary>
            Determines whether the two paddings are the same.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.op_Inequality(GrapeCity.ActiveReports.Chart.Padding,GrapeCity.ActiveReports.Chart.Padding)">
            <summary>
            Determines whether the two paddings are not the same.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.Equals(GrapeCity.ActiveReports.Chart.Padding)">
            <summary>
            Determines whether the specified <see cref="T:GrapeCity.ActiveReports.Chart.Padding" /> is equal to this instance.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Padding.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Padding.PaddingConverter">
            <summary>
            Type converter for Padding class
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.PlaneItem">
            <summary>
            Wall object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor">
            <summary>
            Initializes new instance of the Wall object with a default settings
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the Wall object
            </summary>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop)">
            <summary>
            Initializes new instance of the Wall object
            </summary>
            <param name="backdrop">backdrop info to fill the wall rectangle</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the Wall object
            </summary>
            <param name="backdrop">backdrop info to fill the wall rectangle</param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single)">
            <summary>
            Initializes new instance of the Wall object
            </summary>
            <param name="backdrop">backdrop info to fill the wall rectangle</param>
            <param name="width"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the Wall object
            </summary>
            <param name="backdrop">backdrop info to fill the wall rectangle</param>
            <param name="width"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Boolean,System.Single)">
            <summary>
            Initializes new instance of the Wall object
            </summary>
            <param name="backdrop">backdrop info to fill the wall rectangle</param>
            <param name="visible"></param>
            <param name="width"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Boolean,System.Single,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes new instance of the Wall object
            </summary>
            <param name="backdrop">backdrop info to fill the wall rectangle</param>
            <param name="visible"></param>
            <param name="width"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Boolean,System.Single,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Chart.PlaneItem"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.PlaneItem.Width">
            <summary>
            Gets or sets the wall width (thickness)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.PlaneItem.Backdrop">
            <summary>
            Gets or sets backdrop info to fill the wall
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.PlaneItem.Visible">
            <summary>
            Gets or sets the wall visibility
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.PlaneItem.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Projection">
            <summary>
            Geometric projection settings class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.IsDirty">
            <summary>
            This member overrides <code>Item.IsDirty</code>. Always false.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor">
            <summary>
            Initializes new instance of the Projection class with the default settings.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(GrapeCity.ActiveReports.Chart.Graphics.ProjectionType,System.Single,System.Single)">
            <summary>
            Initializes new instance of the Projection class.
            </summary>
            <param name="projectionType">Specifies projection type</param>
            <param name="projectionDX">For use for orthogonal projection only</param>
            <param name="projectionDY">For use for orthogonal projection only</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(GrapeCity.ActiveReports.Chart.Graphics.ProjectionType,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of the Projection class.
            </summary>
            <param name="projectionType">Specifies projection type</param>
            <param name="projectionDX">For use for orthogonal projection only</param>
            <param name="projectionDY">For use for orthogonal projection only</param>
            <param name="horizontalRotation"></param>
            <param name="verticalRotation"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(GrapeCity.ActiveReports.Chart.Graphics.ProjectionType,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of the Projection class.
            </summary>
            <param name="projectionType">Specifies projection type</param>
            <param name="projectionDX">For use for orthogonal projection only</param>
            <param name="projectionDY">For use for orthogonal projection only</param>
            <param name="horizontalRotation"></param>
            <param name="verticalRotation"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.ProjectionType">
            <summary>
            Gets or sets projection type
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.ProjectionDX">
            <summary>
            Gets or sets world origin offset by x axis. For use for orthogonal projection only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.ProjectionDY">
            <summary>
            Gets or sets world origin offset by y axis. For use for orthogonal projection only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.HorizontalRotation">
            <summary>
            Determines horizontal rotation of chart box (in degrees)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.VerticalRotation">
            <summary>
            Determines horizontal rotation of chart box (in degrees)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.PerspectiveRatioPct">
            <summary>
            Determines perspective ratio (0-100%).
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.MinVerticalRotation">
            <summary>
            Minimum allowed value for VerticalRotation for current Projection.DY
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.MaxVerticalRotation">
            <summary>
            Maximum allowed value for VerticalRotation for current Projection.DY
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.MinHorizontalRotation">
            <summary>
            Minimum allowed value for HorizontalRotation for current Projection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Projection.MaxHorizontalRotation">
            <summary>
            Maximum allowed value for HorizontalRotation for current Projection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Projection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.ChartType">
            <summary>
            Specifies chart types
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Area">
            <summary>
            Area chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Area3D">
            <summary>
            Area chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bar2D">
            <summary>
            2D bar (vertical) chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bar3D">
            <summary>
            3D bar (vertical) chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bezier">
            <summary>
            Bezier line chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.BezierXY">
            <summary>
            Bezier XY line chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.BezierXY3D">
            <summary>
            3D Bezier XY line chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bezier3D">
            <summary>
            Bezier 3D line chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Bubble">
            <summary>
            Bubble (requires two data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.BubbleXY">
            <summary>
            XY bubble (requires 3 series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Candle">
            <summary>
            Candlestick chart (requires 4 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.ClusteredBar">
            <summary>
            Clustered Bar
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Doughnut">
            <summary>
            Pie/doughnut chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Doughnut3D">
            <summary>
            3D Pie/doughnut chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Funnel">
            <summary>
            Funnel chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Funnel3D">
            <summary>
            Funnel 3D chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Gantt">
            <summary>
            Gantt chart (requires 2 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Gantt3D">
            <summary>
            3D Gantt chart (requires 2 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HiLo">
            <summary>
            HiLo chart (requires 2 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HiLoOpenClose">
            <summary>
            HLOC chart (requires 4 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HorizontalBar">
            <summary>
            Horizontal Bar chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.HorizontalBar3D">
            <summary>
            3D Horizontal Bar chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Kagi">
            <summary>
            Kagi chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Kagi3D">
            <summary>
            3D Kagi chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Line">
            <summary>
            Line chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Line3D">
            <summary>
            3D line chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.LineXY">
            <summary>
            XY Line chart (requires 2 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.LineXY3D">
            <summary>
            3D XY Line chart (requires 2 sorted data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.PlotXY">
            <summary>
            XY plot chart (requires 2 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.PointAndFigure">
            <summary>
            Point and Figure chart (requires 2 data series)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Pyramid">
            <summary>
            Pyramid chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Pyramid3D">
            <summary>
            Pyramid 3D chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Renko">
            <summary>
            Renko chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Renko3D">
            <summary>
            3D Renko chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.Scatter">
            <summary>
            Scatter chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea">
            <summary>
            Stacked area chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea3D">
            <summary>
            3D Stacked area chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar">
            <summary>
            Stacked bar chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar3D">
            <summary>
            Stacked 3d bar chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea100Pct">
            <summary>
            Stacked area chart scaled to 100 percents
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedArea3D100Pct">
            <summary>
            3D Stacked area chart scaled to 100 percents
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar100Pct">
            <summary>
            Stacked bar chart scaled to 100 percents
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.StackedBar3D100Pct">
            <summary>
            Stacked 3d bar chart scaled to 100 percents
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.ThreeLineBreak">
            <summary>
            Three Line Break chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.ChartType.ThreeLineBreak3D">
            <summary>
            3D Three Line Break chart
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.LegendMode">
            <summary>
            Specifies the mode to build legend items.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LegendMode.Auto">
            <summary>
            Auto mode
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LegendMode.Series">
            <summary>
            Legend items are determined by series.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.LegendMode.Points">
            <summary>
            Legend items are determined by data points.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Series">
            <summary>
            Represents the settings for the Series object.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.Series.ValueChangedEvent">
            <summary>
            Event for ValueMembersX and ValueMembersY changes
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Xml">
            <summary>
            Design-time support, for internal use only.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Series.chartAreaSetExplicitly">
            <summary>
            this variable is used to determine if user initialized value of ChartArea
            or we should set it to default value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Series.legendSetExplicitly">
            <summary>
            this variable is used to determine if user initialized value of Legend
            or we should set it to default value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Series._bindDataGeneration">
            <summary>
            current generation of data determined by ValueMemberX and ValueMembersY
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Series._pointsGeneration">
            <summary>
            current generation of data represented by Points collection
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Series._cachedDataGeneration">
            <summary>
            Data generation of internal data cache
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.initPointsCollection(GrapeCity.ActiveReports.Chart.DataPointsCollection,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPoints"></param>
            <param name="forcePointsChanged">if set to true it will increase points generation and start all series recalculation</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.IsFinancialChart(GrapeCity.ActiveReports.Chart.ChartType)">
            <summary>
            Gets true if specific type is financial chart type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.XSeriesDataProvider.DataGeneration">
            <summary>
            Gets generation number. Used to verify whether we need to flush cached data if any.
            In case of data is modified provider should return different value.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.XSeriesDataProvider.Count">
            <summary>
            Gets item count
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.XSeriesDataProvider.Item(System.Int32)">
            <summary>
            Gets series data at the index specified
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.YSeriesDataProvider.DataGeneration">
            <summary>
            Gets generation number. Used to verify whether we need to flush cached data if any.
            In case of data is modified provider should return different value.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.YSeriesDataProvider.Count">
            <summary>
            Gets item count
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.YSeriesDataProvider.Item(System.Int32)">
            <summary>
            Gets series data at the index specified
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.NeedMouseHandling">
            <summary>
            Needs the mouse handling.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.OnMouseMove(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseMove" /> event.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.OnMouseHover(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseHover" /> event.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.OnMouseLeave(GrapeCity.ActiveReports.Chart.GraphMouseEventArgs)">
            <summary>
            Handles the <see cref="E:MouseLeave" /> event.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.ChartConfig">
            <summary>
            gets config data for current chart type
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.#ctor">
            <summary>
            Creates default series
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.ValueMemberX">
            <summary>
            Gets or sets the binding formula for the X values in the series.  
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.ValueMembersY">
            <summary>
            Gets or sets the binding formula for the Y values in the series.  
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Type">
            <summary>
            Specifies the series's chart type
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.AxisX">
            <summary>
            Specified X axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.AxisY">
            <summary>
            On which axis layer will be based vertically
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.ZOrder">
            <summary>
            z position of layer's plane on chart space
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Visible">
            <summary>
            Get or sets layer's visibility.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.ChartArea">
            <summary>
            Gets or sets the chart area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Legend">
            <summary>
            Gets or sets the legend.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Points">
            <summary>
            Gets the points.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.ShouldSerializePoints">
            <summary>
            This method is called by serializer using reflection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Annotations">
            <summary>
            Series' annotations
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.ColorPalette">
            <summary>
            Gets or sets the color palette.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.LegendItemsMode">
            <summary>
            Gets or sets the legend items mode.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.DisplayInLegend">
            <summary>
            Gets or sets a value indicating whether the item should be displayed in legend.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.LegendText">
            <summary>
            Gets or sets the legend text.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Backdrop">
            <summary>
            Gets or sets the backdrop.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.BorderLine">
            <summary>
            Gets or sets the border line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Line">
            <summary>
            Gets or sets the line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Marker">
            <summary>
            Gets or sets the marker.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.CheckPropertiesValidityImpl(GrapeCity.ActiveReports.Chart.ISharpGraph)">
            <summary>
            This member overrides <code>Item.CheckPropertiesValidityImpl</code>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.pn(GrapeCity.ActiveReports.Chart.CustomPropertyType)">
            <summary>
            returns custom property name by its id
            </summary>
            <param name="pt">property type</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.ApplyCustomPropertiesConfiguration(GrapeCity.ActiveReports.Chart.ChartType,GrapeCity.ActiveReports.Chart.ColorPalette,GrapeCity.ActiveReports.Chart.CustomProperties,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="palette"></param>
            <param name="customProperties"></param>
            <param name="isDataPoint">designates properties level, if true - it is DataPoint, false means Series</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.createCoreLayer(GrapeCity.ActiveReports.Chart.ISharpGraph,System.Int32,GrapeCity.ActiveReports.Chart.Graphics.Line)">
            <summary>
            creates core layer for current series
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.AdjustSeriesSet(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,GrapeCity.ActiveReports.Chart.ChartTypeConfig)">
            <summary>
             Adjusts data providers for financial charts: creates data adapters and updates SeriesSet
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.LabelsBindingProcessor.processLabelFormat(System.String,System.Object,GrapeCity.ActiveReports.Chart.SeriesCollection)">
            <summary>
            Returns label format changed in special way (see further processing in Core.Objects.ChartLayer.GetLabelText
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.LabelsBindingProcessor.CheckLabelFormat(System.String,System.Object)">
            <summary>
            This method returns nothing if everything is ok with format, otherwise it will throw ArgumentException
            </summary>
            <param name="formatString"></param>
            <param name="dataSource"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.LabelsBindingProcessor.LabelsDataProvider.DataGeneration">
            <summary>
            Gets generation number. Used to verify whether we need to flush cached data if any.
            In case of data is modified provider should return different value.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.LabelsBindingProcessor.LabelsDataProvider.Count">
            <summary>
            Gets item count
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Series.LabelsBindingProcessor.LabelsDataProvider.Item(System.Int32)">
            <summary>
            Gets series data at the index specified
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.isPropertyDefined(GrapeCity.ActiveReports.Chart.CustomProperties,GrapeCity.ActiveReports.Chart.CustomPropertyType)">
            <summary>
            return true if property specified is defined
            </summary>
            <param name="styleProps">Properties collection</param>
            <param name="property">Property name</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.createSeriesStyle(GrapeCity.ActiveReports.Chart.ChartType,GrapeCity.ActiveReports.Chart.CustomProperties,System.Int32,GrapeCity.ActiveReports.Chart.CustomProperties@)">
            <summary>
            creates series style for given chart type and its custom properties
            </summary>
            <param name="type"></param>
            <param name="styleProps"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.createSeriesStyle(GrapeCity.ActiveReports.Chart.ChartType,GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBase,GrapeCity.ActiveReports.Chart.CustomProperties,System.Int32,GrapeCity.ActiveReports.Chart.CustomProperties@)">
            <summary>
            creates series style for based on style specified (overrides defined properties)
            </summary>
            <param name="type"></param>
            <param name="styleBase">style to inherit defined properties from</param>
            <param name="originalProps">custom properties to override base style</param>
            <param name="colorIndex"></param>
            <param name="styleProps"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.RaiseOnValueChangedEvent(System.String,System.String,System.String)">
            <summary>
            Raise when valueMembersX or ValueMembersY changes
            </summary>
            <param name="propName">Property Name</param>
            <param name="oldValue">Old Value</param>
            <param name="newValue">New Value </param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Series.IsOneFigureChart(GrapeCity.ActiveReports.Chart.ChartType)">
            <summary>
            Returns true if given chart type suggested to render only a figure.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.SeriesCollection">
            <summary>
            Series collection class
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.SeriesCollection.SeriesCollectionChangedHandler">
            <summary>
            For handling ValueMemberx and ValueMemberY changes
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.#ctor">
            <summary>
            Initializes a new instance of the SeriesCollection class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Clone">
            <summary>
            Creates a clone of the current collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.SeriesCollection.Change">
            <summary>
            Occurs when the collection's content is changed
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SeriesCollection.Item(System.Int32)">
            <summary>
            Gets or sets collection item by given index
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SeriesCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GrapeCity.ActiveReports.Chart.Series"/> with the specified series name.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Add(GrapeCity.ActiveReports.Chart.Series)">
            <summary>
            Adds layer object to the current collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.AddRange(GrapeCity.ActiveReports.Chart.Series[])">
            <summary>
            Adds a set of layers to the current collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Contains(GrapeCity.ActiveReports.Chart.Series)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.Series"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Series"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.CopyTo(GrapeCity.ActiveReports.Chart.Series[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.IndexOf(GrapeCity.ActiveReports.Chart.Series)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Series)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Series"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Remove(GrapeCity.ActiveReports.Chart.Series)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Series"/> to remove from the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.OnSeriesXChange(System.Object,GrapeCity.ActiveReports.Chart.XYVAlueChangedEventArgs)">
            <summary>
            Raised when ValueMeberx and ValueMembersY changes
            </summary>
            <param name="sender">Series</param>
            <param name="e"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SeriesCollection.ParentControl">
            <summary>
            Gets the SharpGraph control that holds that collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SeriesCollection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Tick">
            <summary>
            Tick attributes. Ticks are drawn on axes.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Tick.MIN_TICKLEN_VALUE">
            <summary>
            TickLength property's minimal and maximal values.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor">
            <summary>
            Initializes new instance of the TickInfo object.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(System.Double)">
            <summary>
            Initializes new instance of the TickInfo object.
            </summary>
            <param name="step">Tick step</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Double,System.Single)">
            <summary>
            Initializes new instance of the TickInfo object.
            </summary>
            <param name="line">Line info to draw tick line</param>
            <param name="step">Tick step</param>
            <param name="length">Tick length</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Line,System.Double,System.Single,System.Boolean)">
            <summary>
            Initializes new instance of the TickInfo object.
            </summary>
            <param name="line">Line info to draw tick line</param>
            <param name="gridLine">Line info to draw grid line</param>
            <param name="step">Tick step</param>
            <param name="length">Tick length</param>
            <param name="visible">Specifies tick and grid lines visibility</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Tick.Line">
            <summary>
            Line used to draw tick
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Tick.GridLine">
            <summary>
            Line used to draw grid on walls
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Tick.Step">
            <summary>
            Step in units of measure of the axis between two subsequent ticks
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Tick.Length">
            <summary>
            length of line to draw tick
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Tick.Visible">
            <summary>
            Controls if tick will be drawn
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tick.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Title">
            <summary>
            Properties for text objects
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Title.dockAreaSetExplicitly">
            <summary>
            this variable is used to determine if user initialized value of DockArea
            or we should set it to default value
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Title.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Title.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Xml">
            <summary>
            Design-time support, for internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Title.#ctor">
            <summary>
            Initializes new instance of the Title object.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Title.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Title.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Text">
            <summary>
            Text string to display
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Backdrop">
            <summary>
            Backdrop to draw under the text
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Visible">
            <summary>
            If false, nothing will be drawn
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Docking">
            <summary>
            Gets or sets the docking type.
            </summary>
            <value>The docking.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.DockArea">
            <summary>
            Gets or sets the dock area.
            </summary>
            <value>The dock area.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Border">
            <summary>
            Border to draw around text
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Font">
            <summary>
            Font to draw text
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Alignment">
            <summary>
            position of text
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.Name">
            <summary>
            Gets or sets the title name.
            </summary>
            <value>The name.</value>
            <exception cref="T:System.ArgumentException">Name</exception>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Title.CustomBorderDrawer">
            <summary>
            Gets or sets custom border draw implementation class
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.TitlesCollection">
            <summary>
            Titles collection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.#ctor">
            <summary>
            Initializes a new instance of the TitlesCollection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Clone">
            <summary>
            Creates a clone of the current collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.TitlesCollection.Change">
            <summary>
            Occurs when the collection's content is changed
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.TitlesCollection.Item(System.Int32)">
            <summary>
            Gets or sets collection item by given index
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.TitlesCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GrapeCity.ActiveReports.Chart.Title"/> with the specified title name.
            </summary>
            <param name="titleName">Name of the title.</param>
            <returns>Title.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Add(GrapeCity.ActiveReports.Chart.Title)">
            <summary>
            Adds layer object to the current collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.AddRange(GrapeCity.ActiveReports.Chart.Title[])">
            <summary>
            Adds a set of layers to the current collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Contains(GrapeCity.ActiveReports.Chart.Title)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.Title"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Title"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.CopyTo(GrapeCity.ActiveReports.Chart.Title[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.IndexOf(GrapeCity.ActiveReports.Chart.Title)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.Title)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Title"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TitlesCollection.Remove(GrapeCity.ActiveReports.Chart.Title)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Title"/> to remove from the collection.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.TitlesCollection.ParentControl">
            <summary>
            Gets the SharpGraph control that holds that collection
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.WallRange">
            <summary>
            Wall range object class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRange.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRange.NeedMouseHandling">
            <summary>
            Implements <code>IMouseEnabled.NeedMouseHandling</code>
            </summary>
            <returns>always true</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRange.#ctor">
            <summary>
            Initializes new instance of the WallRange class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRange.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRange.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.AdjacentAxes">
            <summary>
            Gets adjacent axes collection. Wall range is displayed on the visible walls based on primary and adjacent axes.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.PrimaryAxis">
            <summary>
            Gets or sets primary axis. Wall range is displayed on the visible walls based on primary and adjacent axes.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.DrawOnTopOfGridLines">
            <summary>
            Gets or sets DrawOnTopOfGridLines property. DrawOnTopOfGridLines specifies whether to draw current range after grid lines are drawn.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.StartValue">
            <summary>
            Gets or sets range's start value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.EndValue">
            <summary>
            Gets or sets range's end value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.Backdrop">
            <summary>
            Gets or sets backdrop into to fill range with
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.Visible">
            <summary>
            Gets or sets range visibility
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRange.Border">
            <summary>
            Gets or sets border info to outline wall range
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.WallRangesCollection">
            <summary>
            Collection of wall ranges
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Clone">
            <summary>
            Creates a clone of the current object
            </summary>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance. This property cannot be overridden.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>WallRange.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.WallRangesCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GrapeCity.ActiveReports.Chart.WallRange"/> with the specified wall range name.
            </summary>
            <param name="wallRangeName">Name of the wall range.</param>
            <returns>WallRange.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Add(GrapeCity.ActiveReports.Chart.WallRange)">
            <summary>
            Adds wall range object to the current collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.AddRange(GrapeCity.ActiveReports.Chart.WallRange[])">
            <summary>
            Adds a set of wall ranges to the current collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Contains(GrapeCity.ActiveReports.Chart.WallRange)">
            <summary>
            Determines whether the Collection contains the given <see cref="T:GrapeCity.ActiveReports.Chart.WallRange"/>
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.WallRange"/> to find within the collection</param>
            <returns><code>true</code> if the collection contains the <code>value</code>parameter given; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.CopyTo(GrapeCity.ActiveReports.Chart.WallRange[],System.Int32)">
            <summary>
            TBW
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.IndexOf(GrapeCity.ActiveReports.Chart.WallRange)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Insert(System.Int32,GrapeCity.ActiveReports.Chart.WallRange)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <code>value</code> should be inserted.</param>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.WallRange"/> to insert.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.WallRangesCollection.Remove(GrapeCity.ActiveReports.Chart.WallRange)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.WallRange"/> to remove from the collection.</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.GraphMouseEventHandler">
            <summary>
            Specifies mouse events
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs">
            <summary>
            Mouse event arguments
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.Graph">
            <summary>
            Gets the graph
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.PointIndex">
            <summary>
            Gets the point index if the mouse event occured on the data series
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.IsLeftMouseButton">
            <summary>
            Gets mouse event button state
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.UserPoint">
            <summary>
            Gets user point on which mouse event occured on
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.SourcePoint">
            <summary>
            Gets source point on which mouse event occured on
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphMouseEventArgs.ShapeArea">
            <summary>
            Gets Shape Area on which mouse event occured on
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.SharpGraphCore.IChartDesigner">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.IChartDesigner.RaiseChanging">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.IChartDesigner.RaiseChanged">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.SetCultureProvider(System.Func{System.Globalization.CultureInfo})">
            <summary>
            Sets the culture provider.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.#ctor">
            <summary>
            Initializes new instance of the SharpGraph control
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.DataSourceDirect">
            <summary>
            Gets or sets the data source direct.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.RefreshData">
            <summary>
            Clears internal caches, so that chart will load all that data when it will be drawn next time
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DrawContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            DrawContent is provided primary for usage with ARNet2. However, by providing this function, it also
            allows some other usages to non-display canvases. OnPaint now calls this.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DrawContent(GrapeCity.ActiveReports.Chart.Graphics.Canvas,System.Drawing.Rectangle)">
            <summary>
            DrawContent is provided primary for usage with ARNet2. However, by providing this function, it also
            allows some other usages to non-display canvases. OnPaint now calls this.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DrawContentInternal(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.Rectangle,GrapeCity.ActiveReports.Chart.Core.DrawParts)">
            <summary>
            SharpGraph device oriented DrawContent
            </summary>
            <param name="g"></param>
            <param name="rectangle"></param>
            <param name="drawnItems"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.SgDrawContent(System.Drawing.Graphics,System.Drawing.Rectangle,GrapeCity.ActiveReports.Chart.Core.DrawParts)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.SgDrawContent(GrapeCity.ActiveReports.Chart.Graphics.Canvas,System.Drawing.Rectangle,GrapeCity.ActiveReports.Chart.Core.DrawParts)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.SgDrawContentWithBuffer(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.IsOneFigureChart(GrapeCity.ActiveReports.Chart.ChartType)">
            <summary>
            Returns true if given chart type suggested to render only a figure.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.transferChartAreas(GrapeCity.ActiveReports.Chart.Core.Objects.Region)">
            <summary>
            transfers chart areas
            </summary>
            <param name="chartAreasHolder"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.isAnyFloatingLegendDocked(GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            Returns true if any floating legend is docked to area specified
            </summary>
            <param name="areaDocked"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.transferFloatingLegends(GrapeCity.ActiveReports.Chart.ChartArea,GrapeCity.ActiveReports.Chart.Core.Objects.Region)">
            <summary>
            transfers floating legends for chart area specified
            </summary>
            <param name="areaDocked">Chart area to handle</param>
            <param name="container">Region object to add core legend object to</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.transferDockedObjects(System.Collections.ICollection,GrapeCity.ActiveReports.Chart.ChartArea,GrapeCity.ActiveReports.Chart.Core.Objects.Region,GrapeCity.ActiveReports.Chart.Core.Objects.Region@)">
            <summary>
            transfers all the titles docked to object specified. Skips all floating objects (legends)
            </summary>
            <param name="objects">collection to transfer</param>
            <param name="areaDocked">area to transfer objects docked to</param>
            <param name="region">region to put docked objects to to</param>
            <param name="innerRegion">the inner region to put other objects laying inside</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.SharpGraphCore.LayerTicket">
            <summary>
            This class is used as key to lookup layers from hashtable
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.transferSeries(GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            transfers data series
            </summary>
            <param name="areaBound">if specified transfers only series bound to area specified.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.orderedAddComponents(GrapeCity.ActiveReports.Chart.Core.Objects.LayoutMgr,System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            reorders components and adds them to given Layout manager object
            </summary>
            <param name="objectList">list of components to add</param>
            <param name="layout">layout to reorder components of</param>
            <param name="orderMap">map of components to their position. Valid position values are integers {0,1,2}</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DisplayHorizontally(GrapeCity.ActiveReports.Chart.ChartArea)">
            <summary>
            Returns true if horizontal chart should be drawn for area specified
            </summary>
            <param name="chartArea"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.AreAllSeriesHaveTheSameType(GrapeCity.ActiveReports.Chart.ChartArea,GrapeCity.ActiveReports.Chart.ChartType@)">
            <summary>
            Returns true if all the visible series bounds to area specified have the same type
            </summary>
            <param name="areaBound"></param>
            <param name="chartType">Assigned to series type if return value is true. Otherwise value is undefined</param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Backdrop">
            <summary>
            Main chart's backdrop, spans all chart control area
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Border">
            <summary>
            Main chart's border, spans all chart control area
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Titles">
            <summary>
            Gets control's Titles collection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Series">
            <summary>
            Where chart gets it's data to display
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.DataSource">
            <summary>
            Global graph's data source
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.SaveCredentials(System.String,System.String)">
            <summary>
            For internal use only!
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.ChartAreas">
            <summary>
            Chart Areas
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.GridLayout">
            <summary>
            Chart Areas Columns
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Legends">
            <summary>
            Gets control's Legend object
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.AutoRefresh">
            <summary>
            If true chart will be automatically refreshed(redrawn) on each property change
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.UIOptions">
            <summary>
            Enables specific UI features
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.DeviceMode">
            <summary>
            Gets or sets graphics device specific options
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.ChartCustomBorderDrawer">
            <summary>
            Gets or sets custom border drawer object for entire control
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.AreaCustomBorderDrawer">
            <summary>
            Gets or sets custom border drawer object for chart areas
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.ColorPalette">
            <summary>
            Global color palette. May be overrided on series level
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.IsDesignMode">
            <summary>
            Gets or sets a value indicating whether this instance is design mode.
            </summary>
            <value><c>true</c> if this instance is design mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.WriteXml(System.Xml.XmlElement)">
            <summary>
            Writes the XML.
            </summary>
            <param name="controlNode">The control node.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.ReadXml(System.Xml.XmlElement)">
            <summary>
            Reads the XML.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.QuickSave(System.IO.BinaryWriter)">
            <summary>
            Serialize this object to binary writer in XML format.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.QuickLoad(System.IO.BinaryReader)">
            <summary>
            Deserialize the data from XMl format.
            </summary>
            <param name="binReader">The bin reader.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.ClearInvalidBindings">
            <summary>
            Clears the invalid bindings.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.HideWizard">
            <summary>
            This property exists for tests only.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.SharpGraphCore.DataSourceConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DataSourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>		
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DataSourceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DataSourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.DataSourceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns info about graph item that is placed in specified coordinates.
            Please consider using UIOptions.ForceHitTesting before calling HitTest function.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>reference to HitTestInfo or null if item is not found</returns>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.SharpGraphCore.SetDirtyFired">
            <summary>
            Occurs when SetDirty called.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.BeginInit">
            <summary>
             Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.FixReferences">
            <summary>
            Fixes the references between chart object.
            This method is used when chart is partially deserialized.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.GetDefaultChartArea">
            <summary>
            Gets "default" chart area. Newly added series and legends are bound to "default" chart area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.GetDefaultLegend">
            <summary>
            Gets "default" legend. Newly added series are bound to "default" legend.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.ValidateReferences">
            <summary>
            Verifies references between object, raises asserts in case of inconsistencies
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.SharpGraphCore.Credentials">
            <summary>
            Representation of data source credentials.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Credentials.UserName">
            <summary>
            Gets the user name used to connect to data source.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Credentials.Password">
            <summary>
            Gets the password used to connect to data source.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphCore.Credentials.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of <see cref="T:GrapeCity.ActiveReports.Chart.SharpGraphCore.Credentials"/> class.
            </summary>
            <param name="name">The user name used to connect to data source.</param>
            <param name="password">The password used to connect to data source.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.SharpGraphCore.Credentials.AreEmpty">
            <summary>
            Gets whether both user name and password are empty or null.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.HitTest">
            <summary>
            Represents the properties of the HitTest object
            For a list of all members of this type, see the HitTest member
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.HitTest.Item">
            <summary>
            Graph item that was under specified coordinates
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.HitTest.ItemCount">
            <summary>
            Ordinal number of item, applicable only for series views, and denotes column(sector etc) number
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.SharpGraphPropertyHolder">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.SharpGraphPropertyHolder.IsDesignMode">
            <summary>
            Is used only in design-time
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.SharpGraphPropertyHolder.notifyOnAnyPropertyChange(System.Object)">
            <summary>
            is called when property value changes.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Util.NameAuto">
            <summary>
            the name displayed for the property of double/float with "automatic calculate" values support
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.GraphReferenceConverter">
            <summary>
            Provides a unified way to process converting.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>true if the TypeConverter.StandardValuesCollection returned from GetStandardValues is an exhaustive list of possible values; false if other values are possible.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>true if GetStandardValues should be called to find a common set of values the object supports; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.findAvailableComponents(GrapeCity.ActiveReports.Chart.IGraphItem)">
            <summary>
            Finds available components.
            </summary>
            <param name="startSearchItem">The item the searching starts from.</param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.GraphReferenceConverter.ObjectType">
            <summary>
            Get the object type to get the empty ctor for
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DoubleConverter">
            <summary>
            this class is created to fix error of visualization in vs.net property grid values like 0.2 of double
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto">
            <summary>
            Converter for double with "automatic calculate" values support.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>true if GetStandardValues should be called to find a common set of values the object supports; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>true if the TypeConverter.StandardValuesCollection returned from GetStandardValues is an exhaustive list of possible values; false if other values are possible.</returns>			
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.DoubleConverterWithAuto.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto">
            <summary>
            Converter for float with "automatic calculate" values support.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>true if GetStandardValues should be called to find a common set of values the object supports; otherwise, false.</returns>	
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>true if the TypeConverter.StandardValuesCollection returned from GetStandardValues is an exhaustive list of possible values; false if other values are possible.</returns>			
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/>that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.FloatConverterWithAuto.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.TxExpandableObjectConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TxExpandableObjectConverter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GrapeCity.ActiveReports.Chart.TxExpandableObjectConverter"/> Class. 
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.TxExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value"></param>
            <param name="attributes">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <returns>An array of type System.Attribute that will be used as a filter.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Constants">
            <summary>
            Miscelaneous internal constants related to Core functioning and visual style
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.AXIS_ARROW_LEN_FACTOR">
            <summary>
            axis arrow's length to weight ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.AXIS_ARROW_MIN_WEIGHT">
            <summary>
            if line weight is less than that value we will use this value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.AXIS_ARROW_WEIGHT_RATIO">
            <summary>
            arrow weight to line weight ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.AXIS_ARROW_TAIL_WIDTH_RATIO">
            <summary>
            Arrow tail to arrow weight ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.DEFAULT_AXIS_SCROLL_SIZE">
            <summary>
            Default axis scrollbar width in pixels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_VERT_GAP_FACTOR">
            <summary>
            Cell height to text height ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_MARKER_HEIGHT_FACTOR">
            <summary>
            Legend marker height to cell height ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_MARKER_WIDTH_FACTOR">
            <summary>
            Marker width to text height ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_GAPS">
            <summary>
            Gap (in pixels) between legend border, legend markers, labels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_MARKER_COUNT">
            <summary>
            number of series markers to draw in legend marker
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_MARKER_SIZE_FACTOR">
            <summary>
            series marker size to cellHeight ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_CANDLE_MARKER_HEIGHT_FACTOR">
            <summary>
            Candle charts: legend marker height to cell height ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_BUBBLE_MARKER_SIZE_FACTOR">
            <summary>
            Bubble charts: legend marker size to cell height ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.LEGEND_SIDE_ELASTICITY">
            <summary>
            legend sides (gaps) elasticity. Legend itself has elasticity equal 1f.
            This constants specifies how much space should be left blank.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.CHART_BARS_BORDER_SENSITIVITY">
            <summary>
            Bar border will be drawn if width and height are greater than this value.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.CHART_DEF_3LINEBREAK_POINT_WIDTH">
            <summary>
            Default point width for ThreeLineBreak chart
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.MIN_BUBBLE_SIZE">
            <summary>
            minimal bubble size in screen coordinate system
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.DOUGNNUT_OUTSIDE_LABEL_OFFSET">
            <summary>
            radial line length to pie's radius ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.DOUGHNUT_OUTSIDE_LABEL_TICKLEN">
            <summary>
            horizontal line length ratio
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Constants.DOUGHNUT_MARGIN_RATIO">
            <summary>
            margin around pie in pixels
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.BorderSizes">
            <summary>
            Describes sizes of border around rectangular area.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.BorderSizes.Left">
            <summary>
            Distance between inner and outer edges on the left side of a border
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.BorderSizes.Right">
            <summary>
            Distance between inner and outer edges on the right side of a border
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.BorderSizes.Top">
            <summary>
            Distance between inner and outer edges on the top side of a border
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.BorderSizes.Bottom">
            <summary>
            Distance between inner and outer edges on the bottom side of a border
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.Core.CustomizableDrawer.PreDraw">
            <summary>
            PreDraw event is fired before any drawings on this object by chart core.
            </summary>
        </member>
        <member name="E:GrapeCity.ActiveReports.Chart.Core.CustomizableDrawer.PostDraw">
            <summary>
            PostDraw event is fired after all drawings on this object by chart core is finished.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Area">
            <summary>
            Area renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Area3D">
            <summary>
            Area3D diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Bar2D">
            <summary>
            2D Bar diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Bar3D">
            <summary>
            Chart renderer for Bar, Pyramid, Cone, Cylinder etc
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Bar3D.GetBarTopRatio(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D)">
            <summary>
            Calculates BarTopRatio depending on BarType and BarTopPer properties
            </summary>
            <param name="seriesStyle"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.BarBase">
            <summary>
            Base class for Bar chart types (including BarXY)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.BarBase._barGapPercent">
            <summary>
            Gap width to bar width ratio in percents
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.BarBase._seriesCount">
            <summary>
            number of visible series in layer
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.BarBase._barWidth">
            <summary>
            bar width (bounding rectangle width)
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.BarBase.PrecalcData(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            calculates ans stores bar width to barWidth;
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.BarBase.ReleasePrecalcData">
            <summary>
            called from Draw method to release any precalculated data
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.ShapeData">
            <summary>
            Shape-drawing related data for collecting the shapes before rendering
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.ShapeData.Comparer.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,System.Boolean)">
            <summary>
            Creates te new instance of comparer by distance.
            </summary>
            <param name="observerPosition"></param>
            <param name="swapXY"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Bezier3D">
            <summary>
            Bezier3D chart renderer class
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Bezier3DArea">
            <summary>
            Line3D and Area3D diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.BezierLine">
            <summary>
            Line diagram renderer
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.BezierLine.CalcMinMaxValueImpl(GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider,System.Double@,System.Double@)">
            <summary>
            Calculates min/max range for bezier line
            </summary>
            <param name="dataProvider"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.BubbleXY">
            <summary>
            BubbleXY diagram renderer
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.BubbleXY.GetPointSize(System.Double)">
            <summary>
            calculates bubble size for value given
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Bubble">
            <summary>
            Bubble diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Candle">
            <summary>
            Candle diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.CategoryBasedRenderer">
            <summary>
            Summary description for CategoryBasedRenderer.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Doughnut">
            <summary>
            Pie-Doughnut charts renderer
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Doughnut.CalcLabelExtent(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,System.Drawing.SizeF@,System.Drawing.SizeF@)">
            <summary>
            calculates max labels extent for all
            </summary>
            <param name="device"></param>
            <param name="seriesView"></param>
            <param name="staticSize">fixed extent</param>
            <param name="sizeRatio">radius dependent extent as ratio</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Doughnut.GetPointExplodeFactor(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,System.Int32)">
            <summary>
            Returns point's explode factor
            </summary>
            <param name="seriesView">Series view</param>
            <param name="pointIndex">Data point's index</param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Doughnut3D">
            <summary>
            Summary description for Doughnut3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Doughnut3D.Depth">
            <summary>
            Gets or sets doughnut depth ratio (relative to whole doughnut diameter).
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout">
            <summary>
            Implement doughnut markers layout and drawing logic.
            See LayoutLabels method for algorithm details. Layout itself is proceeded on 2D surface which is essential for SectionReport.Chart's text primitives implementation
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Initializes a new instance of the DoughnutMarkersLayout
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.CreateMarkerData(System.Drawing.PointF,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Calculates anchor points and allocates new marker
            </summary>
            <param name="center"></param>
            <param name="explodeFactor"></param>
            <param name="radius"></param>
            <param name="midAngle"></param>
            <param name="pointIndex"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.Draw(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager)">
            <summary>
            Renders labels on a specific canvas
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker">
            <summary>
            Doughnut/pie marker
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.CreateShapes(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Creates visuals for marker (callouts, labels and frame)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.IsPlaced">
            <summary>
            Gets true if label got his space within the canvas
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.MoveOption.None">
            <summary>
            Default MoveLabel behavior, moves the label and all callout points except anchor point
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.MoveOption.KeepCalloutMidPointX">
            <summary>
            The same as None but callout middle point is anchored too
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.MoveLabel(System.Drawing.SizeF)">
            <summary>
            Moves the label while keeping anchor point fixed
            </summary>
            <param name="shift"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.MoveLabel(System.Drawing.SizeF,GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.MoveOption)">
            <summary>
            Moves the label according to <paramref name="option"/> specified
            </summary>
            <param name="shift"></param>
            <param name="option"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.LabelBounds">
            <summary>
            Gets marker label boundaries
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker.Draw(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draws the marker
            </summary>
            <param name="device"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager">
            <summary>
            Manage Doughnut markers layout.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.DrawOutsideMarkers">
            <summary>
            Draw OutsidePieMarkers.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.Layout(System.Drawing.RectangleF)">
            <summary>
            Layout the Markers' labels. Adjust labels' bounds, make sure they don't overlap.
            If cannot avoid the overlapping, hide the overlapped one.
            </summary>
            <returns>All the placed markers.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.PutMarker(System.Int32,System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Put marker on the inside or outside marker layer.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.MixedMarkersLayoutManager">
            <summary>
            Manage the layout which contains Markers and OutsidePieMarkers.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.MixedMarkersLayoutManager.MoveTo(GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.LabelArea,System.Collections.Generic.IList{System.Drawing.RectangleF},System.Int32)">
            <summary>
            Move the label to the sepcified blank area.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.MixedMarkersLayoutManager.FindNearestPlace(System.Drawing.RectangleF,System.Int32,System.Collections.Generic.IList{System.Drawing.RectangleF})">
            <summary>
            Find the nearest blank area that the specified bounds can be put it.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.MixedMarkersLayoutManager.FindPlace(System.Drawing.RectangleF,System.Int32,System.Boolean,System.Collections.Generic.IList{System.Drawing.RectangleF},System.Single@)">
            <summary>
            Find the first place that the specified bounds can be put it with the specified direction.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideMarkersLayoutManager">
            <summary>
            Manage the layout which only contains OutsidePieMarkers.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideMarkersLayoutManager.LayoutOneSideLabels(System.Drawing.RectangleF,System.Collections.Generic.List{GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker})">
            <summary>
            Performs optimal labels layout with a goal to layout all labels without intersection.
            </summary>
            <param name="boundaries"></param>
            <param name="data"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideMarkersLayoutManager.StaggerAlign(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Adjusts rectangle position by staggering
            </summary>
            <param name="rect"></param>
            <param name="rc1"></param>
            <param name="rc2"></param>
            <param name="boundaries"></param>
            <param name="direction"></param>
            <returns>Shift or empty if failed to layout</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideMarkersLayoutManager.AttemptShiftUp(System.Collections.Generic.IList{GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker},System.Int32,System.Drawing.SizeF,System.Drawing.RectangleF)">
            <summary>
            Shifts specified item upward
            </summary>
            <param name="data"></param>
            <param name="itemIndex"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideMarkersLayoutManager.IntersectionSize(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Gets the size of intersection by x and y coordinate.
            Notice the the rectangles are intersected only if both resulting width and height are not equal to zero
            </summary>
            <param name="rc1"></param>
            <param name="rc2"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideMarkersLayoutManager.SortTopDown(GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker,GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayout.OutsidePieMarker)">
            <summary>
            Comparer to sort markers by side and y position
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideMarkersLayoutManager.BclSplit``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Splits given list according to specific criteria
            </summary>
            <typeparam name="T">Type of list elements</typeparam>
            <typeparam name="TC">Criteria result type</typeparam>
            <param name="list"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.InsideLabelArea">
            <summary>
            The Marker's label area.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.DoughnutMarkersLayoutManager.OutsideLabelArea">
            <summary>
            The OutsidePieMarker's label area.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.FinancialBase">
            <summary>
            Financial diagrams renderer.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.FinancialBase.SeriesIndexA(GrapeCity.ActiveReports.Chart.Core.Draw.SeriesIndexes)">
            <summary>
            default implementation in assumption that all series are mapped to Y-Axis
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.CandleStickShape">
            <summary>
            Shape to draw candle charts
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.CandleStickShape.DrawStyle">
            <summary>
            Gets or sets draw style
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.CandleStickShape.SetValues(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets values to be drawn in screen coordinates
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.HLOCShape">
            <summary>
            Shape to draw HiLo, HiLoClose and HiLoOpenClose charts
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.HLOCShape.DrawStyle">
            <summary>
            Gets or sets draw style
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.HLOCShape.SetValues(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets values to be drawn in screen coordinates
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel">
            <summary>
            Funnel charts renderer
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel.neckWidthAbs">
            <summary>
            neck width measured in absolute coordinates
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel.neckHeightAbs">
            <summary>
            neck height measured in absolute coordinates
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel.FunnelSegment.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel.FunnelSegment.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel3D">
            <summary>
            Funnel3D charts renderer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel3D.FunnelSegment.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel3D.FunnelSegment.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel3D.Neck">
            <summary>
            Neck shape used in Funnel3D
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel3D.Neck.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes new instance of the Neck shape
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Funnel3D.Neck.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draws the shape on the given device
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.FunnelPyramidBase">
            <summary>
            Base class for Pyramid and Funnel renderers
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.FunnelPyramidBase.CalcLabelExtent(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,System.Drawing.SizeF@)">
            <summary>
            calculates max labels extent for all
            </summary>
            <param name="device"></param>
            <param name="seriesView"></param>
            <param name="staticSize">fixed extent</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Gantt">
            <summary>
            Gantt chart renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Gantt3D">
            <summary>
            Gantt chart renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.HiLo">
            <summary>
            HiLo diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.HiLoOpenClose">
            <summary>
            HiLoOpenClose diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Kagi">
            <summary>
            Kagi charts renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Kagi3D">
            <summary>
            Kagi3D charts renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Line3D">
            <summary>
            Line3D renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.LineXY">
            <summary>
            Scatter diagram renderer
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.LineXY.GetLineJoin(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBase)">
            <summary>
            Gets LineJoin property from Style. Returns LineJoin.Miter if is not defined.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.LineXY.GetLineGraphicsShape(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBase)">
            <summary>
            Creates the shape suitable to draw the line
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.LineXY.DrawLineSegment(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Graphics.Shape,System.Drawing.PointF[])">
            <summary>
            Draws line segment
            </summary>
            <param name="device"></param>
            <param name="lineShape">the line shape returned within GetLineGraphicsShape call</param>
            <param name="points"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.LineXY.DrawLineSegment(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Graphics.Shape,System.Drawing.PointF[],GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin)">
            <summary>
            Draws line segment
            </summary>
            <param name="device"></param>
            <param name="lineShape">the line shape returned within GetLineGraphicsShape call</param>
            <param name="points"></param>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.PlotBase._layerOrigin">
            <summary>
            It is used to save origin for afterDrawLayer() method
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Draw.PlotBase._gapSpace">
            <summary>
            Value of the free space between series inside layer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.PlotBase.ShrinkRatio">
            <summary>
            It is less than 1 if sum of series views is greater than layer zDepth
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.PlotBase.DrawBackToFront">
            <summary>
            Gets whether to render series from the the last to 1st series
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.PlotBase.BeforeDrawSeries(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,System.Int32)">
            <summary>
            Called before series draw
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.PlotBase.AfterDrawSeries(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,System.Int32)">
            <summary>
            called after series is drawn
            </summary>
            <param name="device"></param>
            <param name="sv">SeriesView drawn</param>
            <param name="seriesNo">series index in a set of visible series</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.PlotBase.getWidth(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView)">
            <summary>
            Gets layer width (along z axis)
            </summary>
            <param name="sv"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.PlotLine">
            <summary>
            Line diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.PlotXY">
            <summary>
            Scatter diagram renderer
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.PlotXY.DrawLineSegment(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Graphics.Shape,System.Drawing.PointF[])">
            <summary>
            overridden method, does nothing
            </summary>
            <param name="device"></param>
            <param name="lineShape"></param>
            <param name="points"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.PlotXY.DrawLineSegment(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Graphics.Shape,System.Drawing.PointF[],GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin)">
            <summary>
            overridden method, does nothing
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.PointAndFigure">
            <summary>
            Point and Figure charts renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.PriceChangeFinacialBase">
            <summary>
            Summary description for PriceChangeFinacialBase.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.PriceChangeFinacialBase.ICenter">
            <summary>
            Represent a center of the shape for sorting 
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.PriceChangeFinacialBase.Comparer">
            <summary>
            Used for 3D shapes sorting before drawing
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Pyramid">
            <summary>
            Pyramid charts renderer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Pyramid.PyramidSegment.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Pyramid.PyramidSegment.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Pyramid3D">
            <summary>
            Pyramid3D charts renderer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Pyramid3D.PyramidSegment.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Pyramid3D.PyramidSegment.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer">
            <summary>
            Diagram renderers interface.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.Draw(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Markers.LayerDrawContext@)">
            <summary>
            Draws given series to given device bounding data by given X and Y Range
            </summary>
            <param name="device">device to render to</param>
            <param name="layerDrawContext">marker layers</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.GetFilteredSeriesColl">
            <summary>
            Return series list that will be actually drawn by this renderer
            </summary>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.IsAxisRanged">
            <summary>
            Gets true if chart should analyze AxisX range to get the visible points list
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.SeriesIndex(GrapeCity.ActiveReports.Chart.Core.Draw.SeriesIndexes)">
            <summary>
            Gets renderer specific series containing appropriate values.
            </summary>
            <param name="idx">kind of value</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.SeriesIndexA(GrapeCity.ActiveReports.Chart.Core.Draw.SeriesIndexes)">
            <summary>
            <code>SeriesIndex</code> analog for multiseries charts. E.g. financial.
            </summary>
            <param name="idx"></param>
            <returns>null if no such series. Array of indexes otherwise.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.stdCreateLegendItems(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,GrapeCity.ActiveReports.Chart.Core.Objects.StdLegendMarkers)">
            <summary>
            Creates a collection of legend items for the charts by default.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.CreateLegendItems(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,GrapeCity.ActiveReports.Chart.Core.Objects.StdLegendMarkers)">
            <summary>
            Creates a collection of legend item to use in the charts specified by points, e.g. doughnut or funnel.
            </summary>
            <param name="seriesView">a series view</param>
            <param name="legendMarkerShape">a marker shape</param>
            <returns>A collection of legend items</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.GetSeriesLegendText(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView)">
            <summary>
            Gets the legend text for legend item specified by a series.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.Renderer.Layer">
            <summary>
            Gets the layer that is using this renderer
            </summary>
            <value></value>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.IBarKind">
            <summary>
            Bar, Bar3D etc bar-based renderers implement this interface to provide uniform access to specific properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.IBarKind.BarGapRatio">
            <summary>
            Gets or sets gap to bar width ratio in percents
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.ICalculateValuesRange">
            <summary>
            Renderer-specific y-values range calculation
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.ICalculateValuesRange.CalcMinMaxValue(GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider,System.Double@,System.Double@)">
            <summary>
            Gets minimum and maximum values of series data
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Renko">
            <summary>
            Renko charts renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Renko3D">
            <summary>
            Renko3D charts renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.Scatter">
            <summary>
            Scatter diagram renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.StackedArea">
            <summary>
            Stacked Area renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.StackedArea3D">
            <summary>
            StackedArea3D chart renderer
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.StackedArea3D.StackedBlockSide.GetPointPlaceSign(GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Allow determine where observer or other side are placed.
            This method is base for comparison of complex cases ("intersect").
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.StackedArea3D.StackedBlockSide.Draw(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draw side on device.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.StackedArea3D.StackedBlock.Draw(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer)">
            <summary>
            Draw whole block on device.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.StackedArea3D100Pct">
            <summary>
            StackedArea3D 100% chart renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.StackedBar">
            <summary>
            Implements stacked bar charts painter
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.StackedBar.BarGapRatio">
            <summary>
            Gets the gap to bars width ratio in percents
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.StackedBar100">
            <summary>
            Implements stacked bar 100% charts painter
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.StackedBar3D">
            <summary>
            StackedBar3D diagram renderer.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Draw.StackedBar3D.GetBarTopRatio(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D)">
            <summary>
            Calculates BarTopRatio depending on BarType and BarTopPer properties
            </summary>
            <param name="seriesStyle"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.StackedBase">
            <summary>
            Base class for stacked chart type
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.StackedBase.IsStacked100Pct">
            <summary>
            Get or sets "stacked 100%" property
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.ThreeLineBreak">
            <summary>
            Three Line Break charts renderer
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Draw.ThreeLineBreak3D">
            <summary>
            3D Three Line Break charts renderer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.ThreeLineBreak3D.LineBox.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Draw.ThreeLineBreak3D.LineBox.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.PriceChangeChartDataAdapter.SeriesData">
            <summary>
            Gets series data provider
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.PriceChangeChartDataAdapter.SourceDataIndexProvider">
            <summary>
            Gets series data indexes provider. This series provider mapping from chart figure index to original data point
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.PriceChangeChartDataAdapter.LabelData">
            <summary>
            Gets labels data provider
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.ThreeLineBreakDataAdapter">
            <summary>
            Data adapter for ThreeLineBreak chart
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.KagiDataAdapter">
            <summary>
            Data adapter for Kagi chart
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.PointAndFigureDataAdapter">
            <summary>
            Data adapter for Kagi chart
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.PointAndFigureDataAdapter.HighSeriesData">
            <summary>
            Gets high data provider
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.RenkoDataAdapter">
            <summary>
            Data adapter for Kagi chart
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Annotations.Annotation.DrawAll(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Does following:
             - draws pre custom objects
             - draws chart object
             - draws post custom object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Annotations.AnnotationFigure.transformPoint(GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Transforms point from coordinates system with origin in upper left corner of the square
            according to anchor point and current rotation
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Annotations.AnnotationFigure.stickedPoints">
            <summary>
            index denotes anchor point of the figure
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Annotations.AnnotationFigure.detachStickyPoint(GrapeCity.ActiveReports.Chart.Core.Objects.Annotations.StickyPoint,System.Int32)">
            <summary>
            </summary>
            <returns>true, if point was actually detached</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Annotations.AnnotationFigure.detachStickyPoint(GrapeCity.ActiveReports.Chart.Core.Objects.Annotations.StickyPoint)">
            <summary>
            Detaches point regardles of anchor's point index
            </summary>
            <returns>true, if point was actually detached</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.AutoScaleType">
            <summary>
            Axis.AutoScale modes
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AutoScaleType.None">
            <summary>
            Neither autoscale nor smart labels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AutoScaleType.Min">
            <summary>
            automatically calulate Axis.Min value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AutoScaleType.Max">
            <summary>
            automatically calulate Axis.Max value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AutoScaleType.SmartLabels">
            <summary>
            automatically calculate labels appearance
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Tick">
            <summary>
            Class representing Tickmark properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Tick.Visible">
            <summary>
            Gets or sets tickmarks and gridlines visibility
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Tick.Line">
            <summary>
            Gets or sets axis line properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Tick.GridLine">
            <summary>
            Gets or sets grid line properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Tick.Step">
            <summary>
            Gets or sets Step property. Step property specifies steps to draw tick mark.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Tick.TickLength">
            <summary>
            Get or sets TickLength property. Use negative values to draw tick toward opposite direction.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Margins">
            <summary>
            Represents the margins of the axis.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Axis">
            <summary>
            Class representing chart axis.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._position">
            <summary>
            axis position on adjacent axis
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._labels">
            <summary>
            labels collection
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._min">
            <summary>
            Axis minimum
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._max">
            <summary>
            Axis maximum
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._autoScale">
            <summary>
            automatically determine min and max values
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._title">
            <summary>
            The axis title
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._titleFont">
            <summary>
            The axis title font
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._line">
            <summary>
            Axis Line's properties
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._arrowType">
            <summary>
            axis line's arrow style
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._majorTick">
            <summary>
            Major Tick Mark properties
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._minorTick">
            <summary>
            Minor Tick Mark properties
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._tickOffset">
            <summary>
            Specifies axis value to bind tickmark to
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._labelsGap">
            <summary>
            the gap between visible value labels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._isStaggerLabels">
            <summary>
            stagger labels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._labelFont">
            <summary>
            Font used to draw labels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._labelFormat">
            <summary>
            Axis Labels format
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._isAxisInside">
            <summary>
            True if labels should be drawn inside plotarea
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._placementAxis">
            <summary>
            Axis to place this axis on
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._placementLocation">
            <summary>
            Location on placementAxis where this axis is placed
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._numberOfTicks">
            <summary>
            Number of ticks to draw for Smart labels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._axisScroll">
            <summary>
            Axis scrolling settings
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._scaleFactor">
            <summary>
            scale factor used in ToWorldFromValue() method.
            We'll recalculate it in recalcScaleFactor() during Prepare() phase
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._adjacentWallWeight">
            <summary>
            adjacent wall weight (set before Prepare() call if adjacent wall is visible and is thick)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._isAxisPositioned">
            <summary>
            Specifies whether to apply axis.Position property, accessed in PlotArea.Draw method
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._positionOffset">
            <summary>
            Specifies offset for "positioned" axis, accessed in PlotArea.Draw method
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Axis._visiblePoints">
            <summary>
            Array to hold the indexes on points that shouldn't be drawn
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.#ctor(GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject,GrapeCity.ActiveReports.Chart.Core.Objects.AxisDirection)">
            <summary>
            Default object constructor
            </summary>
            <param name="parent">Parent object, usually PlotAreaPlace </param>
            <param name="axisDirection">axis direction, set to None for secondary axis</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.AxisDirection">
            <summary>
            Gets or sets axis geometrical direction
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.SetWorldCoords(System.Single,System.Single)">
            <summary>
            Sets axis's world coordinates
            </summary>
            <param name="x1">range's start</param>
            <param name="x2">range's end</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.AutoScale">
            <summary>
            Gets or sets AutoScale property. AutoScale specifies whether control should automatically calculate Min and Max values.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.LabelsAtBottom">
            <summary>
            Gets or sets whether axis labels should be drawn outside the chart area in case Position is specified
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.ActualMin">
            <summary>
            Gets axis's starting value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.ActualMax">
            <summary>
            Gets axis's ending value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.Min">
            <summary>
            Gets axis's starting value (visible, with scrolling in mind)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.Max">
            <summary>
            Gets axis's ending value (visible, with scrolling in mind)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.IsMinDerived">
            <summary>
            Gets or sets whether axis's minimum is derived from PlacementAxis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.IsMaxDerived">
            <summary>
            Gets or sets whether axis's maximum is derived from PlacementAxis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.IsPrimary">
            <summary>
            True if axis is primary axis for this chart
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.IsVertical">
            <summary>
            Gets IsVertical property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.Position">
            <summary>
            Specifies axis position on adjacent axis. Set to NaN to put axis to its common place
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.Title">
            <summary>
            Axis title
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.TitleFont">
            <summary>
            Gets or sets font to draw axis title
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.MajorTick">
            <summary>
            Major Tickmark properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.MinorTick">
            <summary>
            Minor Tickmark properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.TickOffset">
            <summary>
            Get or sets axis value to bind tickmarks to.
            Specify double.NaN to bind to axis minimum (ActualMin)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.Line">
            <summary>
            Gets or sets axis's line style
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.ArrowType">
            <summary>
            Gets or sets axis line's arrow style
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.LabelFont">
            <summary>
            Gets or sets LabelFont property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.IsAxisInside">
            <summary>
            Gets or sets IsAxisInside property. IsAxisInside specifies whether labels should be drawn inside plotarea.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.LabelsGap">
            <summary>
            Gets or sets LabelsGap property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.IsStaggerLabels">
            <summary>
            Specifies label staggering
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.PlacementAxis">
            <summary>
            Gets parent axis (for secondary axes)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.PlacementLocation">
            <summary>
            Gets or sets secondary axis location
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.ActualPlacementStart">
            <summary>
            Gets the position of the custom axis on its parent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.PlacementLength">
            <summary>
            Gets or sets secondary axis length within primary axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.WorldWidth">
            <summary>
            gets axis width in world coordinate system
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.WorldX1">
            <summary>
            gets starting point's physical coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.WorldX2">
            <summary>
            gets ending point's physical coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.NTicks">
            <summary>
            Gets or sets number of ticks if SmartLabels is on (Axis.AutoScale)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.Scroll">
            <summary>
            Gets axis's scrolling settings
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.Reversed">
            <summary>
            Gets Reversed property. Reversed property specifies whether do draw axis from right to left
            (from top to bottom).
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.ToWorldFromValue(System.Double)">
            <summary>
            returns world coordinate for given value
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.ToWorldFromValueForSecondAxis(System.Double)">
            <summary>
            returns world coordinate for given value used by second axis
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.AxisWorldVector">
            <summary>
            Gets axis direction within world coordinate system
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.recalcScaleFactor">
            <summary>
            recalculates scale factor used in ToWorldFromValue method
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.calcLayout(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Calculates required width for vertical axis or height for horizontal axis.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.AreLabelsVisible">
            <summary>
            Gets true if labels are rendered outside the chart area
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.drawAxisLine(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.Axis.AxisPaintData@)">
            <summary>
            Draws axis itself
            </summary>
            <param name="device">device to draw on</param>
            <param name="pd">offset to draw title, recalculated on return</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.drawTitleEx(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.Axis.AxisPaintData@,System.Boolean)">
            <summary>
            Draws or simply calculates offset for axis title
            </summary>
            <param name="device">device to draw on</param>
            <param name="pd">offset to draw title, recalculated on return</param>
            <param name="draw">set to true to draw title, otherwise only offset will be recalculated</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.getFirstVisibleTick(GrapeCity.ActiveReports.Chart.Core.Objects.Tick,System.Double@,System.Int32@)">
            <summary>
            Returns position and index of first tick do draw.
            </summary>
            <param name="tick">tickmark definition</param>
            <param name="tickValue">tick's value</param>
            <param name="tickNumber">tick's index</param>
            <returns>Tick position. Returned value is greater than axis.Max if there're no visible ticks</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.drawTickMarks(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.Tick,System.Single)">
            <summary>
            Draws Tick Marks and their labels
            </summary>
            <param name="device"></param>
            <param name="tick">TickMarks to draw</param>
            <param name="verticalOffset">shift y (for x axis) coordinate</param>
            <returns>true if tickmarks are drawn</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.drawLabelsEx(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Single@,System.Boolean)">
            <summary>
            Draws labels (if actuallyDraw == true) and recalculates offset
            </summary>
            <param name="device"></param>
            <param name="tickShift">vertical offset to start drawing</param>
            <param name="actuallyDraw"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.getTextAnchor(System.Single)">
            <summary>
            Gets text anchor for 
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.getAxisTitle">
            <summary>
            Gets axis title string to output (may differ from Title property due to extra info)
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.getPointLabel(System.Int32,System.Double)">
            <summary>
            Gets label text to output on tick position specified for given value
            </summary>
            <param name="tickNumber">tick position</param>
            <param name="tickValue">value to output</param>
            <returns>formatted label value</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.GetPointsRange(System.Int32@,System.Int32@)">
            <summary>
            Calculates 1st and last point indexes, applicable only for category and scalar axes
            </summary>
            <param name="startPointIndex">Index of the first visible point</param>
            <param name="pointCount">Number of points to be displayed</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.GetPointBounds(System.Int32,System.Single@,System.Single@)">
            <summary>
            Gets the position of the cell (for category axis)
            </summary>
            <param name="pointIndex"></param>
            <param name="startX"></param>
            <param name="endX"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Axis.CellWidth">
            <summary>
            Gets the cell width i.e. minimal distance between subsequent data points
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxesCollection.Add(GrapeCity.ActiveReports.Chart.Core.Objects.Axis)">
            <summary>
            Adds axis to the collection
            </summary>
            <param name="anObject">axis object to add</param>
            <returns>index of added axis in collection</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxesCollection.Remove(GrapeCity.ActiveReports.Chart.Core.Objects.Axis)">
            <summary>
            Removes axis object from collection
            </summary>
            <param name="anObject"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxesCollection.Item(System.Int32)">
            <summary>
            returns object from collection
            </summary>
            <param name="index">object's index in collection</param>
            <returns>object by given index</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxesCollection.IndexOf(GrapeCity.ActiveReports.Chart.Core.Objects.Axis)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll">
            <summary>
            Represents axis scrolling settings and behavior
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.rangeMin">
            <summary>
            Axis.Min
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.rangeMax">
            <summary>
            Axis.Max
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.scrollPos">
            <summary>
            Scrolling area position
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.scrollLen">
            <summary>
            Scrolling area length within axis
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.scrollStepSize">
            <summary>
            Step scrolling size. Step scrolling is occured when user clicks scroll buttons.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.visible">
            <summary>
            Specifies whether scroll is visible
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.enabled">
            <summary>
            Specifies whether scrolling is active
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.backColor">
            <summary>
            scrollbar background color
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.buttonColor">
            <summary>
            buttons face color
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.outlineColor">
            <summary>
            scrollbar outline color
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.width">
            <summary>
            scrollbar width in pixels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.ScrollPos">
            <summary>
            Scrolling position within parent axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.ScrollLen">
            <summary>
            Scrolling area length
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.ScrollEnd">
            <summary>
            Gets ending position
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.ScrollStepSize">
            <summary>
            Step scrolling size. Step scrolling is occured when user clicks scroll buttons.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.Visible">
            <summary>
            Specifies whether scroll is available
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.BackColor">
            <summary>
            scrollbar background color
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.ButtonColor">
            <summary>
            buttons face color
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.OutlineColor">
            <summary>
            scrollbar outline color
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.Width">
            <summary>
            scrollbar width in pixels
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.Draw(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.RectangleF,GrapeCity.ActiveReports.Chart.Graphics.IDrawCoordReverser)">
            <summary>
            Draws scrollbar
            </summary>
            <param name="device">Device to draw scrollbar on</param>
            <param name="rect">Scrollbar bounding rectangle</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.SetRange(System.Double,System.Double)">
            <summary>
            Sets the scroll range
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.Validate">
            <summary>
            Validates scrolling position and length
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.Scroll(GrapeCity.ActiveReports.Chart.Core.Objects.AxisScroll.ScrollCmd)">
            <summary>
            Scrolls the scrollbar
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Backdrop">
            <summary>
            Common backdrop
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.BorderBase">
            <summary>
            Base class for the borders. To create your own border
            you should subclass it and override <code>RecalcBoundRect</code> and <code>Draw</code> methods.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.BorderBase.RecalcBoundRect(System.Drawing.RectangleF@,System.Boolean)">
            <summary>
            recalculates rectangle both for inner and bounding rectangle
            </summary>
            <param name="rect"></param>
            <param name="bDeflate">true if bounding rectange given, internal otherwise</param>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Border.shadowWeight">
            <summary>
            weight of shadow line. No shadow if ShadowWeight is 0.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Border.Line">
            <summary>
            Gets or sets border's line property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Border.ShadowWeight">
            <summary>
            Weight of shadow. No shadow if ShadowWeight less or equal to 0.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Border.ShadowColor">
            <summary>
            Sets or gets shadow color.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.CategoricalAxis">
            <summary>
            Category values axis implementation
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.CategoricalAxis.#ctor(GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject,GrapeCity.ActiveReports.Chart.Core.Objects.AxisDirection,System.IFormatProvider)">
            <summary>
            Default constructor
            </summary>
            <param name="parent">parent object, should be axis or plotarea</param>
            <param name="axisDirection">axis direction, leave to None for secondary axes</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Chart">
            <summary>
            Summary description for Title.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer">
            <summary>
            Represents a set of Series drawn on a single layer with the same renderer.
            In 3D mode layer is rendered on a single separate plane.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer.Visible">
            <summary>
            Gets or sets Visible property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer.Z">
            <summary>
            Gets or sets Z-coordibate of the layer plane
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer.drawTooltip(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draws tooltip on active item of the layer
            </summary>
            <param name="device">Device on which to draw tooltip</param>
            <returns>Return true if tooltip was drawn</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer.GetLabelText(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,System.Int32,System.String)">
            <summary>
            Gets label text formatted accordingly to format specification
            <list type="bullet">
            <listheader>
                  <term>term</term>
                  <description>description</description>
            </listheader>
            <item>
            	<term>Index</term>
            	<description>index of given point</description>
            </item>
            <item>
            	<term>Name</term>
            	<description>Point's name</description>
            </item>
            <item>
            	<term>Value</term>
            </item>
            <item>
            	<term>XValue</term>
            </item>
            <item>
            	<term>YValue</term>
            </item>
            <item>
            	<term>Value0...Value{SeriesCount-1}</term>
            </item>
            <item>
            	<term>Total</term>
            	<description>is a sum of Value for entire series</description>
            </item>
            <item>
            	<term>PTotal</term>
            </item>
            <item>
            	<term>Pct</term>
            </item>
            </list>
            </summary>
            <param name="seriesView">reference to SeriesView</param>
            <param name="pointNo">point index</param>
            <param name="formatMask">format specification
            format string is similar to <code>string.Format()</code> except references to parameter list.
            </param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer.ZOrderComparer">
            <summary>
            Comparer class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer.ZOrderComparer.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="accending">Set to <code>true</code> to sort in accendant order, <code>false</code> to descendant sort</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayerCollection.Add(GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer)">
            <summary>
            Adds layer to collection
            </summary>
            <param name="newLayer"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayerCollection.Remove(GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="layer">The <see cref="T:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer"/> to remove from the collection.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayerCollection.Item(System.Int32)">
            <summary>
            returns layer from collection
            </summary>
            <param name="index">layer's index in collection</param>
            <returns>layer by given index</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayerCollection.IndexOf(GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="layer">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayerCollection.AutoLayoutZ">
            <summary>
            Layouts all layers that has Z = NAN
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Alignment">
            <summary>
            Object's alignment inside container or bounding box
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.ChartFont.Angle">
            <summary>
            Get or sets Angle property. Angle property specifies text rotation.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.ChartFont.Color">
            <summary>
            Gets or sets color to draw text
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable">
            <summary>
            Drawable chart objects base
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable.Visible">
            <summary>
            Determines whether object is visible or not
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable.Prepare(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Object should prepare its internal structures in its own implementation of this method.
            This method is called before Draw() during chart rendering.
            Children get this message after their parents
            </summary>
            <param name="device">Device to draw object</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable.draw(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draws object onto the given device
            </summary>
            <param name="device">Device to draw object on</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable.PreparePlaneSettings(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            This method is called on each object immediately before Draw.
            Implementors should set appropriate plane setting of Graphics device here
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable.DrawAll(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Does following:
             - draws pre custom objects
             - draws chart object
             - draws post custom object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable.SetBoundRect(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.RectangleF)">
            <summary>
            Sets rectangle to draw object inside
            </summary>
            <param name="device"></param>
            <param name="rc">Bounding rectangle</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Drawable.BoundRect">
            <summary>
            Gets bounding rectangle of the object. Valid only during Draw().
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.IElastic">
            <summary>
             Empty interface that informs enabled layout manager
             that a particular component should be stretched up
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.IElastic.MinSize">
            <summary>
            Gets minimal required size to draw object calculated in <code>CalcMinSize</code>
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject">
            <summary>
            Summary description for ChartObject.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject.Font">
            <summary>
            Gets or sets Font property
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.ObjectsCollection">
            <summary>
            ChartObject collection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ObjectsCollection.Add(GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject)">
            <summary>
            Adds object to collection
            </summary>
            <param name="anObject">object to add</param>
            <returns>index of added object in collection</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ObjectsCollection.Remove(GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject)">
            <summary>
            removes object from collection
            </summary>
            <param name="anObject"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ObjectsCollection.Item(System.Int32)">
            <summary>
            returns object from collection
            </summary>
            <param name="index">object's index in collection</param>
            <returns>object by given index</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.ObjectsCollection.IndexOf(GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem">
            <summary>
            Custom Legend Item.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem.Text">
            <summary>
            Gets or sets text displayed in legend
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem.Style">
            <summary>
            Get or sets legend item picture style
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem.Line">
            <summary>
            Gets or sets line style
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem.Backdrop">
            <summary>
            Gets or sets legend item picture backdrop
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem.Border">
            <summary>
            Gets or sets legend item picture border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem.Marker">
            <summary>
            Gets or sets legend marker
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItemCollection.Add(GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem)">
            <summary>
            Adds legend item to the collection
            </summary>
            <param name="anObject">legend item object to add</param>
            <returns>index of added legend item in collection</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItemCollection.Remove(GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem)">
            <summary>
            removes legend item from collection
            </summary>
            <param name="anObject"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItemCollection.Item(System.Int32)">
            <summary>
            returns object from collection
            </summary>
            <param name="index">object's index in collection</param>
            <returns>object by given index</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItemCollection.IndexOf(GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.IDataPointNameProvider">
            <summary>
            Interface to provide point name (for {Name} tag in ToolTip, LegendText etc)
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.IDataPointNameProvider.GetPointName(System.Int32)">
            <summary>
            Gets point name for specified point
            </summary>
            <param name="pointNo"></param>
            <returns>It is supposed that object will be converted to strring in most cases of use</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyle">
            <summary>
            Summary description for DataPointStyle.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyle.Marker">
            <summary>
            Gets or sets DefaultMarker property. <code>this[i]</code> property returns
            DefaultMarker if no value specified for <code>i</code> point.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyle.IsBlank">
            <summary>
            Returns true if there's no data stored
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyleAdapter">
            <summary>
            Adapter class for PerPointStyleOverrides
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyleAdapter.Default">
            <summary>
            Gets or sets Default property. Default property returns
            DataPointStyle if there's no point-specified style.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyleAdapter.DefaultMarker">
            <summary>
            Gets or sets DefaultMarker property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyleAdapter.DefaultSeriesStyle">
            <summary>
            Get or sets DefaultSeriesStyle property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyleAdapter.Item(System.Int32)">
            <summary>
            Get or sets Marker for given point.
            </summary>
            
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyleAdapter.IsStyleSpecified(System.Int32)">
            <summary>
            Returns <code>true</code> if series style is specified for particular point.
            </summary>
            <param name="i">point index</param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.DataPointStyleCollection">
            <summary>
            obsolete class name left for compatibility with old code
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Label">
            <summary>
            Label object
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Label.BorderLine">
            <summary>
            Gets or sets label Border property. Border property specifies border properties for
            the label.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Label.Backdrop">
            <summary>
            Gets or sets label Backdrop property. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Label.Placement">
            <summary>
            Gets or sets label Placement property. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Label.Font">
            <summary>
            Gets or sets label Font property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Label.Format">
            <summary>
            Gets or sets label Format property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Label.ExternalBounds">
            <summary>
            Gets or sets the rectangle to feet label rectangle into.
            In case of label intersects the given rectangle label will be moved.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Label.Draw(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.PointF,System.String,System.Single)">
            <summary>
            Draws label for the given data point at the specified position
            </summary>
            <param name="device">device object to draw label on</param>
            <param name="point">position where to draw label</param>
            <param name="labelText">Label's value</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Label.CreateText(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.Label,System.Drawing.PointF,System.String,System.Single,System.Drawing.RectangleF,System.Drawing.RectangleF@)">
            <summary>
            Create Text shape according to Label and some other settings.
            And output the Text's bounds.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Label.GetRenderedBounds(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Int32,System.Drawing.PointF,GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,System.Drawing.RectangleF)">
            <summary>
            Get the rendered area of Label on the device.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.AlignmentDef">
            <summary>
            Object's alignment definition
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AlignmentDef.Alignment">
            <summary>
            Object's alignment. Applicable to docked objects (IsFloating = false).
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AlignmentDef.MarginX">
            <summary>
            margin between object and parent region's left or right side (depends from alignment)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.AlignmentDef.MarginY">
            <summary>
            margin between object and parent region's top or bottom side (depends from alignment)
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.LayoutMgr">
            <summary>
            LayoutMgr object manages layout for specified region consisting of components.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.LayoutMgr.AddComponent(GrapeCity.ActiveReports.Chart.Core.Objects.Region,GrapeCity.ActiveReports.Chart.Core.Objects.AlignmentDef)">
            <summary>
            adds subcomponent to layout or redefines component alignment for existing component
            </summary>
            <param name="component">component to add.</param>
            <param name="alignment">component alignment within layout</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.LayoutMgr.AddComponent(GrapeCity.ActiveReports.Chart.Core.Objects.Region,GrapeCity.ActiveReports.Chart.Core.Objects.LayoutMgr.Alignment)">
            <summary>
            adds docked subcomponent to layout
            </summary>
            <param name="component">component to add</param>
            <param name="alignment">docked component alignment within layout</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.LayoutMgr.RecalcLayout(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.RectangleF)">
            <summary>
            Layouts subcomponents within region specified
            </summary>
            <param name="device"></param>
            <param name="layoutRect"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.LayoutMgr.MinDockSize">
            <summary>
            Gets minimal size to place docked components
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Legend">
            <summary>
            Legend object
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Legend.MaxColumnCount">
            <summary>
            Gets or sets maximum number of columns to draw legend
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Legend.MaxRowCount">
            <summary>
            Gets or sets maximum number of rows to draw legend
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Legend.CustomLegendItems">
            <summary>
            Gets custom legend items collection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Legend.SeriesViews">
            <summary>
            Gets collection of series views to be drawn inside this legend
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Legend.IsHorizontal">
            <summary>
            Gets IsHorizontal property. This property specifies whether
            series labels should be places at single row against one column if this
            property is set to <code>false</code>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Legend.FlushLayerLegendItems(GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer,System.Collections.ArrayList)">
            <summary>
            Flushes collected legend items optionally reversing the order
            </summary>
            <param name="layer"></param>
            <param name="layerItems"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Legend.layoutLegendItems">
            <summary>
            layouts legend items inside Region objects
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.StdLegendMarkers">
            <summary>
            Standard legend markers
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.AbstractLegendItem">
            <summary>
            Abstract legend item
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.StdLegendItem.getLegendMarker(GrapeCity.ActiveReports.Chart.Core.Objects.CustomLegendItem,System.Drawing.RectangleF)">
            <summary>
            Gets fully initialized shape to draw legend marker
            </summary>
            <param name="li"></param>
            <param name="rcMarker"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.StdLegendItem.getPointLegendText(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView,GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle,System.Int32)">
            <summary>
            Gets legend text for particular point
            </summary>
            <param name="seriesView">series style</param>
            <param name="pointStyle">point style. Can be null.</param>
            <param name="pointNo">point index</param>
            <returns>Legend text, expanded and formatted</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Marker">
            <summary>
            Summary description for Marker.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.MarkerType.Square">
            <summary>
            Displays rectangle in 2D, cube in 3D
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.MarkerType.Circle">
            <summary>
            Displays circle in 2D, sphere in 3D mode
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.MarkerType.Triangle">
            <summary>
            Displays triangle in 2D mode, cone in 3D
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.MarkerType.InvTriangle">
            <summary>
            Displays inverted triangle (inverted cone)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.MarkerType.Diamond">
            <summary>
            Displays diamond
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.visible">
            <summary>
            Marker visibility
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.markerSize">
            <summary>
            Size of the marker in pixels
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.markerType">
            <summary>
            Marker Type
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.backdrop">
            <summary>
            Marker's color/pattern etc
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.line">
            <summary>
            Line style used to draw marker
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.label">
            <summary>
            Label style used to draw text label on marker
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.labelDistanceFactor">
            <summary>
            Set the Marker Label Distance from chart.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.Visible">
            <summary>
            Gets or sets Visible property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.Size">
            <summary>
            Gets or sets size of the marker in pixels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.Type">
            <summary>
            Gets or sets marker shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.Backdrop">
            <summary>
            Get or sets marker's backdrop
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.Line">
            <summary>
            Gets or sets Line style used to draw marker
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.Label">
            <summary>
            Gets or sets Label style to draw on marker
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.LabelDistanceFactor">
            <summary>
            Gets or sets a value to set the Marker Label Distance from chart.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Marker.Draw(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.PointF,System.String)">
            <summary>
            Draws marker for the given data point at the specified position
            </summary>
            <param name="device">device object to draw marker on</param>
            <param name="point">position where to draw marker</param>
            <param name="labelText">Label's value</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.MarkerShape">
            <summary>
            Summary description for MarkerShapes.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.MarkerShape.Position">
            <summary>
            Gets or sets Position property. Position property specifies location of the Shape center point.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.MarkerShape.Size">
            <summary>
            Gets or sets Size property. Size property specifies size of the marker shape (in pixels)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.MarkerShape.Type">
            <summary>
            Gets or sets shape (marker) type.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.NumericalAxis">
            <summary>
            Summary description for NumericalAxis.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.NumericalAxis.logBase">
            <summary>
            the base for the Logarithmic scale. 0 means non-logarithmic scale
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.NumericalAxis.labelScale">
            <summary>
            To scale (divide the values) axis labels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.NumericalAxis.LogBase">
            <summary>
            Gets or sets logarithm base for logarithmic scaled axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.NumericalAxis.LabelScale">
            <summary>
            Gets or sets LabelScale property. Property specifies whether to scale (divide the values) axis labels
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.NumericalAxis.IsDisplayScale">
            <summary>
            Gets or sets IsDisplayScale property. Set True to display scaling number in AxisTitle
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.NumericalAxis.#ctor(GrapeCity.ActiveReports.Chart.Core.Objects.ChartObject,GrapeCity.ActiveReports.Chart.Core.Objects.AxisDirection,System.IFormatProvider)">
            <summary>
            Default constructor
            </summary>
            <param name="parent">parent object, should be axis or plotarea</param>
            <param name="axisDirection">axis direction, leave to None for secondary axes</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace">
            <summary>
            Represents entire chart area
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.HeightRatioLimit">
            <summary>
            Width/Height ratio calculated will be limited to this value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.hideWallsAndAxes">
            <summary>
            special mode for doughnut charts
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.noFeetWorld">
            <summary>
            don't try to feet the works into outputregion
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.Layers">
            <summary>
            Returns layers collection.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.Projection">
            <summary>
            Gets or sets Projection property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.OrthoDX">
            <summary>
            Gets or sets DX property for orthogonal projection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.OrthoDY">
            <summary>
            Gets or sets DY property for orthogonal projection
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.PerspectiveRatio">
            <summary>
            Gets or sets a perspective ratio for corresponding projection.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.ZDepthRatio">
            <summary>
            Get or sets Z-axis width to X-axis width ratio
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.AxisX2">
            <summary>
            Get or sets secondary X axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.AxisY2">
            <summary>
            Gets or sets secondary Y axis
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.updateWallAxes(GrapeCity.ActiveReports.Chart.Core.Objects.Wall,GrapeCity.ActiveReports.Chart.Core.Objects.Axis,GrapeCity.ActiveReports.Chart.Core.Objects.Axis)">
            <summary>
            Updates wall axes. Used just to simplify following code.
            </summary>
            <param name="wall"></param>
            <param name="axis1"></param>
            <param name="axis2"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.WallXY">
            <summary>
            Gets os sets WallXY (Floor) property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.WallYZ">
            <summary>
            Get or sets WallYZ property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.WallZX">
            <summary>
            Get or sets WallXZ property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.SeriesLine">
            <summary>
            Get or sets SeriesLine property
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.WallRanges">
            <summary>
            Get or sets WallRange objects collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.CalcAxesMinMax">
            <summary>
            calculates Axis.Min/Max for all the axes with AutoScale property set <code>true</code>
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.IsValueBetweenOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            Returns true if value specified is between min and max value or equal to min or max value
            </summary>
            <param name="value">value to verify</param>
            <param name="min">min value</param>
            <param name="max">max value</param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.AxisData">
            <summary>
            Class to hold axis related data for autoscale calculations
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.collectAutoScaleAxes(System.Collections.Hashtable)">
            <summary>
            collects autoscaled axes, series affecting axis min/max
            </summary>
            <param name="autoScaleAxes">hashtable based on axes, object property contains arrays of series adjacent to particular axis</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.getNiceNumber(System.Double,System.Boolean,System.Int32@)">
            <summary>
            returns "nice" number approximately equal to x
            </summary>
            <param name="x"></param>
            <param name="round">round the value if round=true, ceiling if round=false</param>
            <param name="roundedFraction">Output parameter to return rounded fraction of nice number</param>
            <returns>Nice number</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.CalculateHeightRatioOld(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.RectangleF)">
            <summary>
            Calculates height/width ratio (old style algorythm). Modifies device's input and output region
            </summary>
            <param name="device"></param>
            <param name="screenArea">output area rectangle</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.calcTransformation(GrapeCity.ActiveReports.Chart.Graphics.Device,System.Drawing.RectangleF)">
            <summary>
            Calculates transformation parameters and stores them to drawAreaOrigin and drawAreaSize.
            Unlike previous version this one uses bounds width to height ratio as an X to Y proportion
            </summary>
            <param name="device"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.calcBoundingBox(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Graphics.Bar)">
            <summary>
            adjusts drawing space origin point and size returns bounding box in screen coordinates
            </summary>
            <param name="device"></param>
            <param name="spaceSize"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.getArrowLen(GrapeCity.ActiveReports.Chart.Core.Objects.Axis)">
            <summary>
            get arrow (including tail) length for given axis
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.DrawAxis(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.Axis,GrapeCity.ActiveReports.Chart.Core.Objects.Axis,System.Boolean)">
            <summary>
            Draws axis
            </summary>
            <param name="device"></param>
            <param name="axis">axis to be drawn</param>
            <param name="adjacentAxis">axis that specifies title and ticks orientation</param>
            <param name="invertInsideValue">invert IsAxisInside before drawing</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.PlotAreaPlace.IsPlaneOrientedToFace(GrapeCity.ActiveReports.Chart.Graphics.Device,GrapeCity.ActiveReports.Chart.Core.Objects.Wall)">
            <summary>
            Returns true is the walls' front plane is oriented toward the observer
            </summary>
            <param name="wall"></param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Region.Border">
            <summary>
            Get or sets object's border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Region.CompositeBorder">
            <summary>
            Returns custom border if event handler is determined, otherwise returns standard border
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Region.Backdrop">
            <summary>
            Get or sets object's backdrop
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Region.Layout">
            <summary>
            Gets or sets associated layout manager
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Region.MinSize">
            <summary>
            Gets minimal size required to draw object. Precalculated in Prepare().
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Region.draw(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            this Draw method will draw the background but since it is virtual method derived classes should draw them self. Not to re-invent wheel derived classes should chall this function to paint background
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBase.LegendText">
            <summary>
            Gets or sets Legend text for entire series or data point
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBase.DisplayInLegend">
            <summary>
            DisplayInLegend specifies whether series should be displayed on legend
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBase.Clone">
            <summary>
            creates a memberwise clone of the current style
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle">
            <summary>
            Defines series style i.e. backdrop, linestyle etc.
            Can be subclassed for specific chart types
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle.line">
            <summary>
            Gets or sets Line property. Line property defines rendering style for line-based
            charts and style of border for chart types based on area and bar.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle.backdrop">
            <summary>
            Gets or sets Backdrop property. Backdrop property defines rendering style for
            interior of drawn shape.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle.lineJoin">
            <summary>
            Gets or Sets LineJoin property. It defines the line's corner rendering of a path (PolyLine)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle.Line">
            <summary>
            Gets or sets Line property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle.BorderLine">
            <summary>
            Gets or sets BorderLine property. BorderLine property defines rendering style for
            border of drawn shape.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle.Backdrop">
            <summary>
            Gets or sets Backdrop property. Backdrop property defines rendering style for
            interior of drawn shape.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyle.LineJoin">
            <summary>
            Gets or Sets LineJoin style of lines drawing.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleArea3D">
            <summary>
            Defines series style i.e. backdrop, linestyle etc.
            Can be subclassed for specific chart types
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleArea3D.LineBackdrop">
            <summary>
            Gets or sets LineBackdrop property. LineBackdrop property defines rendering style for
            line in case of Thickness or Width is greater than 0.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleArea3D.Thickness">
            <summary>
            Gets or sets line thickness
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleArea3D.Width">
            <summary>
            Gets or sets line Width property. Width property specifies line thickness in Z-coordinate.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleCandle.WickLine">
            <summary>
            Get or sets wick line properties
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleCandle.BodyUpswingBk">
            <summary>
            Gets or sets candlestick body backdrop style when closing value is higher than opening value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleCandle.BodyDownswingBk">
            <summary>
            Gets or sets candlestick body backdrop style when closing value is lower than opening value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleCandle.BodyBorder">
            <summary>
            Get or sets border line style for candlestick body
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleCandle.BodyWidth">
            <summary>
            Gets or sets candlestick body width
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleHLOC.HiloLine">
            <summary>
            Gets or sets basic line style
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleHLOC.OpenLine">
            <summary>
            Gets or sets line style for open value tick
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleHLOC.CloseLine">
            <summary>
            Gets or sets line style for close value tick
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleHLOC.TickLen">
            <summary>
            Gets or sets tick length for open and close values
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in a figure (subpath) contained in a path (PolyLine)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin.Miter">
            <summary>
            Specifies a mitered join. This produces a sharp corner or a clipped corner, depending on whether the length of the miter exceeds the miter limit.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin.Bevel">
            <summary>
            Specifies a beveled join. This produces a diagonal corner.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin.Round">
            <summary>
            Specifies a circular join. This produces a smooth, circular arc between the lines.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin.MiterClipped">
            <summary>
            Specifies a mitered join. This produces a sharp corner or a beveled corner, depending on whether the length of the miter exceeds the miter limit. 
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.barType">
            <summary>
            Gets or sets Line property. Line property defines rendering style for line-based
            charts and style of border for chart types based on area and bar.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.vertexNumber">
            <summary>
            number of vertices in the bottom base of the shape. Used if BarType is Custom.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.barTopPer">
            <summary>
            Is used with the conjunction VertexNumber to draw conic shapes.
            Use 0 to conic, between [0..100] to draw cut conic shapes (sets all Series).
            Applicable both to Custom and Cone shape styles.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.rotationAngle">
            <summary>
            Is used BarType is custom. Defines shape's rotation angle around vertical axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.BarType">
            <summary>
            Gets or sets BarType property. BarType property specifies the shape used to draw series.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.VertexNumber">
            <summary>
            Gets or sets number of vertices in the bottom base of the shape. Used if BarType is Custom.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.BarTopPer">
            <summary>
            Is used if ChartType is Bar in conjunction with VertexNumber.
            To draw conic shapes use 0.
            0 to conic, between [1..100] to draw cut conic shapes (sets all Series).
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.RotationAngle">
            <summary>
            Gets or sets shape's rotation angle if BarType is Custom.
            Valid angle's range is +- 180/VertexNumber
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.DepthPct">
            <summary>
            Gets or sets bar depth (along z axis) in percents to bar width
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBar3D.normalizedRotationAngle(System.Single,System.Int32)">
            <summary>
            Returns normalized angle value
            </summary>
            <param name="angle">Angle to normalize</param>
            <param name="vertNum">Vertices count</param>
            <returns>Normalized value</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleDoughnut.HoleSize">
            <summary>
            Doughnut hole size relative to outer radius. Value should be in [0..1.0) range.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleDoughnut.Radius">
            <summary>
            Doughnut outer radius. Value should be in (0..2.0] range.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleDoughnut.ExplodeFactor">
            <summary>
            Exploded sector offset ratio relative to radius. Value should be in [0..1.0) range.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleDoughnut.Clockwise">
            <summary>
            If true, clockwise direction will be used to draw chart. Default value is false.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleDoughnut.OutsideLabels">
            <summary>
            Get or sets whether do draw labels outside the pies
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleDoughnut.StartAngle">
            <summary>
            First pie's angle
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.bubbleShape">
            <summary>
            Shape to draw bubbles
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.maxBubbleSizeFactor">
            <summary>
            maximal bubble size in percentage to minimal(AxisX,AxisY) width
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.maxValue">
            <summary>
            the bubble size for values above this will be maxBubbleSize
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.minValue">
            <summary>
            the bubble size for values below this will be 1 pixel
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.BubbleShape">
            <summary>
            Gets or sets bubble shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.MaxBubbleSizeFactor">
            <summary>
            Get or sets MaxBubbleSizeFactor property.
            MaxBubbleSizeFactor specifies maximal bubble size in percentage to minimal(AxisX,AxisY) width
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.MaxValue">
            <summary>
            Get or sets MaxValue property. MaxValue specifies the bubble size for values above this will be maxBubbleSize.
            Pass double.NaN to calculate automatically
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBubble.MinValue">
            <summary>
            Get or Sets MinValue property. MinValue specifies the bubble size for values below this will be 1 pixel
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.OutsideLabels">
            <summary>
            gets or sets whether or not labels are drawn outside of the funnel 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.MinPointHeight">
            <summary>
            gets or sets minimum height of a Funnel chart data point measured in relative coordinates
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.PointGapPct">
            <summary>
            gets or sets the gap size between the points of a Funnel chart measured in relative coordinates. Values range from 0-100
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.BaseStyle">
            <summary>
            gets or sets the Funnel chart 3D drawing style as a valid BaseStyle enumeration value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.OutsideLabelsPlacement">
            <summary>
            gets or sets the Funnel chart data point label placement as a valid OutsideLabelsAlignment enumeration value when OutsideLabels is set to True
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.FunnelStyle">
            <summary>
            gets or sets the Funnel chart style as a valid FunnelStyle enumeration value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.NeckWidth">
            <summary>
            gets or sets the Funnel chart neck width. This is only applicable when the FunnelStyle property is set to YIsHeight. Default value is 5
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.NeckHeight">
            <summary>
            gets or sets the Funnel chart neck height. This is only applicable when the FunnelStyle property is set to YIsHeight. Default value is 5
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.CalloutLine">
            <summary>
            gets or sets the callout line style. Default value is black, 1pt line
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleFunnelPyramid.RotationAngle">
            <summary>
            gets or sets start rotation angle. Default value is 0 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBezier.Tension">
            <summary>
            A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleBezier3D.Tension">
            <summary>
            A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleKagi.ReversalType">
            <summary>
            Gets or sets the type of stored reversal amount.
            Because the reversal amount can be a percantage or fixed amount.
            Default value is Fixed
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleKagi.ReversalAmount">
            <summary>
            Gets or sets when a new Kagi line should be drawn.
            This value may either be a percentage or a fixed amount.
            Default value is 1
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleKagi.UpswingLine">
            <summary>
            Gets or sets the upswing line style. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleKagi.DownswingLine">
            <summary>
            Gets or sets the downswing line style. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleKagi3D.Width">
            <summary>
            Gets or sets line Width property. Width property specifies line thickness in Z-coordinate.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleKagi3D.BoxUpswingBackdrop">
            <summary>
            Gets or sets the backdrop information to use when the Kagi3D chart is upswing. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleKagi3D.BoxDownswingBackdrop">
            <summary>
            Gets or sets the backdrop information to use when the Kagi3D chart is an downswing.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleRenko.BoxSize">
            <summary>
            Gets or sets the "brick" size to use.
            Default value is 1
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleRenko.Line">
            <summary>
            Gets or sets Line property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleRenko.BoxUpswingBackdrop">
            <summary>
            Gets or sets the backdrop information to use when the Renko chart is on an uptrend. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleRenko.BoxDownswingBackdrop">
            <summary>
            Gets or sets the backdrop information to use when the Renko chart is on an downtrend. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStylePointAndFigure.BoxSize">
            <summary>
            Gets or sets the symbol box size to use.
            Default value is 1
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStylePointAndFigure.ReversalAmount">
            <summary>
            Gets or sets when a new symbol box should be drawn.
            It is measured in boxes.
            Default value is 3
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStylePointAndFigure.UptrendLine">
            <summary>
            Gets or sets Line property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStylePointAndFigure.DowntrendLine">
            <summary>
            Gets or sets the backdrop information to use when the Renko chart is on an uptrend. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleThreeLineBreak.NewLineBreak">
            <summary>
            Gets or sets the number of lines to use in the Three Line Break chart.
            Default value is 3
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleThreeLineBreak.Line">
            <summary>
            Gets or sets Line property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleThreeLineBreak.BoxUpswingBackdrop">
            <summary>
            Gets or sets the backdrop information to use when the Renko chart is on an uptrend. 
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesStyleThreeLineBreak.BoxDownswingBackdrop">
            <summary>
            Gets or sets the backdrop information to use when the Renko chart is on an downtrend. 
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView">
            <summary>
            SeriesView represents series in particular ChartLayer with its own visual attributes
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.layer">
            <summary>
            Chart layer, get initialized automatically when series view is added to particular layer
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.Visible">
            <summary>
            Gets or sets Visible property. Visible property specifies whether series is
            visible in the ChartArea.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.SeriesSet">
            <summary>
            Gets series represented by this object
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.LabelsDataProviders">
            <summary>
            Gets data represented by this object for the purpose of displaying on markers and tooltips
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.Series">
            <summary>
            Gets first series represented by this object
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.PointCount">
            <summary>
            Gets point count i.e. number of "complete" series
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.Marker">
            <summary>
            Gets or sets Marker property for entire series. Can be overriden with
            <code>DataPoint.Marker</code> property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.PointNameProvider">
            <summary>
            Get or sets data point names provider
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.Style">
            <summary>
            Gets or sets Style property. Style property specifies rendering style for the data series.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.DisplayInLegend">
            <summary>
            DisplayInLegend determines whether series should be displayed on legend
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.LegendPerPoints">
            <summary>
            LegendPerPoints determines how the legend should be built.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.Name">
            <summary>
            Gets or sets series name.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.LegendText">
            <summary>
            Gets or sets series name in the legend.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.Layer">
            <summary>
            Gets or sets layer this series is bound to
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.GetPointBorderStyle(System.Int32)">
            <summary>
            Returns specified point's border line style
            </summary>
            <param name="pointIndex">point's index</param>
            <returns>Border line style</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView.GetPointFillStyle(System.Int32,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Returns specified point's fill style
            </summary>
            <param name="pointIndex">point's index</param>
            <param name="rectangleToFeet">shape's bounding rectangle</param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesViewCollection">
            <summary>
            ChartObject collection class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesViewCollection.#ctor(GrapeCity.ActiveReports.Chart.Core.Objects.ChartLayer)">
            <summary>
            Initialized a new instance of the SeriesViewCollection.
            </summary>
            <param name="parentLayer">chart layer object to update all containing seriesview's Layer property to.
            SeriesView.Layer is not updated if layer is set to null.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesViewCollection.Add(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView)">
            <summary>
            Adds series view to collection
            </summary>
            <param name="anObject">Series view to add</param>
            <returns>index of added object in collection</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesViewCollection.Remove(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView)">
            <summary>
            removes series view from collection
            </summary>
            <param name="anObject"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.SeriesViewCollection.IndexOf(GrapeCity.ActiveReports.Chart.Core.Objects.SeriesView)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Title">
            <summary>
            Title class
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Title.IsVertical">
            <summary>
            Gets or sets whether title is vertically oriented. Depending on orientation elasticity will be applied.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Title.Text">
            <summary>
            Gets or sets Text property. Text property specifies text to display with this <code>Title</code> object.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Title.Alignment">
            <summary>
            Gets or sets Alignment property. Alignment property specifies how text should be aligned
            within bounding rectangle of Title object.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.Wall">
            <summary>
            Summary description for Wall.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.Wall._wallRanges">
            <summary>
            WallRanges to be drawn on the wall, set this property before DrawAll() and clear after
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.Wall.Width">
            <summary>
            Gets or sets Width property. Width property specifies thickness for wall
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.Wall.draw(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draws wall object. MODIFIES device's Plane attribute
            </summary>
            <param name="device"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Objects.WallRange">
            <summary>
            WallRange class
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.Objects.WallRange.topLevelPrimaryAxis">
            <summary>
            top level axis (set in Prepare() call)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.WallRange.PrimaryAxis">
            <summary>
            Gets or sets PrimaryAxis property.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.WallRange.StartValue">
            <summary>
            Gets or sets Range's start value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.WallRange.EndValue">
            <summary>
            Gets or sets Range's end value
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.WallRange.AdjacentAxes">
            <summary>
            Gets or sets adjacent axes collection object.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.Objects.WallRange.DrawOnTopOfGridLines">
            <summary>
            Gets or sets DrawOnTopOfGridLines property. If DrawOnTopOfGridLines is set to true WallRange
            will be drawn on top of wall grid lines.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.WallRanges.Add(GrapeCity.ActiveReports.Chart.Core.Objects.WallRange)">
            <summary>
            Adds wall range to the collection
            </summary>
            <param name="anObject">WallRange object to add</param>
            <returns>index of added WallRange in collection</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.WallRanges.Remove(GrapeCity.ActiveReports.Chart.Core.Objects.WallRange)">
            <summary>
            removes WallRange object from collection
            </summary>
            <param name="anObject"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.WallRanges.Item(System.Int32)">
            <summary>
            returns WallRange from collection
            </summary>
            <param name="index">WallRange's index in collection</param>
            <returns>WallRange by given index</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Objects.WallRanges.IndexOf(GrapeCity.ActiveReports.Chart.Core.Objects.WallRange)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.DrawParts">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.Engine">
            <summary>
            SharpChart core object.
            </summary>
            
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.Engine.DrawException(System.Exception,System.Drawing.RectangleF)">
            <summary>
            Draws exception info
            </summary>
            <param name="e"></param>
            <param name="chartRect"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider">
            <summary>
            interface to provide series data to SharpGraph core
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider.DataGeneration">
            <summary>
            Gets generation number. Used to verify whether we need to flush cached data if any.
            In case of data is modified provider should return different value.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider.Count">
            <summary>
            Gets item count
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider.Item(System.Int32)">
            <summary>
            Gets series data at the index specified
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider.IsEmpty(System.Int32)">
            <summary>
            returns true if specified point is empty (emtiness is specified by the user)
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider.IsNull(System.Int32)">
            <summary>
            Gets true if the value at the specified index is empty
            </summary>
            <param name="index">The value index to verify</param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.ISeriesDataProvider.IsDateTime">
            <summary>
            return true if provider represents datetime values
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.NullDataProvider">
            <summary>
            stub provider
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Core.SequenceDataProvider._delta">
            <summary>
            delta between subsequent series points
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.SequenceDataProvider.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="minValue">Starting sequence value</param>
            <param name="maxValue">Ending value</param>
            <param name="delta"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.SeriesDataProxy.DataProvider">
            <summary>
            Gets or sets data provider
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.SeriesDataProxy.CalcMinMaxValue(System.Double@,System.Double@)">
            <summary>
            Gets minimum and maximum values of series data
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.SeriesDataProxy.CalcAggValue(GrapeCity.ActiveReports.Chart.Core.AggregateFunc,System.Int32,System.Int32)">
            <summary>
            Calculates and returns aggregate function on entire series
            </summary>
            <param name="func">faggregate function identifier</param>
            <param name="startPoint">Series starting point</param>
            <param name="count">Number of data point to calculate aggregate on</param>
            <returns>calculated value</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.DataProxyCollection">
            <summary>
            Class representing collection of series
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.DataProxyCollection.Add(GrapeCity.ActiveReports.Chart.Core.SeriesDataProxy)">
            <summary>
            Adds series to the data set
            </summary>
            <param name="anObject">Series object to add</param>
            <returns>index of Series added to the collection</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.DataProxyCollection.Remove(GrapeCity.ActiveReports.Chart.Core.SeriesDataProxy)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.ActiveReports.Chart.Core.SeriesDataProxy"/> to remove from the collection.</param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.DataProxyCollection.Item(System.Int32)">
            <summary>
            Get or sets series from the collection
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.DataProxyCollection.IndexOf(GrapeCity.ActiveReports.Chart.Core.SeriesDataProxy)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.CoreUtil.DerivableDouble">
            <summary>
            Double value with Derived flag.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.CoreUtil.StringArray">
            <summary>
            Simple array of string data
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.CoreUtil.StringArray.Add(System.String)">
            <summary>
            Adds new value to the end of the string array
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.CoreUtil.StringArray.CopyFrom(System.String[])">
            <summary>
            Initializes object from array of strings
            </summary>
            <param name="initialValues"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Core.CoreUtil.StringArray.Item(System.Int32)">
            <summary>
            Gets or sets data at given position. If you set string with non-existent index array will grow to that index.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.CoreUtil.StringArray.IndexOf(System.String)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <param name="val">The string to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array - 1.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Core.CoreUtil.RegisteredDrawHelper">
            <summary>
            Internal class to simplify handling of so called Registered drawing used for click-testing implementation
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.CoreUtil.IsValueBetween(System.Double,System.Double,System.Double)">
            <summary>
            Returns true if value specified is between min and max value
            </summary>
            <param name="value">value to verify</param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Core.CoreUtil.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes action for each sequence item
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs">
            <summary>
            Provides data for <see cref="!:LocateCredentials" /> event.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs.DataSource">
            <summary>
            Gets the data source to locate credentials for.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs.ReportPath">
            <summary>
            Gets the name of the report to locate credentials for.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs.UserName">
            <summary>
            Gets ot sets the user name of the credentials to be located.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs.Password">
            <summary>
            Gets ot sets the password of the credentials to be located.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs.PromptText">
            <summary>
            Gets the text of prompt of the locate credentials request.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs.Name">
            <summary>
            Gets the name of the datasource.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs.#ctor(System.Object,System.String,System.String,System.String)">
            <summary>
            Initializes new instance of <see cref="T:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventArgs" /> class.
            </summary>
            <param name="dataSource">The data source to locate credentials for.</param>
            <param name="reportPath">The name of the report to locate credentials for.</param>
            <param name="promptText">The text of prompt of the locate credentials request.</param>
            <param name="name">The datasource's name</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Designer.LocateCredentialsEventHandler">
            <summary>
            Represents method that handles <see cref="!:LocateCredentials"/> event.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Globalization.ResCategoryAttribute">
            <summary>
            WebCategoryAttribute overrides and provides an implementation of the CategoryAttribute class's GetLocalizedString method.
            This class aids in localizing.
            The key provided will be prefixed with by this class "Category_", so all Category strings in the strings.resx should be prefixed with "Category_".
            The Category_Prefix is used due to the CategoryAttribute.GetLocalizedString function.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Globalization.ResCategoryAttribute.#ctor(System.String)">
            <summary>
            The Category the property should be in.
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Globalization.ResCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized Category string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Globalization.ResDescriptionAttribute">
            <summary>
            A replacement for DescriptionAttribute that provides localized string support. 
            The key provided will be prefixed with by this class "Description_", so all Description strings in the strings.resx should be prefixed with "Description_".
            The Description_ prefix is used to enforce following the rules.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Globalization.ResDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the SRDescriptionAttribute class with the specified localizable SR resource key.
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Globalization.strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Category_Chart">
            <summary>
              Looks up a localized string similar to Chart.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Category_ChartArea">
            <summary>
              Looks up a localized string similar to Chart Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Category_ChartArea_ChartBox">
            <summary>
              Looks up a localized string similar to Chart Box.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Category_Layout">
            <summary>
              Looks up a localized string similar to Layout.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Category_LegendItem_Marker">
            <summary>
              Looks up a localized string similar to Marker.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Category_Title_TextItem">
            <summary>
              Looks up a localized string similar to Text Item.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Category_WallRange">
            <summary>
              Looks up a localized string similar to Wall Range.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_AnnotationLine">
            <summary>
              Looks up a localized string similar to Annotation line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_AnnotationTextBar">
            <summary>
              Looks up a localized string similar to Annotation text.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_Axis">
            <summary>
              Looks up a localized string similar to Axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_BackdropItem">
            <summary>
              Looks up a localized string similar to Backdrop.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_ChartArea">
            <summary>
              Looks up a localized string similar to Chart Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_LabelInfo">
            <summary>
              Looks up a localized string similar to Label.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_Legend">
            <summary>
              Looks up a localized string similar to Legend.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_PlaneItem">
            <summary>
              Looks up a localized string similar to Wall.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_Series">
            <summary>
              Looks up a localized string similar to Series.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_SharpGraph">
            <summary>
              Looks up a localized string similar to Entire Chart.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_Title">
            <summary>
              Looks up a localized string similar to Title.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Class_Name_WallRange">
            <summary>
              Looks up a localized string similar to Wall Range.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Control_PropertiesPane_DefTitle">
            <summary>
              Looks up a localized string similar to Click object in the preview window to display its properties.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Control_PropertiesPane_ErrText">
            <summary>
              Looks up a localized string similar to EXCEPTION: {0}.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Arrow">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_AxisType">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_DisplayScale">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_LabelFont">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_LabelFormat">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Labels">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_LabelsAtBottom">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_LabelsGap">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_LabelsInside">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_LabelsVisible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Line">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_MajorTick">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Max">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Min">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_MinorTick">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Position">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Scale">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Scroll">
            <summary>
              Looks up a localized string similar to Axis scrollbar definition.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_SmartLabels">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_StaggerLabels">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_TickOffset">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Title">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_TitleFont">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Axis_Visible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_BackColor">
            <summary>
              Looks up a localized string similar to Scrollbar background color.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_ButtonColor">
            <summary>
              Looks up a localized string similar to Buttons face color.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_Enabled">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_Length">
            <summary>
              Looks up a localized string similar to AxisScroll_Length.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_OutlineColor">
            <summary>
              Looks up a localized string similar to Scrollbar outline color.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_Position">
            <summary>
              Looks up a localized string similar to AxisScroll_Position.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_ScrollLength">
            <summary>
              Looks up a localized string similar to Scrolling area length.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_ScrollPosition">
            <summary>
              Looks up a localized string similar to Scrolling position within axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_ScrollStepSize">
            <summary>
              Looks up a localized string similar to Step scrolling size. Step scrolling is occurred when user clicks scroll buttons..
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_StepSize">
            <summary>
              Looks up a localized string similar to AxisScroll_StepSize.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_Visible">
            <summary>
              Looks up a localized string similar to Specifies whether scroll is available.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_AxisScroll_Width">
            <summary>
              Looks up a localized string similar to Scrollbar width in pixels.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Border_Line">
            <summary>
              Looks up a localized string similar to Border line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Border_ShadowColor">
            <summary>
              Looks up a localized string similar to Shadow color.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Border_ShadowWeight">
            <summary>
              Looks up a localized string similar to Shadow weight.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_Axes">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_Border">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_Light">
            <summary>
              Looks up a localized string similar to Light settings.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_Padding">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_Projection">
            <summary>
              Looks up a localized string similar to Projection settings.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_SeriesLine">
            <summary>
              Looks up a localized string similar to ChartArea_SeriesLine.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_SwapAxesDirection">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_ViewPoint">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_WallRanges">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_WallXY">
            <summary>
              Looks up a localized string similar to Wall XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_WallXZ">
            <summary>
              Looks up a localized string similar to Floor.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_WallYZ">
            <summary>
              Looks up a localized string similar to Wall YZ.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_ChartArea_ZDepthRatio">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_DataPoint_DisplayInLegend">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_DataPoint_IsEmpty">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_DataPoint_LegendText">
            <summary>
              Looks up a localized string similar to Legend text.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_DataPoint_Properties">
            <summary>
              Looks up a localized string similar to Custom data point properties.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_DataPoint_XValue">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_DataPoint_YValues">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Downswing_Line">
            <summary>
              Looks up a localized string similar to Downswing.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_FontInfo_Angle">
            <summary>
              Looks up a localized string similar to Text output angle in degrees.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_FontInfo_Color">
            <summary>
              Looks up a localized string similar to Text color.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_FontInfo_Font">
            <summary>
              Looks up a localized string similar to GDI+ Font.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_GridLayout_Columns">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_GridLayout_Rows">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Item_AntiAliasMode">
            <summary>
              Looks up a localized string similar to AntiAlias mode.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Item_ContextMenu">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Item_Name">
            <summary>
              Looks up a localized string similar to Item name used to reference the item.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Label_Alignment">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Label_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Label_Border">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Label_Font">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Label_Format">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_Alignment">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_Border">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_DockArea">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_DockInsideArea">
            <summary>
              Looks up a localized string similar to Floating legend.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_Footer">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_GridLayout">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_Header">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_LabelsFont">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_LegendItems">
            <summary>
              Looks up a localized string similar to Custom legend items.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_MarginX">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_MarginY">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Legend_Visible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LegendItem_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LegendItem_Border">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LegendItem_Line">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LegendItem_Marker">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LegendItem_Style">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LegendItem_Text">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Light_DirectionalRatio">
            <summary>
              Looks up a localized string similar to Directional to ambient light intencity ratio.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Light_Source">
            <summary>
              Looks up a localized string similar to Light source position.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Light_Type">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LineColor">
            <summary>
              Looks up a localized string similar to Color of the line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LineStyle">
            <summary>
              Looks up a localized string similar to Style of the line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_LineWeight">
            <summary>
              Looks up a localized string similar to Weight of the line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Marker_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Marker_Label">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Marker_LabelDistanceFactor">
            <summary>
              Looks up a localized string similar to Marker_LabelDistanceFactor.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Marker_Line">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Marker_Size">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Marker_Style">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Projection_DX">
            <summary>
              Looks up a localized string similar to Origin offset by X axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Projection_DY">
            <summary>
              Looks up a localized string similar to Origin offset by Y axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Projection_HorizontalRotation">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Projection_Type">
            <summary>
              Looks up a localized string similar to Projection type.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Projection_VerticalRotation">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_Annotations">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_AxisX">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_AxisY">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_ChartArea">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_ColorPalette">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_DisplayInLegend">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_Legend">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_LegendItemsMode">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_LegendText">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_Name">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_Points">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_Properties">
            <summary>
              Looks up a localized string similar to Custom type-specific properties.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_Type">
            <summary>
              Looks up a localized string similar to Chart type.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_ValueMembersY">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_ValueMemberX">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_Visible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Series_ZOrder">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_AutoRefresh">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_Backdrop">
            <summary>
              Looks up a localized string similar to Background style.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_Border">
            <summary>
              Looks up a localized string similar to Chart border style.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_ChartAreas">
            <summary>
              Looks up a localized string similar to Chart areas collection.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_ColorPalette">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_DataSource">
            <summary>
              Looks up a localized string similar to Chart data source.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_DeviceMode">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_GridLayout">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_Legends">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_Series">
            <summary>
              Looks up a localized string similar to Series collection.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_SeriesLine">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_Titles">
            <summary>
              Looks up a localized string similar to Chart titles.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_SharpGraph_UIOptions">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Tick_GridLine">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Tick_Length">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Tick_Line">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Tick_Step">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Tick_Visible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Alignment">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Border">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_DockArea">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Docking">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Font">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Name">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Text">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Title_Visible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Upswing_Line">
            <summary>
              Looks up a localized string similar to Upswing.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Wall_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Wall_Visible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_Wall_Width">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_AdjacentAxes">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_Backdrop">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_Border">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_DrawOnTopOfGridLines">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_EndValue">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_PrimaryAxis">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_StartValue">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Description_WallRange_Visible">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_BottomLeft">
            <summary>
              Looks up a localized string similar to BottomLeft.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_BottomRight">
            <summary>
              Looks up a localized string similar to BottomRight.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_Center">
            <summary>
              Looks up a localized string similar to Center.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_Left">
            <summary>
              Looks up a localized string similar to Left.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_Right">
            <summary>
              Looks up a localized string similar to Right.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_TopLeft">
            <summary>
              Looks up a localized string similar to TopLeft.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_Alignment_TopRight">
            <summary>
              Looks up a localized string similar to TopRight.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ArrowType_Lines">
            <summary>
              Looks up a localized string similar to Lines.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ArrowType_None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ArrowType_Triangle">
            <summary>
              Looks up a localized string similar to Triangle.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_BackdropStyle_Gradient">
            <summary>
              Looks up a localized string similar to Gradient.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_BackdropStyle_Pattern">
            <summary>
              Looks up a localized string similar to Pattern.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_BackdropStyle_Picture">
            <summary>
              Looks up a localized string similar to Picture.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_BackdropStyle_Solid">
            <summary>
              Looks up a localized string similar to Solid.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_BackdropStyle_Transparent">
            <summary>
              Looks up a localized string similar to (none).
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Area">
            <summary>
              Looks up a localized string similar to Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Area3D">
            <summary>
              Looks up a localized string similar to Area 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Bar2D">
            <summary>
              Looks up a localized string similar to Bar 2D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Bar3D">
            <summary>
              Looks up a localized string similar to Bar 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Bezier">
            <summary>
              Looks up a localized string similar to Bezier.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_BezierFlat">
            <summary>
              Looks up a localized string similar to Bezier.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_BezierFlatXY">
            <summary>
              Looks up a localized string similar to Bezier XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_BezierXY">
            <summary>
              Looks up a localized string similar to Bezier XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Bubble">
            <summary>
              Looks up a localized string similar to Bubble.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_BubbleXY">
            <summary>
              Looks up a localized string similar to Bubble XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Candle">
            <summary>
              Looks up a localized string similar to Candle.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_ClusteredBar">
            <summary>
              Looks up a localized string similar to Clustered Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Doughnut">
            <summary>
              Looks up a localized string similar to Doughnut.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Doughnut3D">
            <summary>
              Looks up a localized string similar to Doughnut 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Funnel">
            <summary>
              Looks up a localized string similar to Funnel.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Funnel3D">
            <summary>
              Looks up a localized string similar to Funnel 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Gantt">
            <summary>
              Looks up a localized string similar to Gantt.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Gantt3D">
            <summary>
              Looks up a localized string similar to Gantt 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_HiLo">
            <summary>
              Looks up a localized string similar to HiLo.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_HiLoOpenClose">
            <summary>
              Looks up a localized string similar to HiLoOpenClose.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_HorizontalBar">
            <summary>
              Looks up a localized string similar to Horizontal Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_HorizontalBar3D">
            <summary>
              Looks up a localized string similar to Horizontal Bar 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Kagi">
            <summary>
              Looks up a localized string similar to Kagi.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Kagi3D">
            <summary>
              Looks up a localized string similar to Kagi 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Line3D">
            <summary>
              Looks up a localized string similar to Line 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_LineXY">
            <summary>
              Looks up a localized string similar to Line XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_PlotXY">
            <summary>
              Looks up a localized string similar to Plot XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_PointAndFigure">
            <summary>
              Looks up a localized string similar to Point And Figure.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Pyramid">
            <summary>
              Looks up a localized string similar to Pyramid.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Pyramid3D">
            <summary>
              Looks up a localized string similar to Pyramid 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Renko">
            <summary>
              Looks up a localized string similar to Renko.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Renko3D">
            <summary>
              Looks up a localized string similar to Renko 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_Scatter">
            <summary>
              Looks up a localized string similar to Scatter.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_StackedArea">
            <summary>
              Looks up a localized string similar to Stacked Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_StackedArea100Pct">
            <summary>
              Looks up a localized string similar to Stacked Area 100%.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_StackedBar">
            <summary>
              Looks up a localized string similar to Stacked Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_StackedBar100Pct">
            <summary>
              Looks up a localized string similar to Stacked Bar 100%.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_StackedBar3D">
            <summary>
              Looks up a localized string similar to Stacked Bar 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_StackedBar3D100Pct">
            <summary>
              Looks up a localized string similar to StackedBar 3D 100%.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_ThreeLineBreak">
            <summary>
              Looks up a localized string similar to Three Line Break.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartType_ThreeLineBreak3D">
            <summary>
              Looks up a localized string similar to Three Line Break 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartTypeGroup_All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartTypeGroup_Area">
            <summary>
              Looks up a localized string similar to Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartTypeGroup_Bar">
            <summary>
              Looks up a localized string similar to Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartTypeGroup_Doughnut">
            <summary>
              Looks up a localized string similar to Pie/Doughnut.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartTypeGroup_Financial">
            <summary>
              Looks up a localized string similar to Financial.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartTypeGroup_Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_ChartTypeGroup_PointBubble">
            <summary>
              Looks up a localized string similar to Point/Bubble.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_DockType_Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_DockType_Left">
            <summary>
              Looks up a localized string similar to Left.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_DockType_Right">
            <summary>
              Looks up a localized string similar to Right.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_DockType_Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_GradientType_DiagonalDown">
            <summary>
              Looks up a localized string similar to DiagDown.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_GradientType_DiagonalUp">
            <summary>
              Looks up a localized string similar to DiagUp.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_GradientType_FromCenter">
            <summary>
              Looks up a localized string similar to FromCenter.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_GradientType_FromCorner">
            <summary>
              Looks up a localized string similar to FromCorner.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_GradientType_Horizontal">
            <summary>
              Looks up a localized string similar to Horizontal.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_GradientType_Vertical">
            <summary>
              Looks up a localized string similar to Vertical.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_Circle">
            <summary>
              Looks up a localized string similar to Circle.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_Cross">
            <summary>
              Looks up a localized string similar to Cross.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_Diamond">
            <summary>
              Looks up a localized string similar to Diamond.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_InvTriangle">
            <summary>
              Looks up a localized string similar to Inverted Triangle.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_Point">
            <summary>
              Looks up a localized string similar to Point.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_Pyramid">
            <summary>
              Looks up a localized string similar to Pyramid.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_Square">
            <summary>
              Looks up a localized string similar to Square.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_MarkerStyle_Triangle">
            <summary>
              Looks up a localized string similar to Triangle.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_StdLegendMarker_Area">
            <summary>
              Looks up a localized string similar to Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_StdLegendMarker_Bar">
            <summary>
              Looks up a localized string similar to Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_StdLegendMarker_Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_StdLegendMarker_None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Area">
            <summary>
              Looks up a localized string similar to Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_AreaFlat">
            <summary>
              Looks up a localized string similar to Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Bar">
            <summary>
              Looks up a localized string similar to Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_BarCylinder">
            <summary>
              Looks up a localized string similar to Bar/Cylinder.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_BarFlat">
            <summary>
              Looks up a localized string similar to Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_BarPyramid">
            <summary>
              Looks up a localized string similar to Bar/Pyramid.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Bezier">
            <summary>
              Looks up a localized string similar to Bezier.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_BezierFlat">
            <summary>
              Looks up a localized string similar to Bezier.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_BezierFlatXY">
            <summary>
              Looks up a localized string similar to Bezier XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_BezierXY">
            <summary>
              Looks up a localized string similar to Bezier XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Bubble">
            <summary>
              Looks up a localized string similar to Bubble.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_BubbleXY">
            <summary>
              Looks up a localized string similar to Bubble XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_CandleStick">
            <summary>
              Looks up a localized string similar to Candle stick.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_ClusteredBar">
            <summary>
              Looks up a localized string similar to Clustered Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Doughnut">
            <summary>
              Looks up a localized string similar to Doughnut.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_DoughnutFlat">
            <summary>
              Looks up a localized string similar to Doughnut.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Funnel">
            <summary>
              Looks up a localized string similar to Funnel.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_FunnelFlat">
            <summary>
              Looks up a localized string similar to Funnel.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Gantt">
            <summary>
              Looks up a localized string similar to Gantt.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_GanttFlat">
            <summary>
              Looks up a localized string similar to Gantt.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_HiLo">
            <summary>
              Looks up a localized string similar to HiLo.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_HiLoClose">
            <summary>
              Looks up a localized string similar to Stock close only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_HiLoOpen">
            <summary>
              Looks up a localized string similar to Stock open only.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_HiLoOpenClose">
            <summary>
              Looks up a localized string similar to Stock.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_HorizontalBar2D">
            <summary>
              Looks up a localized string similar to Horizontal Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_HorizontalBar3D">
            <summary>
              Looks up a localized string similar to Horizontal Bar 3D.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Kagi">
            <summary>
              Looks up a localized string similar to Kagi.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_KagiFlat">
            <summary>
              Looks up a localized string similar to Kagi.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_LineFlat">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_LineXY">
            <summary>
              Looks up a localized string similar to Line XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Pie">
            <summary>
              Looks up a localized string similar to Pie.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_PlotXY">
            <summary>
              Looks up a localized string similar to Plot XY.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_PointAndFigure">
            <summary>
              Looks up a localized string similar to Point And Figure.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Pyramid">
            <summary>
              Looks up a localized string similar to Pyramid.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_PyramidFlat">
            <summary>
              Looks up a localized string similar to Pyramid.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Renko">
            <summary>
              Looks up a localized string similar to Renko.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_RenkoFlat">
            <summary>
              Looks up a localized string similar to Renko.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Ring">
            <summary>
              Looks up a localized string similar to Ring.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_Scatter">
            <summary>
              Looks up a localized string similar to Scatter.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedArea">
            <summary>
              Looks up a localized string similar to Stacked Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedArea100">
            <summary>
              Looks up a localized string similar to Stacked Area 100%.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedArea100Flat">
            <summary>
              Looks up a localized string similar to Stacked Area 100%.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedAreaFlat">
            <summary>
              Looks up a localized string similar to Stacked Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedBar">
            <summary>
              Looks up a localized string similar to Stacked Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedBar100">
            <summary>
              Looks up a localized string similar to Stacked Bar 100%.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedBar100Flat">
            <summary>
              Looks up a localized string similar to Stacked Bar 100%.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_StackedBarFlat">
            <summary>
              Looks up a localized string similar to Stacked Bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_ThreeLineBreak">
            <summary>
              Looks up a localized string similar to Three Line Break.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Enum_WizardChartType_ThreeLineBreakFlat">
            <summary>
              Looks up a localized string similar to Three Line Break.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Error_AddCollectionItem_MsgBody">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Error_AddCollectionItem_MsgTitle">
            <summary>
              Looks up a localized string similar to Failed to add new item.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Error_CopyControl_Failed">
             <summary>
               Looks up a localized string similar to Failed to clone control due to the following error:
            {0}
            
            Stack:
            {2}.
             </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Error_CopyControl_MsgTitle">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Argument_InvalidAxisScaleValue">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid value for &apos;{1}&apos;. &apos;{1}&apos; must be a power of 10..
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Argument_InvalidRange">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid value for &apos;{1}&apos;. &apos;{1}&apos; must be greater than or equal to {2} and less than or equal to {3}..
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Argument_InvalidValueNegative">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid value for &apos;{1}&apos;. &apos;{1}&apos; must be a positive value..
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Argument_NotNullString">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; can&apos;t be null or empty.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_CantInsertStandardAxis">
            <summary>
              Looks up a localized string similar to Standard axes can&apos;t be moved. Index should be more or equals to {0}.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_CantRemoveStandardAxis">
            <summary>
              Looks up a localized string similar to Standard axes can&apos;t be removed.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_CantSetStandardAxis">
            <summary>
              Looks up a localized string similar to Standard axes can&apos;t be replaced.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_GridLayout_MaxCount">
            <summary>
              Looks up a localized string similar to Chart can&apos;t contain more then {0} chart areas..
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Invalid_Format">
            <summary>
              Looks up a localized string similar to Format string has invalid syntax.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Invalid_ValueMember">
            <summary>
              Looks up a localized string similar to Invalid ValueMember exception.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_InvalidStyleName">
            <summary>
              Looks up a localized string similar to Invalid style name: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_NonUniqueName">
            <summary>
              Looks up a localized string similar to {0} named &apos;{1}&apos; already defined.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Requires_Axis_Category">
            <summary>
              Looks up a localized string similar to Chart type &apos;{0}&apos; requires AxisX to be categorical, but it is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Exception_Requires_Axis_Numerical">
            <summary>
              Looks up a localized string similar to Chart type &apos;{0}&apos; requires AxisX to be numerical, but it is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_AnnotationLine">
            <summary>
              Looks up a localized string similar to Annotation line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_AnnotationTextBar">
            <summary>
              Looks up a localized string similar to Annotation text.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Axis">
            <summary>
              Looks up a localized string similar to Axis.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Backdrop">
            <summary>
              Looks up a localized string similar to Backdrop.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_BodyDownswingBackdrop">
            <summary>
              Looks up a localized string similar to Body Downswing Backdrop.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_BodyUpswingBackdrop">
            <summary>
              Looks up a localized string similar to Body Upswing Backdrop.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_BodyWidth">
            <summary>
              Looks up a localized string similar to Body Width.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Border">
            <summary>
              Looks up a localized string similar to Border.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_BorderLine">
            <summary>
              Looks up a localized string similar to Border line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_CalloutLine">
            <summary>
              Looks up a localized string similar to Callout Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_ChartArea">
            <summary>
              Looks up a localized string similar to Chart Area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_CloseLine">
            <summary>
              Looks up a localized string similar to Close Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_DownswingLine">
            <summary>
              Looks up a localized string similar to Downswing Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Font">
            <summary>
              Looks up a localized string similar to Font.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_HiloLine">
            <summary>
              Looks up a localized string similar to Hilo Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Label">
            <summary>
              Looks up a localized string similar to Label.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_LabelFont">
            <summary>
              Looks up a localized string similar to Label font.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_LabelInfo">
            <summary>
              Looks up a localized string similar to Label.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_LabelsFont">
            <summary>
              Looks up a localized string similar to Labels font.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Legend">
            <summary>
              Looks up a localized string similar to Legend.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_LineBackdrop">
            <summary>
              Looks up a localized string similar to Line Backdrop.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Marker">
            <summary>
              Looks up a localized string similar to Marker.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_OpenLine">
            <summary>
              Looks up a localized string similar to Open Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_PlaneItem">
            <summary>
              Looks up a localized string similar to Wall.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Series">
            <summary>
              Looks up a localized string similar to Series.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_SeriesLine">
            <summary>
              Looks up a localized string similar to Series line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_SharpGraph">
            <summary>
              Looks up a localized string similar to Entire Chart.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_TickLen">
            <summary>
              Looks up a localized string similar to Tick Length.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Title">
            <summary>
              Looks up a localized string similar to Title.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_TitleFont">
            <summary>
              Looks up a localized string similar to Title font.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_Tooltip">
            <summary>
              Looks up a localized string similar to Tooltip.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_UpswingLine">
            <summary>
              Looks up a localized string similar to Upswing Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_WallRange">
            <summary>
              Looks up a localized string similar to Wall Range.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.Property_Name_WickLine">
            <summary>
              Looks up a localized string similar to Wick Line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.String_NoChartAreas">
            <summary>
              Looks up a localized string similar to No chart areas specified.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.StyleManager_Item_Custom">
            <summary>
              Looks up a localized string similar to (Custom).
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.StyleManager_Item_Default">
            <summary>
              Looks up a localized string similar to (Default).
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Globalization.strings.StyleManager_Item_Null">
            <summary>
              Looks up a localized string similar to (null).
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Backdrop">
            <summary>
            Specifies the settings used to draw object's background.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Style">
            <summary>
            Designates type of backdrop (i.e. solid, gradient, etc)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Color">
            <summary>
            Primary color to fill
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Color2">
            <summary>
            Second color used for gradient effects and patterns
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Gradient">
            <summary>
            Used only for gradient backdrops
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Pattern">
            <summary>
            Used only for pattern backdrops
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Picture">
            <summary>
            Used only for picture style backdrops
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.PictureAlignment">
            <summary>
            Used only for picture style backdrops
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Alpha">
            <summary>
            Alpha level (transparency)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.IsInvisible">
            <summary>
            Return true if backdrop is not visible
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.HasTransparency">
            <summary>
            Returns true if backdrop is transparent or most likely transparent
            </summary>
            <value></value>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.CopyFrom(GrapeCity.ActiveReports.Chart.Graphics.Backdrop)">
            <summary>
            Initializes current object with the settings of another one
            </summary>
            <param name="backdrop"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Serialize(System.Runtime.Serialization.SerializationInfo,System.Boolean)">
            <summary>
            Creates an XML encoding or reconstructs object state from XML encoding
            </summary>
            <param name="info"></param>
            <param name="isLoading">Specifies whether to reconstruct object(true) or create XML encoding(false)</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor">
            <summary>
            Initializes a new instance of the BackdropInfo class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class.
            </summary>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "fill solid" style.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "fill solid" style.
            </summary>
            <param name="color"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color,System.Byte)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "fill solid" style.
            </summary>
            <param name="color"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Color,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "fill solid" style.
            </summary>
            <param name="color"></param>
            <param name="alpha"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "gradient" style.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "gradient" style.
            </summary>
            <param name="gradient"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "hatch" style.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "hatch" style.
            </summary>
            <param name="pattern"></param>
            <param name="color"></param>
            <param name="color2"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "picture" style.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class with a "picture" style.
            </summary>
            <param name="picture"></param>
            <param name="pictureAlignment"></param>
            <param name="antiAliasMode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle)">
            <summary>
            Initializes a new instance of the BackdropInfo class.
            </summary>
            <param name="style">Specifies backdrop style</param>
            <param name="color">Specifies primary color</param>
            <param name="color2">Specifies secondary color (used with hatch and gradient styles).</param>
            <param name="gradient">Specifies gradient direction (used with gradient style)</param>
            <param name="pattern">Specifies hatch pattern (used with hatch style)</param>
            <param name="picture">Specifies picture (used with picture style)</param>
            <param name="pictureAlignment">Specifies picture alignment (used with picture style)</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class.
            </summary>
            <param name="style">Specifies backdrop style</param>
            <param name="color">Specifies primary color</param>
            <param name="color2">Specifies secondary color (used with hatch and gradient styles).</param>
            <param name="gradient">Specifies gradient direction (used with gradient style)</param>
            <param name="pattern">Specifies hatch pattern (used with hatch style)</param>
            <param name="picture">Specifies picture (used with picture style)</param>
            <param name="pictureAlignment">Specifies picture alignment (used with picture style)</param>
            <param name="antiAliasMode">Specifies AA settings to draw graphics</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte)">
            <summary>
            Initializes a new instance of the BackdropInfo class.
            </summary>
            <param name="style">Specifies backdrop style</param>
            <param name="color">Specifies primary color</param>
            <param name="color2">Specifies secondary color (used with hatch and gradient styles).</param>
            <param name="gradient">Specifies gradient direction (used with gradient style)</param>
            <param name="pattern">Specifies hatch pattern (used with hatch style)</param>
            <param name="picture">Specifies picture (used with picture style)</param>
            <param name="pictureAlignment">Specifies picture alignment (used with picture style)</param>
            <param name="alpha">Specifies alpha (transparency) channel</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle,System.Drawing.Color,System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.GradientType,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Image,GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle,System.Byte,GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Initializes a new instance of the BackdropInfo class.
            </summary>
            <param name="style">Specifies backdrop style</param>
            <param name="color">Specifies primary color</param>
            <param name="color2">Specifies secondary color (used with hatch and gradient styles).</param>
            <param name="gradient">Specifies gradient direction (used with gradient style)</param>
            <param name="pattern">Specifies hatch pattern (used with hatch style)</param>
            <param name="picture">Specifies picture (used with picture style)</param>
            <param name="pictureAlignment">Specifies picture alignment (used with picture style)</param>
            <param name="alpha">Specifies alpha (transparency) channel</param>
            <param name="antiAliasMode">Specifies AA settings to draw graphics</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.NotifyOnAnyPropertyChange(System.Object)">
            <summary>
            Notification method.
            </summary>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.FitToRectangle(System.Drawing.RectangleF)">
            <summary>
            Sets backdrop's bounding rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.FitToRectangle(System.Drawing.PointF[])">
            Indices of points:
            0 - top left
            1 - top right
            2 - bottom right
            3 - bottom left
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.GetEffectiveColor(System.Byte,System.Drawing.Color)">
            <summary>
            Calculates effective color by the alpha transparency factor and color
            </summary>
            <param name="alpha"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Clone">
            <summary>
            This member overrides <code>Item.Clone</code>
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Backdrop.Dispose">
            <summary>
            Disposed the Backdrop instance from memory.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Canvas">
            <summary>
            Abstract class representing 2D drawing surface.
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.SetClip(System.Drawing.RectangleF)">
            <summary>
            Sets clip bounds.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.ResetClip">
            <summary>
            Resets prev clip bounds.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.DrawPolyline(System.Drawing.PointF[],System.Drawing.Color,System.Int32,GrapeCity.ActiveReports.Chart.Graphics.LineStyle,System.Boolean,System.Boolean,GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin)">
            <summary>
            Draws polyline or polygon.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.DrawLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            Draws just one simple line.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.DrawPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Color,System.Int32,GrapeCity.ActiveReports.Chart.Graphics.LineStyle)">
            <summary>
            Draws the path.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.FillPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Nullable{System.Drawing.PointF},System.Drawing.Color,System.Drawing.Color[],System.Drawing.Drawing2D.Matrix)">
            <summary>
            Fills the path with radial gradient.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.FillPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.RectangleF,System.Drawing.Color[],System.Single[],System.Single,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Fills the path with linear gradient
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.FillPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Color)">
            <summary>
            Fills the path with solid color.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.FillPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills the path with the pattern.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.FillPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Fills the path with texture.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.PushAAMode(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Sets aliasing mode.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.PopAAMode">
            <summary>
            Gets aliasing mode.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.MeasureText(System.String,GrapeCity.ActiveReports.Chart.Graphics.TextStyle)">
            <summary>
            Measures the text value.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.DrawText(System.String,GrapeCity.ActiveReports.Chart.Graphics.TextStyle,System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Draws the text value.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.RegisteredDrawStart">
            <summary>
            Started to gather image-map.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Canvas.RegisteredDrawEnd(System.Drawing.Region@,System.Drawing.RectangleF@)">
            <summary>
            Obtains image-map results.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.NullColorMapper">
            <summary>
            Implements "null mapping" i.e. passes data through itself without changing.
            Use NullColorMapper.Instance to get the instance of the class.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.MonochromeColorMapper.nextBwLineStyle">
            <summary>
            points to next free backdrop in bwBackdrops array
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.MonochromeColorMapper.nextBwBackdrop">
            <summary>
            points to next free backdrop in bwBackdrops array
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.MonochromeColorMapper.getLineKey(GrapeCity.ActiveReports.Chart.Graphics.Line)">
            <summary>
            instead of using lineinfo itself as a key to hashtables we'll use value returned with this function.
            We just ignore weight.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Device">
            <summary>
            This abstract class represents standart interface for accessing any graphics rendering devices. 
            Tranformations are performed in the following order:
            1. Rotate space according to view point
            2. Scale and translate
            3. Projection
            </summary>	
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.InputRegion">
            <summary>
            Designates range of available values in input coordinate system.
            Device will not do clipping on this area, clipping on output area will be performed instead.
            
            Default value: none
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.OutputRegion">
            <summary>
            Designates area on output surface where device should map any output into.
            Device may do automatic clipping to output region.
            
            Default value: none
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.DX">
            <summary>
            Orthogonal projection parameter for axis X.
            If Projection!=Othogonal this property is not used.
            
            Default: 0
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.DY">
            <summary>
            Orthogonal projection parameter for axis Y.
            If Projection!=Othogonal this property is not used.
            
            Default: 0
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.PerspectiveRatio">
            <summary>
            Perspective ratio (in percent).
            It is used for perspective projection.
            
            Default: 50%
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.Projection">
            <summary>
            Projection method used to map from 3d space to 2d space.
            
            Default: Identical
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.DirectionalLightRatio">
            <summary>
            Gets os sets directional/ambient intencity ratio
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.LightSource">
            <summary>
            Gets or sets light source position (direction for infinite source)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.NormalizedLightSource">
            <summary>
            Gets light source's normalized vector
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.InfiniteLightSource">
            <summary>
            Gets or sets whether light source is placed at infinity
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.PushAAMode(GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode)">
            <summary>
            Pushes given AA settings to internal stack
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.PopAAMode">
            <summary>
            Pops AA settings from internal stack to current object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.Revalidate">
            <summary>
            Call this function any time input properties are changed and you want 
            to get object into consistent state.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.OnRevalidate">
            <summary>
            Revalidate() method implemenation.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.SetPlane(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Sets drawing plane. oX and oY should be orthogonal vectors.
            Returns false if device knows that nothing will be visible on this plane.
            </summary>
            <param name="origin">Where origin of plane will be placed</param>
            <param name="ortX">Vector that defines direction and scaling on plane's axis X</param>
            <param name="ortY">Vector that defines direction and scaling on plane's axis Y</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.RegisteredDrawStart">
            <summary>
            This function is used to demark start block of shapes that should be treated as a whole on click testing
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.RegisteredDrawEnd(GrapeCity.ActiveReports.Chart.Graphics.IMouseHandler)">
            <summary>
            This function is used to demark end block of shapes that should be treated as a whole on click testing
            </summary>
            <param name="handler">Object that be called on mouse event</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.RegisteredDrawEnd(GrapeCity.ActiveReports.Chart.Graphics.IMouseHandler,GrapeCity.ActiveReports.Chart.Graphics.DrawParams)">
            <summary>
            This function is used to demark end block of shapes that should be treated as a whole on click testing
            </summary>
            <param name="handler">Object that be called on mouse event</param>
            <param name="drawParams">Drawing parameters</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.RegisteredDrawEnd(GrapeCity.ActiveReports.Chart.Graphics.IMouseHandler,System.Int32)">
            <summary>
            This function is used to demark end block of shapes that should be treated as a whole on click testing
            </summary>
            <param name="handler">Object that be called on mouse event</param>
            <param name="itemIndex"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.Draw(GrapeCity.ActiveReports.Chart.Graphics.Shape)">
            <summary>
            Draws one shape (high-level primitive)
            </summary>
            <param name="s">Shape to draw</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.Draw(System.Collections.ICollection)">
            <summary>
            Draws array of shapes (high-level primitives)
            </summary>
            <param name="collection">Collection of shapes to draw</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.MeasureText(GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text,System.Boolean)">
            <summary>
            Measures rectangular bound to fit given text shape into
            </summary>
            <param name="text">Text shape to measure</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawPolyline(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Drawing.PointF[],System.Boolean)">
            <summary>
            Draw polyline
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawPolyline(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Drawing.PointF[],System.Boolean,GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin)">
            <summary>
            Draw polyline
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawPolyline(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Drawing.PointF[],System.Boolean,System.Boolean)">
            <summary>
            Draw polyline
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawPolyline(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Drawing.PointF[],System.Boolean,System.Boolean,GrapeCity.ActiveReports.Chart.Core.Objects.LineJoin,System.Boolean)">
            <summary>
            Draw polyline
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawEllipse(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Draw ellipse
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawCurve(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Single,System.Drawing.PointF[])">
            <summary>
            Draw curve
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawPolygon(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Drawing.PointF[])">
            <summary>
            Draw polygon
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawPolarPolygon(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Drawing.PointF,System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw polar polygon
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawSector(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draw sector
            </summary>
            <param name="simplifyGradients">if true all non-radial gradients will be drawn as solid colors. (use false only for simple 2d cases!)</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawSpline3d(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single,System.Single,System.Drawing.PointF[])">
            <summary>
            Draw 3D spline
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.DrawText(GrapeCity.ActiveReports.Chart.Graphics.TextStyle,System.Drawing.PointF,System.String,GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Boolean)">
            <summary>
            Draw text
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.IsVectorOrientedToObserver(GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Returns true if the plane is oriented towards the observer
            </summary>
            <param name="planeNormal">Normal vector that specifies the plane</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.#ctor">
            <summary>
            Initializes new instance of the Device class
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Device.StateHolder">
            <summary>
            Holds the Device related data
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Device.StateHolder.PreserveColor">
            <summary>
            Specifies whether device should preserve colors.
            It is used when drawing to b/w device and specifies whether object's color 
            holds significant visualization info.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Device.CurrentState">
            <summary>
            Gets or sets device state including viewpoint, 3d settings etc
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Device.StateKeeper">
            <summary>
            The purpose of that class is to keep device state and restore it on keeper's Dispose call.
            See usage scenario in constructor description.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Device.StateKeeper.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            The purpose of that class is to keep device state and restore it on keeper's Dispose call.
            The only usage scenario is:
            
            <code> 
            using(new Device.StateKeeper(device))
            {
            	device.SetPlane(...);
            	...
            }
            </code>
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.CanvasGdi">
            <summary>
            Complete GDI implementation of the graphics.
            For internal use only.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Devices.CanvasGdi.g">
            <summary>
            GDI+ Graphics container
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.CanvasGdi.#ctor(System.Drawing.Graphics)">
            <summary>
            Creates new canvas.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.CanvasGdi.MeasureTextInternal(System.String,GrapeCity.ActiveReports.Chart.Graphics.TextStyle)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.CanvasGdi.DrawText(System.String,GrapeCity.ActiveReports.Chart.Graphics.TextStyle,System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.CanvasGdi.DrawTextInternal(System.String,GrapeCity.ActiveReports.Chart.Graphics.TextStyle,System.Drawing.RectangleF)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.CanvasGdi.GetStringFormat(GrapeCity.ActiveReports.Chart.Graphics.TextStyle)">
            <summary>
            Allow translate TextStyle to StringFormat
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d">
            <summary>
            Base class for 2D devices
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.ImageMap">
            <summary>
            Gets or sets Image map to use for current rendering
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.MeasureTextInternal(System.String,System.Drawing.PointF,GrapeCity.ActiveReports.Chart.Graphics.TextStyle)">
            <summary>
            Measure text. Method is based on GDI.Graphics object
            </summary>
            <return>Return only size of text</return>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.GetProjectionLength(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Calculate the length of projection for vector X to vector V.
            </summary>
            <param name="v">vector V</param>
            <param name="x">vector X</param>
            <returns>Projection length</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SetPlane(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Sets transformation matrix to output to specifies plane
            </summary>
            <param name="origin">Specifies plane origin</param>
            <param name="ortX">x axis direction</param>
            <param name="ortY">y axis direction</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.CalculateBrushTransform(GrapeCity.ActiveReports.Chart.Graphics.Backdrop)">
            <summary>
            Calculate transform matrix for a brush (gradient, texture...)
            </summary>
            <param name="fillStyle">A backdrop</param>
            <returns>Calculated brush transform</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.DrawInternal(System.Collections.ICollection)">
            <summary>
            Draw a collection
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.LightCalculator">
            <summary>
            Light calculator
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.LightCalculator.GetLightPower(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d,System.Single)">
            <summary>
            Returns light's intensity at the point
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.LightCalculator.GetLightMaskingColor(System.Single)">
            <summary>
            Return the light mask color.
            Based on a alpha component of the black color.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.LightCalculator.GetSpotlitColor(System.Drawing.Color,System.Single)">
            <summary>
            Calculates color value based on point's color and light intensity
            </summary>
            <param name="color">Source object's color</param>
            <param name="light">Light intensity</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.PlainLightCalculator">
            <summary>
            Performs light calculation for a plain object
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.PlainLightCalculator.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Initializes new instance of the PlainLightCalculator class
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.StateHolder.Transform2d">
            <summary>
            Transform 2D projected point under output region.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.StateHolder.Transform3dFull">
            <summary>
            Internal 3D transformation matrix.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.StateHolder.TransformGdi">
            <summary>
            Internal 2D transformation matrix
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.Planificator">
            <summary>
            Matrix of the transform from 2D input point to 3D point.
            It's driven by SetPlane method.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.Transform3d">
            <summary>
            Transform input 3d point using the rotations, z-coordinate displacement and perspective transformation.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.Transform2d">
            <summary>
            Transform 2D projected point under output region.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.Transform3dFull">
            <summary>
            Internal 3D transformation matrix.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.transformGdi">
            <summary>
            Internal 2D transformation matrix
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SplineRenderer.SplineSegment">
            <summary>
            Spline segment. 
            It will be used to contain flatten curve segments of same visibility type.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.DrawLids(System.Collections.ICollection,System.Boolean)">
            <summary>
            Draw sector lids
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.DrawSectorSegment(GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.PolarPolygon,System.Double,System.Double,System.Boolean)">
            <summary>
            Draw sector parts such as outer polygon, inner polygon, start plane and end plane.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.DrawPolarPlane(GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector3d,GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.SectorElement)">
            <summary>
            Draw sector planes
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.DrawSectors(System.Collections.ICollection)">
            <summary>
            Drawing method for given collection.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.PrepareSectors(System.Collections.ICollection)">
            <summary>
            Create series of polar polygons from sector shapes.
            Further polar polygons was used instead of sectors.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.GetFillStyle(GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.SectorElement,GrapeCity.ActiveReports.Chart.Graphics.Backdrop)">
            <summary>
            Get the fill style for a sector element
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.SectorElement">
            <summary>
            Sector element type
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.SectorRenderer.SectorData2d">
            <summary>
            Utility class for polar polygon to sector connection
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.PolarPolygon">
            <summary>
            Polar polygon. 
            It is used for sector3d and cone drawing.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.PolarPolygon.#ctor(System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,System.Object)">
            <summary>
            Create polar polygon (complex primitive)
            </summary>
            <param name="center">The point of center in xOy plane</param>
            <param name="Rx">x-radius</param>
            <param name="Ry">y-radius</param>
            <param name="height">height in z-coordinate</param>
            <param name="topRadiusFactor"></param>
            <param name="startAngle"></param>
            <param name="endAngle"></param>
            <param name="tag"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Devices.Device2d.Sector">
            <summary>
            2D Sector
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.GraphicsUtils.GetAverageColor(System.Drawing.Color[])">
            <summary>
            Returns simple average Color for given colors
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.GraphicsUtils.GetPolygonBounds(System.Drawing.PointF[])">
            <summary>
            Returns bounding rectangle for polygon
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.GraphicsUtils.GetBoundingRectangle(System.Drawing.PointF[])">
            <summary>
            Returns bounding rectangle for polygon
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType">
            <summary>
            Specifies projection type
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType.Identical">
            <summary>
            Flat projection (z coordinate is ignored)
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType.Orthogonal">
            <summary>
            Orthogonal projection
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.ProjectionType.Perspective">
            <summary>
            Projection with perspective
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.LineStyle">
            <summary>
            Specifies line drawing styles
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.None">
            <summary>
            Nothing to draw
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.Solid">
            <summary>
            Solid line
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.Dash">
            <summary>
            Dahsed line
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.Dot">
            <summary>
            Dot line
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.DashDot">
            <summary>
            Dash-dot line
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.LineStyle.DashDotDot">
            <summary>
            Dash-dot-dot line
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle">
            <summary>
            Specifies styles to fill item's backdrop
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Transparent">
            <summary>
            Transparent
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Solid">
            <summary>
            Solid fill
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Gradient">
            <summary>
            Grafient fill
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Pattern">
            <summary>
            Pattern fill
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.BackdropStyle.Picture">
            <summary>
            Picture
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.GradientType">
            <summary>
            Specifies gradient type
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.DiagonalUp">
            <summary>
            From bottom left to top right
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.DiagonalDown">
            <summary>
            From top left to bottom right
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.FromCenter">
            <summary>
            Radial gradient from center
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.GradientType.FromCorner">
            <summary>
            Radial gradient to center
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor">
            <summary>
            Specifies how text shape anchors to its position
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.TopLeft">
            <summary>
            Anchors by the top left corner
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.TopMiddle">
            <summary>
            Anchors by the center of the top
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.TopRight">
            <summary>
            Anchors by the top right corner
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.MiddleLeft">
            <summary>
            Anchors by the center of the left side
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.Center">
            <summary>
            Anchors text by shape center
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.MiddleRight">
            <summary>
            Anchors by the center of the right side
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.BottomLeft">
            <summary>
            Anchors by the bottom left corner
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.BottomMiddle">
            <summary>
            Anchors by the center of shape's bottom side
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAnchor.BottomRight">
            <summary>
            Anchors by the bottom right corner
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.TextAlign">
            <summary>
            Specifies how text aligns within its rectangle
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAlign.Left">
            <summary>
            Aligns text to the left
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAlign.Center">
            <summary>
            Aligns text to center
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.TextAlign.Right">
            <summary>
            Aligns text to the right
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle">
            <summary>
            Specifies how picture is aligned within backdrop
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Stretched">
            <summary>
            Stretches picture to entire backdrop
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Tiled">
            <summary>
            Tiles picture
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Centered">
            <summary>
            Puts picture at center
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Top">
            <summary>
            Puts picture at the top center
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Left">
            <summary>
            Puts picture at the left
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Bottom">
            <summary>
            Puts picture at the bottom
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.PicturePutStyle.Right">
            <summary>
            Puts picture at the right
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode">
            <summary>
            Specifies antialiasing settings
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Auto">
            <summary>
            Uses AA settings of the parent object
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.None">
            <summary>
            Turns AA off
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Graphics">
            <summary>
            Turns AA on for graphics only
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Text">
            <summary>
            Turns AA on for texts only
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.AntiAliasMode.Both">
            <summary>
            Turns AA on for graphics and text
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.ShapeArea">
            <summary>
            ImageMap entry
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.ImageMap">
            <summary>
            ImageMap class provides mapping from image coordinates to Shapes
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.ImageMap.Clear">
            <summary>
            Clears the map
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.ImageMap.AddArea(GrapeCity.ActiveReports.Chart.Graphics.ShapeArea)">
            <summary>
            Adds area to the map
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.ImageMap.FindArea(System.Single,System.Single)">
            <summary>
            Finds the area at coordinate given
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>Found area or null if no area found</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Bar">
            <summary>
            Stores a set of three integers that represent the size of a 3D bar area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.Width">
            <summary>
            Gets the width of the bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.Height">
            <summary>
            Gets the height of the bar.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.Depth">
            <summary>
            Gets the depth of the bar.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Bar.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the Bar class with parameters.
            </summary>
            <param name="width">The width of the bar.</param>
            <param name="height">The height of the bar.</param>
            <param name="depth">The depth of the bar.</param>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Bar.Empty">
            <summary>
            Indicates a new instance of a Bar structure whose property has not been initialized.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Bar.IsEmpty">
            <summary>
            Gets true if bar is empty
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.IColorMapper">
            <summary>
            Summary description for IColorMapper.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.IMouseHandler">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Line">
            <summary>
            Holds all visual attibutes of line.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.Color">
            <summary>
            Color used to draw line
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.Weight">
            <summary>
            Line thickness
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.Style">
            <summary>
            Style used to draw line
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Line.IsDirty">
            <summary>
            Overridden <code>Item.IsDirty</code>. Specifies whether object should be redrawn.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor">
            <summary>
            Creates default line
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color)">
            <summary>
            Creates solid line with thickness of 1 and with specified color
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Creates solid line with specified thickness and color
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color,GrapeCity.ActiveReports.Chart.Graphics.LineStyle)">
            <summary>
            Initializes new instance of the LineInfo class with thickness of 1 and with specified style
            </summary>
            <param name="color"></param>
            <param name="style"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.Drawing.Color,System.Int32,GrapeCity.ActiveReports.Chart.Graphics.LineStyle)">
            <summary>
            Initializes new instance of the Line class.
            </summary>
            <param name="color">The color of the line</param>
            <param name="weight">The thickness of the line</param>
            <param name="style">The style of the line</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Line.Converter">
            <summary>
            The type converter for <see cref="T:GrapeCity.ActiveReports.Chart.Graphics.Line"/>.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Line.SeriesLineConverter">
            <summary>
            The type converter for series lines.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.SeriesLineConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.SeriesLineConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.Equals(System.Object)">
            <summary>
            Compare the Line object to another System.Object and check if the two are equal.
            </summary>
            <param name="obj">System.Object to compare with the Line object.</param>
            <returns>Boolean type. Returns True if the two are equal. Otherwise it is False.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Line.GetHashCode">
            <summary>
            It functions as a hash function for a particular type. It is suitable for use in data structures such as hash algorithm and hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d">
            <summary>
            Represents 4x4 matrix
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m11">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m12">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m13">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m14">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m21">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m22">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m23">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m24">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m31">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m32">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m33">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m34">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m41">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m42">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m43">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.m44">
            <summary>
            Matrix value
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.#ctor(System.Single[])">
            <summary>
            Initializes new instance of the Matrix class. Paramters are enumerated in the following order:
            m11, m12, m13, m14,
            ...
            ...
            m41, m42, m43, m44
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.IdenticalMatrix">
            <summary>
            Returns identical matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.GetRotationXMatrix(System.Single)">
            <summary>
            Returns matrix for rotation around x axis
            </summary>
            <param name="t">Specifies rotation angle</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.GetRotationYMatrix(System.Single)">
            <summary>
            Returns matrix for rotation around y axis
            </summary>
            <param name="t">Specifies rotation angle</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.GetTranslationMatrix(System.Single,System.Single,System.Single)">
            <summary>
            Returns coordinates translation matrix
            </summary>
            <param name="dX">Specifies shift along x axis</param>
            <param name="dY">Specifies shift along y axis</param>
            <param name="dZ">Specifies shift along z axis</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.GetScalingMatrix(System.Single,System.Single,System.Single)">
            <summary>
            Returns scaling matrix
            </summary>
            <param name="sX">Specifies scale factor along x axis</param>
            <param name="sY">Specifies scale factor along y axis</param>
            <param name="sZ">Specifies scale factor along z axis</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.GetProjectionMatrix(System.Single)">
            <summary>
            Return projection matrix for the central perspective
            </summary>
            <param name="perspectiveRatio">Specifies distance to observer</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.GetOrtProjectionMatrix(System.Single,System.Single)">
            <summary>
            Returns orthgonal projection matrix
            </summary>
            <param name="dX"></param>
            <param name="dY"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Matrix3d.op_Multiply(GrapeCity.ActiveReports.Chart.Graphics.Matrix3d,GrapeCity.ActiveReports.Chart.Graphics.Matrix3d)">
            <summary>
            Multiplies two matrices
            </summary>
            <param name="m"></param>
            <param name="n"></param>
            <returns>The result of product</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Point2d">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a 2D plane.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.X">
            <summary>
            Gets or sets point's x coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Y">
            <summary>
            Gets or sets point's y coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.IsDirty">
            <summary>
            Overridden <code>Item.IsDirty</code>. Specifies whether object should be redrawn.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Clone">
            <summary>
            Overridden <code>Item.Clone</code>.
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor">
            <summary>
            Initializes new instance of the Point2d class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor(System.Single,System.Single)">
            <summary>
            Initializes new instance of the Point2d class.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes new instance of the Point2d class
            </summary>
            <param name="p">The GDI+ point structure.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.ToString">
            <summary>
            Converts the value of the current instance to string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Equals(System.Object)">
            <summary>
            Compare the CLASS_NAME object to another System.Object and check if the two are equal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Equality(GrapeCity.ActiveReports.Chart.Graphics.Point2d,GrapeCity.ActiveReports.Chart.Graphics.Point2d)">
            <summary>
            Checks whether two given Point2d are equal.
            </summary>
            <param name="a">First Point2d to check.</param>
            <param name="b">Second Point2d to check.</param>
            <returns><c>True</c> if the two Point2d are equal, <c>False</c> othervise.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Inequality(GrapeCity.ActiveReports.Chart.Graphics.Point2d,GrapeCity.ActiveReports.Chart.Graphics.Point2d)">
            <summary>
            Checks whether two given Point2d are different.
            </summary>
            <param name="a">First Point2d to check.</param>
            <param name="b">Second Point2d to check.</param>
            <returns><c>True</c> if the two Point2d are differs, <c>False</c> othervise.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.GetHashCode">
            <summary>
            It functions as a hash function for a particular type. It is suitable for use in data structures such as hash algorithm and hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Implicit(GrapeCity.ActiveReports.Chart.Graphics.Point2d)~System.Drawing.PointF">
            <summary>
            Implicit conversion to <code>PointF</code>.
            </summary>
            <param name="p">A Point2d that specifies the coordinates for the new PointF.</param>
            <returns>The new PointF structure with the specified coordinates of the Point2d.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point2d.op_Implicit(System.Drawing.PointF)~GrapeCity.ActiveReports.Chart.Graphics.Point2d">
            <summary>
            Implicit conversion to <code>PointF</code>.
            </summary>
            <param name="p">A Point2d that specifies the coordinates for the new PointF.</param>
            <returns>The new PointF structure with the specified coordinates of the Point2d.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point2d.Length">
            <summary>
            Gets vector length
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Point3d">
            <summary>
            Represents a point in 3D geometrical space.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.X">
            <summary>
            Gets or sets point's x coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Y">
            <summary>
            Gets or sets point's y coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Z">
            <summary>
            Gets or sets point's z coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Point3d.IsDirty">
            <summary>
            Overridden <code>Item.IsDirty</code>. Specifies whether object should be redrawn.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Clone">
            <summary>
            Overridden <code>Item.Clone</code>.
            </summary>
            <returns>Object's clone</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.#ctor">
            <summary>
            Initializes new instance of the Point3d class.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of the Point3d class.
            </summary>
            <param name="x">The x- coordinate of the 3d point</param>
            <param name="y">The y- coordinate of the 3d point</param>
            <param name="z">The z- coordinate of the 3d point</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.#ctor(System.String,GrapeCity.ActiveReports.Chart.GraphXmlSerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.ToString">
            <summary>
            Converts the value of the current instance to string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.Equals(System.Object)">
            <summary>
            Compare the Point3d object to another System.Object and check if the two are equal.
            </summary>
            <param name="obj">Point3d System.Object to be compared with object.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.GetHashCode">
            <summary>
            It functions as a hash function for a particular type. It is suitable for use in data structures such as hash algorithm and hash table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Point3d.ToVector3d">
            <summary>
            Explicit convertion to <code>Vector3d</code>
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shape">
            <summary>
            Summary description for ShapeCommon.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draws the shape
            </summary>
            <param name="device">Device to draw on</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.#ctor">
            <summary>
            Initializes new instance of the Shape class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.GetVerticalPosition">
            <summary>
            Returns shape's vertical position (usually bottom of the shape.
            Required to sort shapes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bar">
            <summary>
            Bar shape (3-dimensional rectangle)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bar.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bar.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bar.Bounds">
            <summary>
            Sets the shape's points to rectangular area
            </summary>
            <value></value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bar.OffsetZ">
            <summary>
            Gets or sets shape's offset by z coordinate. By default front face will be placed on current z-plane
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bar.AdjustShapeFillStyle(GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle,System.Int32)">
            <summary>
            Provides special handling for vertical gradients so that bar if filled as whole (not a separate facets)
            </summary>
            <param name="planeShape"></param>
            <param name="planeIndex"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D">
            <summary>
            Cone 3D shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.LineStyle">
            <summary>
            Line style to stroke cone.
            If set to null cone will not be stroked.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.FillStyle">
            <summary>
            Style to fill cone.
            If set to null cone will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.Bounds">
            <summary>
            Bounds of the cone base area.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.TopRadiusFactor">
            <summary>
            Cone radius factor (top plane to bottom one)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.Depth">
            <summary>
            Gets or sets depth factor
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of the Cone3D class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            Draws the shape on the given device
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.GetFillStyle(GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.ConeElements)">
            <summary>
            Get the fill style for a cone element
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Cone3D.ConeElements">
            <summary>
            Cone element type
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Curve">
            <summary>
            Bezier curve shape
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Curve.#ctor">
            <summary>
            Initializes new instance of the ShapeCurve class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Curve.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,System.Drawing.PointF[])">
            <summary>
            Initializes new instance of the ShapeCurve class
            </summary>
            <param name="lineStyle"></param>
            <param name="pointData"></param>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Curve.Points">
            <summary>
            Gets or sets curve's points
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Curve.LineStyle">
            <summary>
            Gets or sets line info to draw curve
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Curve.Tension">
            <summary>
            Gets or sets curve's tension
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Curve.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            This member overrides <see cref="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)"/>
            </summary>
            <param name="d"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3DBase">
            <summary>
            Base class for various 3D Lines
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3DBase.PointData">
            <summary>
            Gets or sets line points
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3DBase.Width">
            <summary>
            Width of 3D line (z-coordinate)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3DBase.LineStyle">
            <summary>
            Gets or sets line info to outline the shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3DBase.FillStyle">
            <summary>
            Gets or sets backdrop info to fill the shape
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3D">
            <summary>
            Line shape with 3D look
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3D.Thickness">
            <summary>
            Thickness of 3D line (xOy plane)
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Line3D.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single,System.Single,System.Drawing.PointF[])">
            <summary>
            Initializes new instance of the Shapes.Line3D class
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bezier3D.Tension">
            <summary>
            Tension specifies the amount that the curve bends between control points.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bezier3D.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single,System.Single,System.Drawing.PointF[])">
            <summary>
            Initializes new instance of the Shapes.Bezier3D class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Bezier3D.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            This member overrides <see cref="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)"/>
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline">
            <summary>
            Polygon shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline.Points">
            <summary>
            Gets the polygon's points
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline.IsClosed">
            <summary>
            Gets or sets IsClosed property. IsClosed property specifies whether start and end point should be connected.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline.LineJoin">
            <summary>
            Gets or Sets LineJoin property. Specifies how to join consecutive line or curve segments in a figure (subpath) contained in a path (PolyLine)
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            This member overrides <see cref="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)"/>
            </summary>
            <param name="d"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D">
            <summary>
            Bar shape (3-dimensional rectangle)
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.Bounds">
            <summary>
            Sets the shape's points to rectangular area
            </summary>
            <value></value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.OffsetZ">
            <summary>
            Gets or sets shape's offset by z coordinate. By default front face will be placed on current z-plane
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.VertexCount">
            <summary>
            Gets or sets number of vertices in the base of the shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.TopRadiusFactor">
            <summary>
            Gets or sets top to bottom plane radius factor
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.RotationAngle">
            <summary>
            Gets or sets rotation angle
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Pyramid3D.AdjustShapeFillStyle(GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline,System.Int32)">
            <summary>
            Provides special handling for vertical gradients so that bar if filled as whole (not a separate facets)
            </summary>
            <param name="planeShape"></param>
            <param name="planeIndex"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle">
            <summary>
            Rectangle shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle.BottomLeft">
            <summary>
            Gets or sets bottom left point
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle.Bounds">
            <summary>
            Sets the shape's points to rectangular area
            </summary>
            <value></value>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle.IsClosed">
            <summary>
            This member overrides <see cref="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Polyline.IsClosed"/>
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of the ShapeRectangle class
            </summary>
            <param name="lineStyle"></param>
            <param name="fillStyle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Line,GrapeCity.ActiveReports.Chart.Graphics.Backdrop,System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of the ShapeRectangle class
            </summary>
            <param name="lineStyle"></param>
            <param name="fillStyle"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Rectangle.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            This member overrides <see cref="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)"/>
            </summary>
            <param name="d"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector">
            <summary>
            Specifies sector shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.FillStyle">
            <summary>
            Gets or sets backdrop info to fill the shape surface
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.LineStyle">
            <summary>
            Gets or sets line info to outline shapes
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.Center">
            <summary>
            Gets or sets the shape's center position
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.InnerRX">
            <summary>
            Gets or sets inner radius along x axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.InnerRY">
            <summary>
            Gets or sets inner radius along y axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.OuterRX">
            <summary>
            Gets or sets outer radius along x axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.OuterRY">
            <summary>
            Gets or sets outer radius along y axis
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.StartAngle">
            <summary>
            Gets or sets start angle
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.SweepAngle">
            <summary>
            TBW
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.#ctor">
            <summary>
            Initializes new instance of the ShapeSector class
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.#ctor(GrapeCity.ActiveReports.Chart.Graphics.Backdrop,GrapeCity.ActiveReports.Chart.Graphics.Line,System.Int32,System.Object)">
            <summary>
            Initialized new instance of the ShapeSector class
            </summary>
            <param name="fillStyle"></param>
            <param name="lineStyle"></param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            This member overrides <see cref="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)"/>
            </summary>
            <param name="d"></param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector3d">
            <summary>
            3D sector shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector3d.LineStyle">
            <summary>
            Gets or sets line style to stroke rectangle.
            If set to null rectangle will not be stroked.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector3d.FillStyle">
            <summary>
            Gets or sets style to fill rectangle.
            If set to null rectangle will not be filled.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector3d.InnerFactor">
            <summary>
            Sets inner radius factor
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Sector3d.Depth">
            <summary>
            Sets depth factor
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text">
            <summary>
            Text shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text.Style">
            <summary>
            Gets or sets text output style
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text.AnchorPoint">
            <summary>
            Gets or sets shape's position
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text.TextValue">
            <summary>
            Gets or sets text string
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text.BoundLineStyle">
            <summary>
            Gets or sets line info to draw rectangle around the text shape
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text.BoundFillStyle">
            <summary>
            Gets or sets backdrop info to fill the shape's rectangle
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)">
            <summary>
            This member overrides <see cref="M:GrapeCity.ActiveReports.Chart.Graphics.Shape.DrawInternal(GrapeCity.ActiveReports.Chart.Graphics.Device)"/>
            </summary>
            <param name="d">Device to draw on</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Shapes.Text.#ctor(GrapeCity.ActiveReports.Chart.Graphics.TextStyle,System.Drawing.PointF,System.String)">
            <summary>
            Initializes new instance of the ShapeText class
            </summary>
            <param name="style">Specifies text output style</param>
            <param name="anchorPoint">Specifies anchor point</param>
            <param name="textValue">Specifies text string</param>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.TextStyle">
            <summary>
            Specified text output settings
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.MaxWidth">
            <summary>
            Gets or sets maximal bounding rectangle width.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.MaxHeight">
            <summary>
            Gets or sets maximal bounding rectangle height.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.Font">
            <summary>
            Gets or sets font info to draw text.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.IsVertical">
            <summary>
            Gets or sets whether draw text vertically.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.Anchor">
            <summary>
            Gets or sets how text box anchors to its position.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.Align">
            <summary>
            Gets or sets text string alignment within its rectangle.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.Color">
            <summary>
            Gets or sets the color to draw text string.
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.TextStyle.Angle">
            <summary>
            Gets or sets text output angle.
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Zero">
            <summary>
            Gets zero-length 2D vector
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.X">
            <summary>
            Gets or sets point's x coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Y">
            <summary>
            Gets or sets point's y coordinate
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.#ctor(System.Single,System.Single)">
            <summary>
            Initializes new instance of the Point2d class.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes new instance of the Point2d class
            </summary>
            <param name="p">The GDI+ point structure.</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_LogicalNot(GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Return normalized vector (length is 1).
            </summary>
            <param name="point">Normalizable vector</param>
            <returns>Normalized vector</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Normalize(GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Return normalized vector (length is 1).
            </summary>
            <param name="point">Normalizable vector</param>
            <returns>Normalized vector</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_Multiply(System.Double,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Returns production of the vector and a scalar value.
            </summary>
            <param name="scalar">The scalar value</param>
            <param name="point">Vector</param>
            <returns>Product of <code>k</code> and <code>point</code></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Multiply(System.Double,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Returns production of the vector and a scalar value.
            </summary>
            <param name="scalar">The scalar value</param>
            <param name="point">Vector</param>
            <returns>Product of <code>k</code> and <code>point</code></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_Multiply(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Returns scalar production of two vectors.
            </summary>
            <param name="p1">First vector</param>
            <param name="p2">Second vector</param>
            <returns>The product vector</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Multiply(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Returns scalar production of two vectors
            </summary>
            <param name="p1">First vector</param>
            <param name="p2">Second vector</param>
            <returns>The product vector</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_Division(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,System.Double)">
            <summary>
            Divide the vector by a scalar value.
            </summary>
            <param name="point">Vector</param>
            <param name="scalar">The scalar value</param>
            <returns>Product of <code>k</code> and <code>point</code></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_Addition(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="p1">First vector</param>
            <param name="p2">Second vector</param>
            <returns>The sum of the <code>p1</code> and <code>p2</code></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Add(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="p1">First vector</param>
            <param name="p2">Second vector</param>
            <returns>The sum of the <code>p1</code> and <code>p2</code></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_Subtraction(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Yields the difference between two vectors.
            </summary>
            <param name="p1">First vector</param>
            <param name="p2">Second vector</param>
            <returns>The difference between<code>p1</code> and <code>p2</code></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Subtract(GrapeCity.ActiveReports.Chart.Graphics.Vector2d,GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Yields the difference between two vectors.
            </summary>
            <param name="p1">First vector</param>
            <param name="p2">Second vector</param>
            <returns>The difference between<code>p1</code> and <code>p2</code></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_Implicit(GrapeCity.ActiveReports.Chart.Graphics.Vector2d)~System.Drawing.PointF">
            <summary>
            Implicit conversion to <code>PointF</code>.
            </summary>
            <param name="p">A Point2d that specifies the coordinates for the new PointF.</param>
            <returns>The new PointF structure with the specified coordinates of the Point2d.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.op_Implicit(System.Drawing.PointF)~GrapeCity.ActiveReports.Chart.Graphics.Vector2d">
            <summary>
            Implicit conversion to <code>PointF</code>.
            </summary>
            <param name="p">A Point2d that specifies the coordinates for the new PointF.</param>
            <returns>The new PointF structure with the specified coordinates of the Point2d.</returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.ToPointF(GrapeCity.ActiveReports.Chart.Graphics.Vector2d)">
            <summary>
            Implicit conversion to <code>PointF</code>.
            </summary>
            <param name="p">A Point2d that specifies the coordinates for the new PointF.</param>
            <returns>The new PointF structure with the specified coordinates of the Point2d.</returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Vector2d.Length">
            <summary>
            Gets vector length
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Graphics.Vector3d">
            <summary>
            Represents a vector in 3D space
            </summary>
        </member>
        <member name="F:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Zero">
            <summary>
            Gets zero-length vector
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.X">
            <summary>
            Gets or sets point's x coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Y">
            <summary>
            Gets or sets point's y coordinate
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Z">
            <summary>
            Gets or sets point's z coordinate
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes new instance of the Point3d class.
            </summary>
            <param name="x">The x- coordinate of the 3d point</param>
            <param name="y">The y- coordinate of the 3d point</param>
            <param name="z">The z- coordinate of the 3d point</param>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Reverse(GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Reverses point coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Multiply(System.Single,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Calculates vector production by scalar
            </summary>
            <param name="a"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Divide(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,System.Single)">
            <summary>
            Devides vector by scalar
            </summary>
            <param name="point"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.VectorMultiply(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Calculates vector production of vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Multiply(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Calculates scalar production of two vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Add(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Calculates vector summ of two vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Sub(GrapeCity.ActiveReports.Chart.Graphics.Vector3d,GrapeCity.ActiveReports.Chart.Graphics.Vector3d)">
            <summary>
            Subtract vector v2 from vector v1
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.Graphics.Vector3d.Length">
            <summary>
            Gets vector length
            </summary>
        </member>
        <member name="P:GrapeCity.ActiveReports.Chart.InternalC.ConverterBase.ObjectType">
            <summary>
            Gets the type of the base object
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.InternalC.StdCollectionTypeConverter">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.InternalC.StdCollectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information. For internal use only.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>>An Object that represents the converted value.</returns>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.InternalC.AxisBaseTypeConverter">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Styling.StyleManager">
            <summary>
            Summary description for StyleManager. For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Styling.StyleManager.ContainsValue(System.String,System.Object,System.String@)">
            <summary>
            Determines whether internal inverse  hashes contain the specified object and returns its name if it does
            </summary>
        </member>
        <member name="T:GrapeCity.ActiveReports.Chart.Tools.EmbeddedResourceManager">
            <summary>Allows to load resource strings from main assembly instead of satellite assembly.</summary>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tools.EmbeddedResourceManager.InjectTo(System.Type)">
            <summary>
            Replaces default ResourceManager with the <see cref="T:GrapeCity.ActiveReports.Chart.Tools.EmbeddedResourceManager"/> in the specified class.
            </summary>
            <param name="resourceDesignerType">The resource's designer auto-generated class.</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:GrapeCity.ActiveReports.Chart.Tools.EmbeddedResourceManager.SatelliteAssemblyExists(System.Globalization.CultureInfo)">
            <summary> Check if the satellite assembly exists and contains suitable resource. </summary>
        </member>
    </members>
</doc>
